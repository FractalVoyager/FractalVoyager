(() => {
  var __webpack_modules__ = {
      7911: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f0283badd42fe745cbe4.wasm";
      },
      2220: (e, r, t) => {
        "use strict";
        e.exports = t.p + "a5ee9301e9948a38c5b0.a";
      },
      8839: (e, r, t) => {
        "use strict";
        e.exports = t.p + "d3febdfe46b4a90e5d13.a";
      },
      6083: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8a3942b36afc94293f78.a";
      },
      2433: (e, r, t) => {
        "use strict";
        e.exports = t.p + "aaacf72c4293885f3981.a";
      },
      2156: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6e39b186389d876425b6.a";
      },
      7117: (e, r, t) => {
        "use strict";
        e.exports = t.p + "770a53c29432c92364e8.a";
      },
      2895: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6676b9f8cba3f6f9504f.a";
      },
      2399: (e, r, t) => {
        "use strict";
        e.exports = t.p + "027cb8ac6666251e390f.a";
      },
      8305: (e, r, t) => {
        "use strict";
        e.exports = t.p + "593aac65e32e855929ab.a";
      },
      2631: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e38cdda5ca1f9617b4d2.a";
      },
      3743: (e, r, t) => {
        "use strict";
        e.exports = t.p + "a95c58d116b417247f1f.a";
      },
      4329: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9c6f88f14b1ca01cd2a3.a";
      },
      1590: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b2f4f98ff2e618604cdc.a";
      },
      7538: (e, r, t) => {
        "use strict";
        e.exports = t.p + "019acfdd56c878299047.a";
      },
      5006: (e, r, t) => {
        "use strict";
        e.exports = t.p + "bb5f1bcaf5299bfcb1f7.a";
      },
      8565: (e, r, t) => {
        "use strict";
        e.exports = t.p + "644b5edde7f4df30b4a7.a";
      },
      4216: (e, r, t) => {
        "use strict";
        e.exports = t.p + "def2e0a48afad5408473.a";
      },
      6437: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5f5b08f157f3670785cb.a";
      },
      3181: (e, r, t) => {
        "use strict";
        e.exports = t.p + "56b4dd6088d9b60490d8.a";
      },
      4337: (e, r, t) => {
        "use strict";
        e.exports = t.p + "2754f972e673987726f7.a";
      },
      5709: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4ae248a4532699a7fabd.a";
      },
      8848: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8a9c08484fac6b54b554.a";
      },
      3138: (e, r, t) => {
        "use strict";
        e.exports = t.p + "df116a87bb461a3ba533.a";
      },
      3289: (e, r, t) => {
        "use strict";
        e.exports = t.p + "49c9ad3e8cfed6575848.a";
      },
      7036: (e, r, t) => {
        "use strict";
        e.exports = t.p + "936acf34f9406ab0a6f8.a";
      },
      843: (e, r, t) => {
        "use strict";
        e.exports = t.p + "aa6cd7a259e084446796.a";
      },
      4722: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b4ef012f1edcec3076e8.a";
      },
      6037: (e, r, t) => {
        "use strict";
        e.exports = t.p + "fefe5d5e0b9817df2802.a";
      },
      3766: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e707e552c02523b4245e.a";
      },
      5052: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4c5e79483ebda7b07e4e.a";
      },
      2621: (e, r, t) => {
        "use strict";
        e.exports = t.p + "576fb8e37f5af1c9c3fd.a";
      },
      4503: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1754e00b4e2c496160e2.a";
      },
      9783: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e43c6f178821c3ebb17e.a";
      },
      4106: (e, r, t) => {
        "use strict";
        e.exports = t.p + "848137a3fff4c44b7f6a.a";
      },
      9200: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9a8de5ae196c7a3fa9e8.a";
      },
      1085: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f03f0884c6369c148e6b.a";
      },
      489: (e, r, t) => {
        "use strict";
        e.exports = t.p + "21d74c631d6b5d57fdf0.a";
      },
      2120: (e, r, t) => {
        "use strict";
        e.exports = t.p + "7760079e1a0e0e943337.a";
      },
      2510: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c88c5c86f371ac2fbd27.a";
      },
      5799: (e, r, t) => {
        "use strict";
        e.exports = t.p + "7273dd29ef1379c23089.a";
      },
      6474: (e, r, t) => {
        "use strict";
        e.exports = t.p + "903d775a7c01b0a8302e.a";
      },
      7509: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5b162e2075fe0ad9ae86.a";
      },
      6209: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f45faeacf5d3190597aa.a";
      },
      1809: (e, r, t) => {
        "use strict";
        e.exports = t.p + "efb2437ce73fe73669bd.a";
      },
      588: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5f5c761577337f8715c0.a";
      },
      231: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1d2d2c3848b4c74a9984.a";
      },
      5638: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5e4d1d0feb99e0f7649d.a";
      },
      6124: (e, r, t) => {
        "use strict";
        e.exports = t.p + "dacae59483525b96002c.a";
      },
      1077: (e, r, t) => {
        "use strict";
        e.exports = t.p + "37f9433ccbb2e5b06f80.a";
      },
      4956: (e, r, t) => {
        "use strict";
        e.exports = t.p + "81d0ac06d1c2ad629785.a";
      },
      2045: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4e9fcba7c19d91fbd475.a";
      },
      7982: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ef04f09a4ac1910678e6.a";
      },
      6498: (e, r, t) => {
        "use strict";
        e.exports = t.p + "00ca31632129751ac14e.a";
      },
      6744: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1d582aefcec51ccf575e.a";
      },
      4853: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6294ecc490cf0f2b7867.a";
      },
      684: (e, r, t) => {
        "use strict";
        e.exports = t.p + "bb18a32e4130d426d35d.a";
      },
      9884: (e, r, t) => {
        "use strict";
        e.exports = t.p + "171f06adf4ca45b43274.a";
      },
      8671: (e, r, t) => {
        "use strict";
        e.exports = t.p + "aaf39f7b0a33ad89516a.a";
      },
      9226: (e, r, t) => {
        "use strict";
        e.exports = t.p + "02934eef61f674a7ba8b.a";
      },
      1237: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9b6ef3a3b3c561272b1d.a";
      },
      979: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b4218667f09dd0592f31.a";
      },
      4809: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b4a90fa56770b7c0ed93.a";
      },
      6226: (e, r, t) => {
        "use strict";
        e.exports = t.p + "324865c4a6e59371aa07.a";
      },
      1837: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ad473e6f07763dd5e6f0.a";
      },
      6269: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4d870f1c504d70e9657f.a";
      },
      8072: (e, r, t) => {
        "use strict";
        e.exports = t.p + "73b97b3beff14f47a807.a";
      },
      5425: (e, r, t) => {
        "use strict";
        e.exports = t.p + "daf021c7f25ff74890d4.a";
      },
      297: (e, r, t) => {
        "use strict";
        e.exports = t.p + "02b4510138040d46231f.a";
      },
      6214: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3bd4396ead453e4ed403.a";
      },
      2905: (e, r, t) => {
        "use strict";
        e.exports = t.p + "2b8a84c5dd12caecce74.a";
      },
      1952: (e, r, t) => {
        "use strict";
        e.exports = t.p + "bedd34b179493040a81e.a";
      },
      730: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ab602f45c7a0d68440ea.a";
      },
      2604: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9e2d96ffe47693786fa8.a";
      },
      2238: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9ccbcde5aa7a9eb4d38e.a";
      },
      6335: (e, r, t) => {
        "use strict";
        e.exports = t.p + "226968a81c4faee77de2.a";
      },
      9262: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3d960df64448d8eb5038.a";
      },
      6644: (e, r, t) => {
        "use strict";
        e.exports = t.p + "d9ea7a9998a09c276158.a";
      },
      1137: (e, r, t) => {
        "use strict";
        e.exports = t.p + "d128e7651294849405be.a";
      },
      3155: (e, r, t) => {
        "use strict";
        e.exports = t.p + "401cd80fe51001bb1a63.a";
      },
      1428: (e, r, t) => {
        "use strict";
        e.exports = t.p + "395eb7f88e36733b7e9c.a";
      },
      198: (e, r, t) => {
        "use strict";
        e.exports = t.p + "34c7d9125bf0bdaf0178.a";
      },
      4491: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f978c6aa8bc576a41037.a";
      },
      7987: (e, r, t) => {
        "use strict";
        e.exports = t.p + "cf8a1872bb7ba5c61027.a";
      },
      1006: (e, r, t) => {
        "use strict";
        e.exports = t.p + "cc34f01f30f83cd4f50e.a";
      },
      3380: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e875359c01ba17c0be14.a";
      },
      9441: (e, r, t) => {
        "use strict";
        e.exports = t.p + "90a7cde4d54bcb949daf.a";
      },
      589: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4bf0b95b08ea03231696.a";
      },
      1934: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6c95ccc192cc5cedda57.a";
      },
      3906: (e, r, t) => {
        "use strict";
        e.exports = t.p + "30c5877ae1a653c6d5f7.a";
      },
      8763: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1f33fbe509395d6e35d3.a";
      },
      6929: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b11ab0c1e4dbd3bc46b9.a";
      },
      4024: (e, r, t) => {
        "use strict";
        e.exports = t.p + "98bfeb29a114081d225b.a";
      },
      359: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c2bd245fa6d9997e3760.a";
      },
      2909: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4bdb12dfce4fc2e5c72a.a";
      },
      1746: (e, r, t) => {
        "use strict";
        e.exports = t.p + "58e35328715996cf20c1.a";
      },
      3717: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5d9204846740fdfff126.a";
      },
      4392: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6cc9879b697f7bea5320.a";
      },
      5443: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4b75a92c47b9d2f1da3e.a";
      },
      7107: (e, r, t) => {
        "use strict";
        e.exports = t.p + "253c83e39376e8305ab6.a";
      },
      4389: (e, r, t) => {
        "use strict";
        e.exports = t.p + "003abc24b98e20612cee.a";
      },
      3309: (e, r, t) => {
        "use strict";
        e.exports = t.p + "496dd2f48b66b8cb7606.a";
      },
      8399: (e, r, t) => {
        "use strict";
        e.exports = t.p + "29d8c156f5f1464d475a.a";
      },
      3740: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b532f5ece12a15aefaf0.a";
      },
      426: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3d3924c42465d0fa49d9.a";
      },
      4881: (e, r, t) => {
        "use strict";
        e.exports = t.p + "96b4a47dce9ccbc9044c.a";
      },
      8740: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3762a871e53a7f2be47d.a";
      },
      943: (e, r, t) => {
        "use strict";
        e.exports = t.p + "27da7a84edbf7d0c6414.a";
      },
      4108: (e, r, t) => {
        "use strict";
        e.exports = t.p + "cabb6f5ef2e39e9ba39d.a";
      },
      5015: (e, r, t) => {
        "use strict";
        e.exports = t.p + "0ce62cc3b7a3acef23f2.a";
      },
      5666: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3451fe3aaae5367cc50e.a";
      },
      8377: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b25fbaced0366a902a81.a";
      },
      8160: (e, r, t) => {
        "use strict";
        e.exports = t.p + "68a603456ac5c6d7db4f.a";
      },
      2136: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c240cb6c2119909b942b.a";
      },
      4032: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5b2c818770988de3bdbb.a";
      },
      9061: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1aef9b3ca32fe30de8da.a";
      },
      6997: (e, r, t) => {
        "use strict";
        e.exports = t.p + "085dc88a414612443d3f.a";
      },
      1320: (e, r, t) => {
        "use strict";
        e.exports = t.p + "11b668c873a64514b50c.a";
      },
      3508: (e, r, t) => {
        "use strict";
        e.exports = t.p + "99f706cb4c9f9ff65afa.a";
      },
      9659: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f4170ad872a06601aa01.a";
      },
      5084: (e, r, t) => {
        "use strict";
        e.exports = t.p + "bb85f3944f23b3173b13.a";
      },
      1390: (e, r, t) => {
        "use strict";
        e.exports = t.p + "26427f6f132a9f2e781c.a";
      },
      9411: (e, r, t) => {
        "use strict";
        e.exports = t.p + "32af490da76021cdb0f7.a";
      },
      7419: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e87631b792e2f847abba.a";
      },
      6170: (e, r, t) => {
        "use strict";
        e.exports = t.p + "d544af9224c958eb7ac2.a";
      },
      2762: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8fcf3370ff66ca937936.a";
      },
      9777: (e, r, t) => {
        "use strict";
        e.exports = t.p + "16b6b2bb3ff9246a4c5d.a";
      },
      8804: (e, r, t) => {
        "use strict";
        e.exports = t.p + "65502b6412f21c86f425.a";
      },
      9868: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5cca7d24838f53227177.a";
      },
      5693: (e, r, t) => {
        "use strict";
        e.exports = t.p + "fc7443fdff9e56254cce.a";
      },
      3794: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8cb0ec04369d2ee7bc3b.a";
      },
      2090: (e, r, t) => {
        "use strict";
        e.exports = t.p + "acebf0ab9836a0b4a201.a";
      },
      7410: (e, r, t) => {
        "use strict";
        e.exports = t.p + "35a8f83fa8bc298ddc74.a";
      },
      1920: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c5969658c8b5e2b977f3.a";
      },
      7058: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6ac72f2188527970f306.a";
      },
      9153: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ad713bb2412d55a7db10.a";
      },
      5933: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3a35f810e081e867bbf8.a";
      },
      1780: (e, r, t) => {
        "use strict";
        e.exports = t.p + "487545a1523c0d7964d3.a";
      },
      3544: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e7e6cb2d1231d9f29258.a";
      },
      7305: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8fb392152570da7be1d8.a";
      },
      3831: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1838b3fb9127b0660165.a";
      },
      1699: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9fdbf3f28c9b4f3006c4.a";
      },
      9056: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ef61b23df7b55f389e11.a";
      },
      9414: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1631613159e86cd28b93.a";
      },
      7983: (e, r, t) => {
        "use strict";
        e.exports = t.p + "02a1e1da31f4dbcf92cf.a";
      },
      2663: (e, r, t) => {
        "use strict";
        e.exports = t.p + "2bea33b61adc4a8cbc37.a";
      },
      1940: (e, r, t) => {
        "use strict";
        e.exports = t.p + "26ba662bc6c482081c5e.a";
      },
      7078: (e, r, t) => {
        "use strict";
        e.exports = t.p + "545e06e36d3971f5faa4.a";
      },
      7007: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4f64a0de2e33a9d52e57.a";
      },
      4796: (e, r, t) => {
        "use strict";
        e.exports = t.p + "7b445e27b2b77addb603.a";
      },
      635: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9350f3b1d574a5e06b54.a";
      },
      9805: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8a1f2ccb58c5bb56f414.a";
      },
      8089: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6818cdd8528ffab26047.a";
      },
      9739: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f0ec64bab345fb342d61.a";
      },
      159: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9ea9109e04562ba620dc.a";
      },
      3803: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6565fc792637f066f701.a";
      },
      1653: (e, r, t) => {
        "use strict";
        e.exports = t.p + "52dc1ff339b26793349a.a";
      },
      7946: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6bb136019ea3f3f2534f.a";
      },
      6814: (e, r, t) => {
        "use strict";
        e.exports = t.p + "10f4ef39e073ebb81fc4.a";
      },
      8841: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8c2b21b1370943fce840.a";
      },
      8437: (e, r, t) => {
        "use strict";
        e.exports = t.p + "526fdf5d41f613e9918f.a";
      },
      1155: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8022d574f96fed799232.a";
      },
      2989: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ab973d2baad62524c42a.a";
      },
      5552: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5fee2eca5cafb9d8ab1b.a";
      },
      698: (e, r, t) => {
        "use strict";
        e.exports = t.p + "cd2b4d8bfcd766e4197f.a";
      },
      7190: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8b345c86db298e9ae423.a";
      },
      4756: (e, r, t) => {
        "use strict";
        e.exports = t.p + "d0aafd030289257fd078.a";
      },
      7421: (e, r, t) => {
        "use strict";
        e.exports = t.p + "d07d07d3f2cae1667a40.a";
      },
      1558: (e, r, t) => {
        "use strict";
        e.exports = t.p + "88b9893df42e6f9bbbff.a";
      },
      8252: (e, r, t) => {
        "use strict";
        e.exports = t.p + "109b42bf81b4a80cb6e4.a";
      },
      9398: (e, r, t) => {
        "use strict";
        e.exports = t.p + "04de61a8a0f85ee15beb.a";
      },
      4779: (e, r, t) => {
        "use strict";
        e.exports = t.p + "764045a8ce5284c73e70.a";
      },
      1555: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c1f13c7e7bf8dd4114ec.a";
      },
      1280: (e, r, t) => {
        "use strict";
        e.exports = t.p + "02ab3a78139e912813bf.a";
      },
      1998: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f59f066c9e02c6306c1c.a";
      },
      4806: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4c353481d4a4d217faf3.a";
      },
      4293: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3b08edf93ac01bdfbd8c.a";
      },
      1751: (e, r, t) => {
        "use strict";
        e.exports = t.p + "878c1f5028be0e7b9363.a";
      },
      4251: (e, r, t) => {
        "use strict";
        e.exports = t.p + "5de9254458072f582a9c.a";
      },
      1096: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4e5503d753fc3f5d236f.a";
      },
      2326: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b20b7276388fba49edf1.a";
      },
      9002: (e, r, t) => {
        "use strict";
        e.exports = t.p + "75abf635041a549569b8.a";
      },
      9982: (e, r, t) => {
        "use strict";
        e.exports = t.p + "842128646422958a8aa0.a";
      },
      1414: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e1aad3f6208dad036a33.a";
      },
      6307: (e, r, t) => {
        "use strict";
        e.exports = t.p + "94c22103400127179679.a";
      },
      3697: (e, r, t) => {
        "use strict";
        e.exports = t.p + "0e8d0fbb3e449a5365ea.a";
      },
      4786: (e, r, t) => {
        "use strict";
        e.exports = t.p + "7fdc5c4e0d0c20909779.a";
      },
      9748: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b537202751ac156ce052.a";
      },
      3184: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ee4be49f22de1cea178a.a";
      },
      5046: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c5cf3f08c9f3eb35301a.a";
      },
      691: (e, r, t) => {
        "use strict";
        e.exports = t.p + "aeb70566eaadb2362cf4.a";
      },
      491: (e, r, t) => {
        "use strict";
        e.exports = t.p + "03604c08ed6fa76168fe.a";
      },
      8984: (e, r, t) => {
        "use strict";
        e.exports = t.p + "68a84a9f1afc575af7fa.a";
      },
      4820: (e, r, t) => {
        "use strict";
        e.exports = t.p + "cc494ac7d9a625b07b1b.a";
      },
      3808: (e, r, t) => {
        "use strict";
        e.exports = t.p + "bce8059434f142d51825.a";
      },
      8981: (e, r, t) => {
        "use strict";
        e.exports = t.p + "a3897fd7df5d1fe53b18.a";
      },
      5441: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f173f94bdafe7867c381.a";
      },
      7938: (e, r, t) => {
        "use strict";
        e.exports = t.p + "b46e382623b285217b2c.a";
      },
      4229: (e, r, t) => {
        "use strict";
        e.exports = t.p + "a3e7a5ca29f190121182.a";
      },
      7050: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8935d5839308320a333e.a";
      },
      6722: (e, r, t) => {
        "use strict";
        e.exports = t.p + "09d11aef1b4454a8e60d.a";
      },
      2778: (e, r, t) => {
        "use strict";
        e.exports = t.p + "cdecb3abae4373e4d303.a";
      },
      3476: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ac41c398c49667748a17.a";
      },
      7022: (e, r, t) => {
        "use strict";
        e.exports = t.p + "921a6ac9f018f2f3e7b3.a";
      },
      1997: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e65296472ca08bb92858.a";
      },
      8277: (e, r, t) => {
        "use strict";
        e.exports = t.p + "6be3d258342b5b03c75e.a";
      },
      4080: (e, r, t) => {
        "use strict";
        e.exports = t.p + "0030c207ed64a7bf27e6.a";
      },
      6093: (e, r, t) => {
        "use strict";
        e.exports = t.p + "26e791689c03ae435b25.a";
      },
      7301: (e, r, t) => {
        "use strict";
        e.exports = t.p + "783b057899f333b0261a.a";
      },
      8114: (e, r, t) => {
        "use strict";
        e.exports = t.p + "acd57fcd0078e86b624f.a";
      },
      9629: (e, r, t) => {
        "use strict";
        e.exports = t.p + "615ffa5917f56000b53c.a";
      },
      8440: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e3ea30e0937417a56260.a";
      },
      4282: (e, r, t) => {
        "use strict";
        e.exports = t.p + "ace2f4d2f26710ccafae.a";
      },
      98: (e, r, t) => {
        "use strict";
        e.exports = t.p + "0da73d2b972ffcc2ec92.a";
      },
      3903: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e7529b3cc5e39c21383a.a";
      },
      4859: (e, r, t) => {
        "use strict";
        e.exports = t.p + "a889be9f26be507689ca.a";
      },
      5898: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9c9f534949497090d21c.a";
      },
      260: (e, r, t) => {
        "use strict";
        e.exports = t.p + "4ab268f1951794185d45.a";
      },
      1083: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e49fe87ee1cb0af5c592.a";
      },
      481: (e, r, t) => {
        "use strict";
        e.exports = t.p + "560b686e438e69459e43.a";
      },
      1426: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f676d308226db6473e81.a";
      },
      7488: (e, r, t) => {
        "use strict";
        e.exports = t.p + "2a1452c949443bb9610b.a";
      },
      8068: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c7d99977a96a08063adb.a";
      },
      6848: (e, r, t) => {
        "use strict";
        e.exports = t.p + "80e8be53df562faaf13f.a";
      },
      9899: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1e27090d617d5c6ec383.a";
      },
      9375: (e, r, t) => {
        "use strict";
        e.exports = t.p + "d66750e1cc984ebd7ef8.a";
      },
      3361: (e, r, t) => {
        "use strict";
        e.exports = t.p + "469e91eedfad1eb4a1b7.a";
      },
      4061: (e, r, t) => {
        "use strict";
        e.exports = t.p + "30572c3f480097d41f17.a";
      },
      0: (e, r, t) => {
        "use strict";
        e.exports = t.p + "65483916311c903881d2.a";
      },
      5134: (e, r, t) => {
        "use strict";
        e.exports = t.p + "44d6e1159bbeb361b0e4.a";
      },
      2900: (e, r, t) => {
        "use strict";
        e.exports = t.p + "71089b287747d3fea34e.a";
      },
      8934: (e, r, t) => {
        "use strict";
        e.exports = t.p + "76675e5bd5a2a60a5283.a";
      },
      316: (e, r, t) => {
        "use strict";
        e.exports = t.p + "fba10914ebd608ba08b7.a";
      },
      6835: (e, r, t) => {
        "use strict";
        e.exports = t.p + "8255d5388ffc5c5fa04e.a";
      },
      9709: (e, r, t) => {
        "use strict";
        e.exports = t.p + "c8333aadb718cb785b9f.a";
      },
      6989: (e, r, t) => {
        "use strict";
        e.exports = t.p + "da352a2e4b1a38aed21a.a";
      },
      8475: (e, r, t) => {
        "use strict";
        e.exports = t.p + "424ba3d99b75ea62787c.a";
      },
      7493: (e, r, t) => {
        "use strict";
        e.exports = t.p + "48c93ac5822c3960ba2b.a";
      },
      9798: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3e3d564148bf6b2d1b0d.a";
      },
      3538: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e6bcedba8c951c670fa8.a";
      },
      7012: (e, r, t) => {
        "use strict";
        e.exports = t.p + "08d4c0c2c1409cda97e5.a";
      },
      2971: (e, r, t) => {
        "use strict";
        e.exports = t.p + "1bef303e2e82c1268454.a";
      },
      6500: (e, r, t) => {
        "use strict";
        e.exports = t.p + "788412dcc1e37edc5ac3.a";
      },
      4086: (e, r, t) => {
        "use strict";
        e.exports = t.p + "e10a86fe8e23905fd8d8.a";
      },
      2323: (e, r, t) => {
        "use strict";
        e.exports = t.p + "f0f311988cbb0f5ddb56.a";
      },
      6973: (e, r, t) => {
        "use strict";
        e.exports = t.p + "3752854faba466b0ad3c.a";
      },
      9871: (e, r, t) => {
        "use strict";
        e.exports = t.p + "089e41a761e53a1235b3.a";
      },
      3237: (e, r, t) => {
        "use strict";
        e.exports = t.p + "afde9c24a034f8ce4be8.a";
      },
      6982: (e, r, t) => {
        "use strict";
        e.exports = t.p + "314b38ebc146fad796c8.a";
      },
      4401: (e, r, t) => {
        "use strict";
        e.exports = t.p + "be984663ae1e68cf1d8e.a";
      },
      4790: (e, r, t) => {
        "use strict";
        e.exports = t.p + "cecdfcda360457a8f204.br";
      },
      3810: (e, r, t) => {
        "use strict";
        e.exports = t.p + "9d1e542b80004e27297f.wasm";
      },
      9025: (e) => {
        e.exports = "data:,";
      },
      6361: (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
          Z: () => __WEBPACK_DEFAULT_EXPORT__,
        });
        var Module = (() => {
          var _scriptDir =
            "file:///home/jprendes/Projects/emception/build/emception/binaryen/binaryen-box.mjs";
          return function (Module) {
            Module = Module || {};
            var Module = void 0 !== Module ? Module : {},
              readyPromiseResolve,
              readyPromiseReject;
            Module.ready = new Promise(function (e, r) {
              (readyPromiseResolve = e), (readyPromiseReject = r);
            });
            var moduleOverrides = Object.assign({}, Module),
              arguments_ = [],
              thisProgram = "./this.program",
              quit_ = (e, r) => {
                throw r;
              },
              ENVIRONMENT_IS_WEB = "object" == typeof window,
              ENVIRONMENT_IS_WORKER = "function" == typeof importScripts,
              ENVIRONMENT_IS_NODE =
                "object" == typeof process &&
                "object" == typeof process.versions &&
                "string" == typeof process.versions.node,
              scriptDirectory = "",
              read_,
              readAsync,
              readBinary,
              setWindowTitle,
              fs,
              nodePath;
            function locateFile(e) {
              return Module.locateFile
                ? Module.locateFile(e, scriptDirectory)
                : scriptDirectory + e;
            }
            function logExceptionOnExit(e) {
              e instanceof ExitStatus || err("exiting due to exception: " + e);
            }
            ENVIRONMENT_IS_NODE
              ? ((scriptDirectory = ENVIRONMENT_IS_WORKER
                  ? require("path").dirname(scriptDirectory) + "/"
                  : __dirname + "/"),
                "function" == typeof require &&
                  ((fs = require("fs")), (nodePath = require("path"))),
                (read_ = (e, r) => (
                  (e = nodePath.normalize(e)),
                  fs.readFileSync(e, r ? void 0 : "utf8")
                )),
                (readBinary = (e) => {
                  var r = read_(e, !0);
                  return r.buffer || (r = new Uint8Array(r)), r;
                }),
                (readAsync = (e, r, t) => {
                  (e = nodePath.normalize(e)),
                    fs.readFile(e, function (e, n) {
                      e ? t(e) : r(n.buffer);
                    });
                }),
                process.argv.length > 1 &&
                  (thisProgram = process.argv[1].replace(/\\/g, "/")),
                (arguments_ = process.argv.slice(2)),
                process.on("uncaughtException", function (e) {
                  if (!(e instanceof ExitStatus)) throw e;
                }),
                process.on("unhandledRejection", function (e) {
                  throw e;
                }),
                (quit_ = (e, r) => {
                  if (keepRuntimeAlive()) throw ((process.exitCode = e), r);
                  logExceptionOnExit(r), process.exit(e);
                }),
                (Module.inspect = function () {
                  return "[Emscripten Module object]";
                }))
              : (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) &&
                (ENVIRONMENT_IS_WORKER
                  ? (scriptDirectory = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (scriptDirectory = document.currentScript.src),
                _scriptDir && (scriptDirectory = _scriptDir),
                (scriptDirectory =
                  0 !== scriptDirectory.indexOf("blob:")
                    ? scriptDirectory.substr(
                        0,
                        scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") +
                          1
                      )
                    : ""),
                (read_ = (e) => {
                  var r = new XMLHttpRequest();
                  return r.open("GET", e, !1), r.send(null), r.responseText;
                }),
                ENVIRONMENT_IS_WORKER &&
                  (readBinary = (e) => {
                    var r = new XMLHttpRequest();
                    return (
                      r.open("GET", e, !1),
                      (r.responseType = "arraybuffer"),
                      r.send(null),
                      new Uint8Array(r.response)
                    );
                  }),
                (readAsync = (e, r, t) => {
                  var n = new XMLHttpRequest();
                  n.open("GET", e, !0),
                    (n.responseType = "arraybuffer"),
                    (n.onload = () => {
                      200 == n.status || (0 == n.status && n.response)
                        ? r(n.response)
                        : t();
                    }),
                    (n.onerror = t),
                    n.send(null);
                }),
                (setWindowTitle = (e) => (document.title = e)));
            var out = Module.print || console.log.bind(console),
              err = Module.printErr || console.warn.bind(console),
              wasmBinary;
            Object.assign(Module, moduleOverrides),
              (moduleOverrides = null),
              Module.arguments && (arguments_ = Module.arguments),
              Module.thisProgram && (thisProgram = Module.thisProgram),
              Module.quit && (quit_ = Module.quit),
              Module.wasmBinary && (wasmBinary = Module.wasmBinary);
            var noExitRuntime = Module.noExitRuntime || !0,
              wasmMemory;
            "object" != typeof WebAssembly &&
              abort("no native wasm support detected");
            var ABORT = !1,
              EXITSTATUS;
            function assert(e, r) {
              e || abort(r);
            }
            var UTF8Decoder =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0,
              buffer,
              HEAP8,
              HEAPU8,
              HEAP16,
              HEAPU16,
              HEAP32,
              HEAPU32,
              HEAPF32,
              HEAPF64;
            function UTF8ArrayToString(e, r, t) {
              for (var n = r + t, o = r; e[o] && !(o >= n); ) ++o;
              if (o - r > 16 && e.buffer && UTF8Decoder)
                return UTF8Decoder.decode(e.subarray(r, o));
              for (var a = ""; r < o; ) {
                var i = e[r++];
                if (128 & i) {
                  var s = 63 & e[r++];
                  if (192 != (224 & i)) {
                    var c = 63 & e[r++];
                    if (
                      (i =
                        224 == (240 & i)
                          ? ((15 & i) << 12) | (s << 6) | c
                          : ((7 & i) << 18) |
                            (s << 12) |
                            (c << 6) |
                            (63 & e[r++])) < 65536
                    )
                      a += String.fromCharCode(i);
                    else {
                      var u = i - 65536;
                      a += String.fromCharCode(
                        55296 | (u >> 10),
                        56320 | (1023 & u)
                      );
                    }
                  } else a += String.fromCharCode(((31 & i) << 6) | s);
                } else a += String.fromCharCode(i);
              }
              return a;
            }
            function UTF8ToString(e, r) {
              return e ? UTF8ArrayToString(HEAPU8, e, r) : "";
            }
            function stringToUTF8Array(e, r, t, n) {
              if (!(n > 0)) return 0;
              for (var o = t, a = t + n - 1, i = 0; i < e.length; ++i) {
                var s = e.charCodeAt(i);
                if (
                  (s >= 55296 &&
                    s <= 57343 &&
                    (s =
                      (65536 + ((1023 & s) << 10)) |
                      (1023 & e.charCodeAt(++i))),
                  s <= 127)
                ) {
                  if (t >= a) break;
                  r[t++] = s;
                } else if (s <= 2047) {
                  if (t + 1 >= a) break;
                  (r[t++] = 192 | (s >> 6)), (r[t++] = 128 | (63 & s));
                } else if (s <= 65535) {
                  if (t + 2 >= a) break;
                  (r[t++] = 224 | (s >> 12)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                } else {
                  if (t + 3 >= a) break;
                  (r[t++] = 240 | (s >> 18)),
                    (r[t++] = 128 | ((s >> 12) & 63)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                }
              }
              return (r[t] = 0), t - o;
            }
            function lengthBytesUTF8(e) {
              for (var r = 0, t = 0; t < e.length; ++t) {
                var n = e.charCodeAt(t);
                n <= 127
                  ? r++
                  : n <= 2047
                  ? (r += 2)
                  : n >= 55296 && n <= 57343
                  ? ((r += 4), ++t)
                  : (r += 3);
              }
              return r;
            }
            function updateGlobalBufferAndViews(e) {
              (buffer = e),
                (Module.HEAP8 = HEAP8 = new Int8Array(e)),
                (Module.HEAP16 = HEAP16 = new Int16Array(e)),
                (Module.HEAP32 = HEAP32 = new Int32Array(e)),
                (Module.HEAPU8 = HEAPU8 = new Uint8Array(e)),
                (Module.HEAPU16 = HEAPU16 = new Uint16Array(e)),
                (Module.HEAPU32 = HEAPU32 = new Uint32Array(e)),
                (Module.HEAPF32 = HEAPF32 = new Float32Array(e)),
                (Module.HEAPF64 = HEAPF64 = new Float64Array(e));
            }
            var INITIAL_MEMORY = Module.INITIAL_MEMORY || 16777216,
              wasmTable,
              __ATPRERUN__ = [],
              __ATINIT__ = [],
              __ATMAIN__ = [],
              __ATPOSTRUN__ = [],
              runtimeInitialized = !1;
            function keepRuntimeAlive() {
              return noExitRuntime;
            }
            function preRun() {
              if (Module.preRun)
                for (
                  "function" == typeof Module.preRun &&
                  (Module.preRun = [Module.preRun]);
                  Module.preRun.length;

                )
                  addOnPreRun(Module.preRun.shift());
              callRuntimeCallbacks(__ATPRERUN__);
            }
            function initRuntime() {
              (runtimeInitialized = !0),
                Module.noFSInit || FS.init.initialized || FS.init(),
                (FS.ignorePermissions = !1),
                TTY.init(),
                callRuntimeCallbacks(__ATINIT__);
            }
            function preMain() {
              callRuntimeCallbacks(__ATMAIN__);
            }
            function postRun() {
              if (Module.postRun)
                for (
                  "function" == typeof Module.postRun &&
                  (Module.postRun = [Module.postRun]);
                  Module.postRun.length;

                )
                  addOnPostRun(Module.postRun.shift());
              callRuntimeCallbacks(__ATPOSTRUN__);
            }
            function addOnPreRun(e) {
              __ATPRERUN__.unshift(e);
            }
            function addOnInit(e) {
              __ATINIT__.unshift(e);
            }
            function addOnPostRun(e) {
              __ATPOSTRUN__.unshift(e);
            }
            var runDependencies = 0,
              runDependencyWatcher = null,
              dependenciesFulfilled = null;
            function getUniqueRunDependency(e) {
              return e;
            }
            function addRunDependency(e) {
              runDependencies++,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies);
            }
            function removeRunDependency(e) {
              if (
                (runDependencies--,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies),
                0 == runDependencies &&
                  (null !== runDependencyWatcher &&
                    (clearInterval(runDependencyWatcher),
                    (runDependencyWatcher = null)),
                  dependenciesFulfilled))
              ) {
                var r = dependenciesFulfilled;
                (dependenciesFulfilled = null), r();
              }
            }
            function abort(e) {
              Module.onAbort && Module.onAbort(e),
                err((e = "Aborted(" + e + ")")),
                (ABORT = !0),
                (EXITSTATUS = 1),
                (e += ". Build with -sASSERTIONS for more info.");
              var r = new WebAssembly.RuntimeError(e);
              throw (readyPromiseReject(r), r);
            }
            var dataURIPrefix = "data:application/octet-stream;base64,",
              wasmBinaryFile,
              tempDouble,
              tempI64;
            function isDataURI(e) {
              return e.startsWith(dataURIPrefix);
            }
            function isFileURI(e) {
              return e.startsWith("file://");
            }
            function getBinary(e) {
              try {
                if (e == wasmBinaryFile && wasmBinary)
                  return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(e);
                throw "both async and sync fetching of the wasm failed";
              } catch (e) {
                abort(e);
              }
            }
            function getBinaryPromise() {
              if (
                !wasmBinary &&
                (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)
              ) {
                if ("function" == typeof fetch && !isFileURI(wasmBinaryFile))
                  return fetch(wasmBinaryFile, { credentials: "same-origin" })
                    .then(function (e) {
                      if (!e.ok)
                        throw (
                          "failed to load wasm binary file at '" +
                          wasmBinaryFile +
                          "'"
                        );
                      return e.arrayBuffer();
                    })
                    .catch(function () {
                      return getBinary(wasmBinaryFile);
                    });
                if (readAsync)
                  return new Promise(function (e, r) {
                    readAsync(
                      wasmBinaryFile,
                      function (r) {
                        e(new Uint8Array(r));
                      },
                      r
                    );
                  });
              }
              return Promise.resolve().then(function () {
                return getBinary(wasmBinaryFile);
              });
            }
            function createWasm() {
              var e = { a: asmLibraryArg };
              function r(e, r) {
                var t = e.exports;
                (Module.asm = t),
                  updateGlobalBufferAndViews(
                    (wasmMemory = Module.asm.Fa).buffer
                  ),
                  (wasmTable = Module.asm.Ja),
                  addOnInit(Module.asm.Ga),
                  removeRunDependency("wasm-instantiate");
              }
              function t(e) {
                r(e.instance);
              }
              function n(r) {
                return getBinaryPromise()
                  .then(function (r) {
                    return WebAssembly.instantiate(r, e);
                  })
                  .then(function (e) {
                    return e;
                  })
                  .then(r, function (e) {
                    err("failed to asynchronously prepare wasm: " + e),
                      abort(e);
                  });
              }
              if (
                (addRunDependency("wasm-instantiate"), Module.instantiateWasm)
              )
                try {
                  return Module.instantiateWasm(e, r);
                } catch (e) {
                  err(
                    "Module.instantiateWasm callback failed with error: " + e
                  ),
                    readyPromiseReject(e);
                }
              return (
                (wasmBinary ||
                "function" != typeof WebAssembly.instantiateStreaming ||
                isDataURI(wasmBinaryFile) ||
                isFileURI(wasmBinaryFile) ||
                ENVIRONMENT_IS_NODE ||
                "function" != typeof fetch
                  ? n(t)
                  : fetch(wasmBinaryFile, { credentials: "same-origin" }).then(
                      function (r) {
                        return WebAssembly.instantiateStreaming(r, e).then(
                          t,
                          function (e) {
                            return (
                              err("wasm streaming compile failed: " + e),
                              err("falling back to ArrayBuffer instantiation"),
                              n(t)
                            );
                          }
                        );
                      }
                    )
                ).catch(readyPromiseReject),
                {}
              );
            }
            function ExitStatus(e) {
              (this.name = "ExitStatus"),
                (this.message = "Program terminated with exit(" + e + ")"),
                (this.status = e);
            }
            function callRuntimeCallbacks(e) {
              for (; e.length > 0; ) e.shift()(Module);
            }
            function ___assert_fail(e, r, t, n) {
              abort(
                "Assertion failed: " +
                  UTF8ToString(e) +
                  ", at: " +
                  [
                    r ? UTF8ToString(r) : "unknown filename",
                    t,
                    n ? UTF8ToString(n) : "unknown function",
                  ]
              );
            }
            function ___cxa_allocate_exception(e) {
              return _malloc(e + 24) + 24;
            }
            Module.locateFile
              ? ((wasmBinaryFile = "binaryen-box.wasm"),
                isDataURI(wasmBinaryFile) ||
                  (wasmBinaryFile = locateFile(wasmBinaryFile)))
              : (wasmBinaryFile = new URL(
                  __webpack_require__(9025),
                  __webpack_require__.b
                ).toString());
            var exceptionCaught = [];
            function exception_addRef(e) {
              e.add_ref();
            }
            var uncaughtExceptionCount = 0;
            function ___cxa_begin_catch(e) {
              var r = new ExceptionInfo(e);
              return (
                r.get_caught() || (r.set_caught(!0), uncaughtExceptionCount--),
                r.set_rethrown(!1),
                exceptionCaught.push(r),
                exception_addRef(r),
                r.get_exception_ptr()
              );
            }
            function ___cxa_call_unexpected(e) {
              throw (
                (err(
                  "Unexpected exception thrown, this is not properly supported - aborting"
                ),
                (ABORT = !0),
                e)
              );
            }
            var exceptionLast = 0;
            function ExceptionInfo(e) {
              (this.excPtr = e),
                (this.ptr = e - 24),
                (this.set_type = function (e) {
                  HEAPU32[(this.ptr + 4) >> 2] = e;
                }),
                (this.get_type = function () {
                  return HEAPU32[(this.ptr + 4) >> 2];
                }),
                (this.set_destructor = function (e) {
                  HEAPU32[(this.ptr + 8) >> 2] = e;
                }),
                (this.get_destructor = function () {
                  return HEAPU32[(this.ptr + 8) >> 2];
                }),
                (this.set_refcount = function (e) {
                  HEAP32[this.ptr >> 2] = e;
                }),
                (this.set_caught = function (e) {
                  (e = e ? 1 : 0), (HEAP8[(this.ptr + 12) >> 0] = e);
                }),
                (this.get_caught = function () {
                  return 0 != HEAP8[(this.ptr + 12) >> 0];
                }),
                (this.set_rethrown = function (e) {
                  (e = e ? 1 : 0), (HEAP8[(this.ptr + 13) >> 0] = e);
                }),
                (this.get_rethrown = function () {
                  return 0 != HEAP8[(this.ptr + 13) >> 0];
                }),
                (this.init = function (e, r) {
                  this.set_adjusted_ptr(0),
                    this.set_type(e),
                    this.set_destructor(r),
                    this.set_refcount(0),
                    this.set_caught(!1),
                    this.set_rethrown(!1);
                }),
                (this.add_ref = function () {
                  var e = HEAP32[this.ptr >> 2];
                  HEAP32[this.ptr >> 2] = e + 1;
                }),
                (this.release_ref = function () {
                  var e = HEAP32[this.ptr >> 2];
                  return (HEAP32[this.ptr >> 2] = e - 1), 1 === e;
                }),
                (this.set_adjusted_ptr = function (e) {
                  HEAPU32[(this.ptr + 16) >> 2] = e;
                }),
                (this.get_adjusted_ptr = function () {
                  return HEAPU32[(this.ptr + 16) >> 2];
                }),
                (this.get_exception_ptr = function () {
                  if (___cxa_is_pointer_type(this.get_type()))
                    return HEAPU32[this.excPtr >> 2];
                  var e = this.get_adjusted_ptr();
                  return 0 !== e ? e : this.excPtr;
                });
            }
            function ___cxa_free_exception(e) {
              return _free(new ExceptionInfo(e).ptr);
            }
            var wasmTableMirror = [];
            function getWasmTableEntry(e) {
              var r = wasmTableMirror[e];
              return (
                r ||
                  (e >= wasmTableMirror.length &&
                    (wasmTableMirror.length = e + 1),
                  (wasmTableMirror[e] = r = wasmTable.get(e))),
                r
              );
            }
            function exception_decRef(e) {
              if (e.release_ref() && !e.get_rethrown()) {
                var r = e.get_destructor();
                r && getWasmTableEntry(r)(e.excPtr),
                  ___cxa_free_exception(e.excPtr);
              }
            }
            function ___cxa_end_catch() {
              _setThrew(0),
                exception_decRef(exceptionCaught.pop()),
                (exceptionLast = 0);
            }
            function ___resumeException(e) {
              throw (exceptionLast || (exceptionLast = e), e);
            }
            function ___cxa_find_matching_catch_2() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_find_matching_catch_3() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_find_matching_catch_4() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_find_matching_catch_5() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_rethrow() {
              var e = exceptionCaught.pop();
              e || abort("no exception to throw");
              var r = e.excPtr;
              throw (
                (e.get_rethrown() ||
                  (exceptionCaught.push(e),
                  e.set_rethrown(!0),
                  e.set_caught(!1),
                  uncaughtExceptionCount++),
                (exceptionLast = r),
                r)
              );
            }
            function ___cxa_throw(e, r, t) {
              throw (
                (new ExceptionInfo(e).init(r, t),
                (exceptionLast = e),
                uncaughtExceptionCount++,
                e)
              );
            }
            function ___cxa_uncaught_exceptions() {
              return uncaughtExceptionCount;
            }
            function setErrNo(e) {
              return (HEAP32[___errno_location() >> 2] = e), e;
            }
            var PATH = {
              isAbs: (e) => "/" === e.charAt(0),
              splitPath: (e) =>
                /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                  .exec(e)
                  .slice(1),
              normalizeArray: (e, r) => {
                for (var t = 0, n = e.length - 1; n >= 0; n--) {
                  var o = e[n];
                  "." === o
                    ? e.splice(n, 1)
                    : ".." === o
                    ? (e.splice(n, 1), t++)
                    : t && (e.splice(n, 1), t--);
                }
                if (r) for (; t; t--) e.unshift("..");
                return e;
              },
              normalize: (e) => {
                var r = PATH.isAbs(e),
                  t = "/" === e.substr(-1);
                return (
                  (e = PATH.normalizeArray(
                    e.split("/").filter((e) => !!e),
                    !r
                  ).join("/")) ||
                    r ||
                    (e = "."),
                  e && t && (e += "/"),
                  (r ? "/" : "") + e
                );
              },
              dirname: (e) => {
                var r = PATH.splitPath(e),
                  t = r[0],
                  n = r[1];
                return t || n
                  ? (n && (n = n.substr(0, n.length - 1)), t + n)
                  : ".";
              },
              basename: (e) => {
                if ("/" === e) return "/";
                var r = (e = (e = PATH.normalize(e)).replace(
                  /\/$/,
                  ""
                )).lastIndexOf("/");
                return -1 === r ? e : e.substr(r + 1);
              },
              join: function () {
                var e = Array.prototype.slice.call(arguments);
                return PATH.normalize(e.join("/"));
              },
              join2: (e, r) => PATH.normalize(e + "/" + r),
            };
            function getRandomDevice() {
              if (
                "object" == typeof crypto &&
                "function" == typeof crypto.getRandomValues
              ) {
                var e = new Uint8Array(1);
                return () => (crypto.getRandomValues(e), e[0]);
              }
              if (ENVIRONMENT_IS_NODE)
                try {
                  var r = require("crypto");
                  return () => r.randomBytes(1)[0];
                } catch (e) {}
              return () => abort("randomDevice");
            }
            var PATH_FS = {
              resolve: function () {
                for (
                  var e = "", r = !1, t = arguments.length - 1;
                  t >= -1 && !r;
                  t--
                ) {
                  var n = t >= 0 ? arguments[t] : FS.cwd();
                  if ("string" != typeof n)
                    throw new TypeError(
                      "Arguments to path.resolve must be strings"
                    );
                  if (!n) return "";
                  (e = n + "/" + e), (r = PATH.isAbs(n));
                }
                return (
                  (r ? "/" : "") +
                    (e = PATH.normalizeArray(
                      e.split("/").filter((e) => !!e),
                      !r
                    ).join("/")) || "."
                );
              },
              relative: (e, r) => {
                function t(e) {
                  for (var r = 0; r < e.length && "" === e[r]; r++);
                  for (var t = e.length - 1; t >= 0 && "" === e[t]; t--);
                  return r > t ? [] : e.slice(r, t - r + 1);
                }
                (e = PATH_FS.resolve(e).substr(1)),
                  (r = PATH_FS.resolve(r).substr(1));
                for (
                  var n = t(e.split("/")),
                    o = t(r.split("/")),
                    a = Math.min(n.length, o.length),
                    i = a,
                    s = 0;
                  s < a;
                  s++
                )
                  if (n[s] !== o[s]) {
                    i = s;
                    break;
                  }
                var c = [];
                for (s = i; s < n.length; s++) c.push("..");
                return (c = c.concat(o.slice(i))).join("/");
              },
            };
            function intArrayFromString(e, r, t) {
              var n = t > 0 ? t : lengthBytesUTF8(e) + 1,
                o = new Array(n),
                a = stringToUTF8Array(e, o, 0, o.length);
              return r && (o.length = a), o;
            }
            var TTY = {
              ttys: [],
              init: function () {},
              shutdown: function () {},
              register: function (e, r) {
                (TTY.ttys[e] = { input: [], output: [], ops: r }),
                  FS.registerDevice(e, TTY.stream_ops);
              },
              stream_ops: {
                open: function (e) {
                  var r = TTY.ttys[e.node.rdev];
                  if (!r) throw new FS.ErrnoError(43);
                  (e.tty = r), (e.seekable = !1);
                },
                close: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                fsync: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                read: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.get_char)
                    throw new FS.ErrnoError(60);
                  for (var a = 0, i = 0; i < n; i++) {
                    var s;
                    try {
                      s = e.tty.ops.get_char(e.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (void 0 === s && 0 === a) throw new FS.ErrnoError(6);
                    if (null == s) break;
                    a++, (r[t + i] = s);
                  }
                  return a && (e.node.timestamp = Date.now()), a;
                },
                write: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.put_char)
                    throw new FS.ErrnoError(60);
                  try {
                    for (var a = 0; a < n; a++)
                      e.tty.ops.put_char(e.tty, r[t + a]);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  return n && (e.node.timestamp = Date.now()), a;
                },
              },
              default_tty_ops: {
                get_char: function (e) {
                  if (!e.input.length) {
                    var r = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var t = Buffer.alloc(256),
                        n = 0;
                      try {
                        n = fs.readSync(process.stdin.fd, t, 0, 256, -1);
                      } catch (e) {
                        if (!e.toString().includes("EOF")) throw e;
                        n = 0;
                      }
                      r = n > 0 ? t.slice(0, n).toString("utf-8") : null;
                    } else
                      "undefined" != typeof window &&
                      "function" == typeof window.prompt
                        ? null !== (r = window.prompt("Input: ")) && (r += "\n")
                        : "function" == typeof readline &&
                          null !== (r = readline()) &&
                          (r += "\n");
                    if (!r) return null;
                    e.input = intArrayFromString(r, !0);
                  }
                  return e.input.shift();
                },
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (out(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (out(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
              default_tty1_ops: {
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (err(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (err(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
            };
            function mmapAlloc(e) {
              abort();
            }
            var MEMFS = {
              ops_table: null,
              mount: function (e) {
                return MEMFS.createNode(null, "/", 16895, 0);
              },
              createNode: function (e, r, t, n) {
                if (FS.isBlkdev(t) || FS.isFIFO(t)) throw new FS.ErrnoError(63);
                MEMFS.ops_table ||
                  (MEMFS.ops_table = {
                    dir: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink,
                      },
                      stream: { llseek: MEMFS.stream_ops.llseek },
                    },
                    file: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync,
                      },
                    },
                    link: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink,
                      },
                      stream: {},
                    },
                    chrdev: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: FS.chrdev_stream_ops,
                    },
                  });
                var o = FS.createNode(e, r, t, n);
                return (
                  FS.isDir(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.dir.node),
                      (o.stream_ops = MEMFS.ops_table.dir.stream),
                      (o.contents = {}))
                    : FS.isFile(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.file.node),
                      (o.stream_ops = MEMFS.ops_table.file.stream),
                      (o.usedBytes = 0),
                      (o.contents = null))
                    : FS.isLink(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.link.node),
                      (o.stream_ops = MEMFS.ops_table.link.stream))
                    : FS.isChrdev(o.mode) &&
                      ((o.node_ops = MEMFS.ops_table.chrdev.node),
                      (o.stream_ops = MEMFS.ops_table.chrdev.stream)),
                  (o.timestamp = Date.now()),
                  e && ((e.contents[r] = o), (e.timestamp = o.timestamp)),
                  o
                );
              },
              getFileDataAsTypedArray: function (e) {
                return e.contents
                  ? e.contents.subarray
                    ? e.contents.subarray(0, e.usedBytes)
                    : new Uint8Array(e.contents)
                  : new Uint8Array(0);
              },
              expandFileStorage: function (e, r) {
                var t = e.contents ? e.contents.length : 0;
                if (!(t >= r)) {
                  (r = Math.max(r, (t * (t < 1048576 ? 2 : 1.125)) >>> 0)),
                    0 != t && (r = Math.max(r, 256));
                  var n = e.contents;
                  (e.contents = new Uint8Array(r)),
                    e.usedBytes > 0 &&
                      e.contents.set(n.subarray(0, e.usedBytes), 0);
                }
              },
              resizeFileStorage: function (e, r) {
                if (e.usedBytes != r)
                  if (0 == r) (e.contents = null), (e.usedBytes = 0);
                  else {
                    var t = e.contents;
                    (e.contents = new Uint8Array(r)),
                      t &&
                        e.contents.set(t.subarray(0, Math.min(r, e.usedBytes))),
                      (e.usedBytes = r);
                  }
              },
              node_ops: {
                getattr: function (e) {
                  var r = {};
                  return (
                    (r.dev = FS.isChrdev(e.mode) ? e.id : 1),
                    (r.ino = e.id),
                    (r.mode = e.mode),
                    (r.nlink = 1),
                    (r.uid = 0),
                    (r.gid = 0),
                    (r.rdev = e.rdev),
                    FS.isDir(e.mode)
                      ? (r.size = 4096)
                      : FS.isFile(e.mode)
                      ? (r.size = e.usedBytes)
                      : FS.isLink(e.mode)
                      ? (r.size = e.link.length)
                      : (r.size = 0),
                    (r.atime = new Date(e.timestamp)),
                    (r.mtime = new Date(e.timestamp)),
                    (r.ctime = new Date(e.timestamp)),
                    (r.blksize = 4096),
                    (r.blocks = Math.ceil(r.size / r.blksize)),
                    r
                  );
                },
                setattr: function (e, r) {
                  void 0 !== r.mode && (e.mode = r.mode),
                    void 0 !== r.timestamp && (e.timestamp = r.timestamp),
                    void 0 !== r.size && MEMFS.resizeFileStorage(e, r.size);
                },
                lookup: function (e, r) {
                  throw FS.genericErrors[44];
                },
                mknod: function (e, r, t, n) {
                  return MEMFS.createNode(e, r, t, n);
                },
                rename: function (e, r, t) {
                  if (FS.isDir(e.mode)) {
                    var n;
                    try {
                      n = FS.lookupNode(r, t);
                    } catch (e) {}
                    if (n)
                      for (var o in n.contents) throw new FS.ErrnoError(55);
                  }
                  delete e.parent.contents[e.name],
                    (e.parent.timestamp = Date.now()),
                    (e.name = t),
                    (r.contents[t] = e),
                    (r.timestamp = e.parent.timestamp),
                    (e.parent = r);
                },
                unlink: function (e, r) {
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                rmdir: function (e, r) {
                  var t = FS.lookupNode(e, r);
                  for (var n in t.contents) throw new FS.ErrnoError(55);
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                readdir: function (e) {
                  var r = [".", ".."];
                  for (var t in e.contents)
                    e.contents.hasOwnProperty(t) && r.push(t);
                  return r;
                },
                symlink: function (e, r, t) {
                  var n = MEMFS.createNode(e, r, 41471, 0);
                  return (n.link = t), n;
                },
                readlink: function (e) {
                  if (!FS.isLink(e.mode)) throw new FS.ErrnoError(28);
                  return e.link;
                },
              },
              stream_ops: {
                read: function (e, r, t, n, o) {
                  var a = e.node.contents;
                  if (o >= e.node.usedBytes) return 0;
                  var i = Math.min(e.node.usedBytes - o, n);
                  if (i > 8 && a.subarray) r.set(a.subarray(o, o + i), t);
                  else for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                  return i;
                },
                write: function (e, r, t, n, o, a) {
                  if ((r.buffer === HEAP8.buffer && (a = !1), !n)) return 0;
                  var i = e.node;
                  if (
                    ((i.timestamp = Date.now()),
                    r.subarray && (!i.contents || i.contents.subarray))
                  ) {
                    if (a)
                      return (
                        (i.contents = r.subarray(t, t + n)),
                        (i.usedBytes = n),
                        n
                      );
                    if (0 === i.usedBytes && 0 === o)
                      return (
                        (i.contents = r.slice(t, t + n)), (i.usedBytes = n), n
                      );
                    if (o + n <= i.usedBytes)
                      return i.contents.set(r.subarray(t, t + n), o), n;
                  }
                  if (
                    (MEMFS.expandFileStorage(i, o + n),
                    i.contents.subarray && r.subarray)
                  )
                    i.contents.set(r.subarray(t, t + n), o);
                  else for (var s = 0; s < n; s++) i.contents[o + s] = r[t + s];
                  return (i.usedBytes = Math.max(i.usedBytes, o + n)), n;
                },
                llseek: function (e, r, t) {
                  var n = r;
                  if (
                    (1 === t
                      ? (n += e.position)
                      : 2 === t &&
                        FS.isFile(e.node.mode) &&
                        (n += e.node.usedBytes),
                    n < 0)
                  )
                    throw new FS.ErrnoError(28);
                  return n;
                },
                allocate: function (e, r, t) {
                  MEMFS.expandFileStorage(e.node, r + t),
                    (e.node.usedBytes = Math.max(e.node.usedBytes, r + t));
                },
                mmap: function (e, r, t, n, o) {
                  if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);
                  var a,
                    i,
                    s = e.node.contents;
                  if (2 & o || s.buffer !== buffer) {
                    if (
                      ((t > 0 || t + r < s.length) &&
                        (s = s.subarray
                          ? s.subarray(t, t + r)
                          : Array.prototype.slice.call(s, t, t + r)),
                      (i = !0),
                      !(a = mmapAlloc(r)))
                    )
                      throw new FS.ErrnoError(48);
                    HEAP8.set(s, a);
                  } else (i = !1), (a = s.byteOffset);
                  return { ptr: a, allocated: i };
                },
                msync: function (e, r, t, n, o) {
                  return MEMFS.stream_ops.write(e, r, 0, n, t, !1), 0;
                },
              },
            };
            function asyncLoad(e, r, t, n) {
              var o = n ? "" : getUniqueRunDependency("al " + e);
              readAsync(
                e,
                (t) => {
                  assert(
                    t,
                    'Loading data file "' + e + '" failed (no arrayBuffer).'
                  ),
                    r(new Uint8Array(t)),
                    o && removeRunDependency(o);
                },
                (r) => {
                  if (!t) throw 'Loading data file "' + e + '" failed.';
                  t();
                }
              ),
                o && addRunDependency(o);
            }
            var ERRNO_CODES = {},
              PROXYFS = {
                mount: function (e) {
                  return PROXYFS.createNode(
                    null,
                    "/",
                    e.opts.fs.lstat(e.opts.root).mode,
                    0
                  );
                },
                createNode: function (e, r, t, n) {
                  if (!FS.isDir(t) && !FS.isFile(t) && !FS.isLink(t))
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                  var o = FS.createNode(e, r, t);
                  return (
                    (o.node_ops = PROXYFS.node_ops),
                    (o.stream_ops = PROXYFS.stream_ops),
                    o
                  );
                },
                realPath: function (e) {
                  for (var r = []; e.parent !== e; )
                    r.push(e.name), (e = e.parent);
                  return (
                    r.push(e.mount.opts.root),
                    r.reverse(),
                    PATH.join.apply(null, r)
                  );
                },
                node_ops: {
                  getattr: function (e) {
                    var r,
                      t = PROXYFS.realPath(e);
                    try {
                      r = e.mount.opts.fs.lstat(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return {
                      dev: r.dev,
                      ino: r.ino,
                      mode: r.mode,
                      nlink: r.nlink,
                      uid: r.uid,
                      gid: r.gid,
                      rdev: r.rdev,
                      size: r.size,
                      atime: r.atime,
                      mtime: r.mtime,
                      ctime: r.ctime,
                      blksize: r.blksize,
                      blocks: r.blocks,
                    };
                  },
                  setattr: function (e, r) {
                    var t = PROXYFS.realPath(e);
                    try {
                      if (
                        (void 0 !== r.mode &&
                          (e.mount.opts.fs.chmod(t, r.mode), (e.mode = r.mode)),
                        void 0 !== r.timestamp)
                      ) {
                        var n = new Date(r.timestamp);
                        e.mount.opts.fs.utime(t, n, n);
                      }
                      void 0 !== r.size && e.mount.opts.fs.truncate(t, r.size);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  lookup: function (e, r) {
                    try {
                      var t = PATH.join2(PROXYFS.realPath(e), r),
                        n = e.mount.opts.fs.lstat(t).mode;
                      return PROXYFS.createNode(e, r, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  mknod: function (e, r, t, n) {
                    var o = PROXYFS.createNode(e, r, t, n),
                      a = PROXYFS.realPath(o);
                    try {
                      FS.isDir(o.mode)
                        ? o.mount.opts.fs.mkdir(a, o.mode)
                        : o.mount.opts.fs.writeFile(a, "", { mode: o.mode });
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return o;
                  },
                  rename: function (e, r, t) {
                    var n = PROXYFS.realPath(e),
                      o = PATH.join2(PROXYFS.realPath(r), t);
                    try {
                      e.mount.opts.fs.rename(n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  unlink: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.unlink(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  rmdir: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.rmdir(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readdir: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readdir(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  symlink: function (e, r, t) {
                    var n = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.symlink(t, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readlink: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readlink(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                },
                stream_ops: {
                  open: function (e) {
                    var r = PROXYFS.realPath(e.node);
                    try {
                      e.nfd = e.node.mount.opts.fs.open(r, e.flags);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  close: function (e) {
                    try {
                      e.node.mount.opts.fs.close(e.nfd);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  read: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.read(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  write: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.write(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  llseek: function (e, r, t) {
                    var n = r;
                    if (1 === t) n += e.position;
                    else if (2 === t && FS.isFile(e.node.mode))
                      try {
                        n += e.node.node_ops.getattr(e.node).size;
                      } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                      }
                    if (n < 0) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                    return n;
                  },
                },
              },
              FS = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, r = {}) => {
                  if (!(e = PATH_FS.resolve(FS.cwd(), e)))
                    return { path: "", node: null };
                  if (
                    (r = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      r
                    )).recurse_count > 8
                  )
                    throw new FS.ErrnoError(32);
                  for (
                    var t = PATH.normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !1
                      ),
                      n = FS.root,
                      o = "/",
                      a = 0;
                    a < t.length;
                    a++
                  ) {
                    var i = a === t.length - 1;
                    if (i && r.parent) break;
                    if (
                      ((n = FS.lookupNode(n, t[a])),
                      (o = PATH.join2(o, t[a])),
                      FS.isMountpoint(n) &&
                        (!i || (i && r.follow_mount)) &&
                        (n = n.mounted.root),
                      !i || r.follow)
                    )
                      for (var s = 0; FS.isLink(n.mode); ) {
                        var c = FS.readlink(o);
                        if (
                          ((o = PATH_FS.resolve(PATH.dirname(o), c)),
                          (n = FS.lookupPath(o, {
                            recurse_count: r.recurse_count + 1,
                          }).node),
                          s++ > 40)
                        )
                          throw new FS.ErrnoError(32);
                      }
                  }
                  return { path: o, node: n };
                },
                getPath: (e) => {
                  for (var r; ; ) {
                    if (FS.isRoot(e)) {
                      var t = e.mount.mountpoint;
                      return r
                        ? "/" !== t[t.length - 1]
                          ? t + "/" + r
                          : t + r
                        : t;
                    }
                    (r = r ? e.name + "/" + r : e.name), (e = e.parent);
                  }
                },
                hashName: (e, r) => {
                  for (var t = 0, n = 0; n < r.length; n++)
                    t = ((t << 5) - t + r.charCodeAt(n)) | 0;
                  return ((e + t) >>> 0) % FS.nameTable.length;
                },
                hashAddNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  (e.name_next = FS.nameTable[r]), (FS.nameTable[r] = e);
                },
                hashRemoveNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  if (FS.nameTable[r] === e) FS.nameTable[r] = e.name_next;
                  else
                    for (var t = FS.nameTable[r]; t; ) {
                      if (t.name_next === e) {
                        t.name_next = e.name_next;
                        break;
                      }
                      t = t.name_next;
                    }
                },
                lookupNode: (e, r) => {
                  var t = FS.mayLookup(e);
                  if (t) throw new FS.ErrnoError(t, e);
                  for (
                    var n = FS.hashName(e.id, r), o = FS.nameTable[n];
                    o;
                    o = o.name_next
                  ) {
                    var a = o.name;
                    if (o.parent.id === e.id && a === r) return o;
                  }
                  return FS.lookup(e, r);
                },
                createNode: (e, r, t, n) => {
                  var o = new FS.FSNode(e, r, t, n);
                  return FS.hashAddNode(o), o;
                },
                destroyNode: (e) => {
                  FS.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagModes: {
                  r: 0,
                  "r+": 2,
                  w: 577,
                  "w+": 578,
                  a: 1089,
                  "a+": 1090,
                },
                modeStringToFlags: (e) => {
                  var r = FS.flagModes[e];
                  if (void 0 === r)
                    throw new Error("Unknown file open mode: " + e);
                  return r;
                },
                flagsToPermissionString: (e) => {
                  var r = ["r", "w", "rw"][3 & e];
                  return 512 & e && (r += "w"), r;
                },
                nodePermissions: (e, r) =>
                  FS.ignorePermissions ||
                  ((!r.includes("r") || 292 & e.mode) &&
                    (!r.includes("w") || 146 & e.mode) &&
                    (!r.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  FS.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, r) => {
                  try {
                    return FS.lookupNode(e, r), 20;
                  } catch (e) {}
                  return FS.nodePermissions(e, "wx");
                },
                mayDelete: (e, r, t) => {
                  var n;
                  try {
                    n = FS.lookupNode(e, r);
                  } catch (e) {
                    return e.errno;
                  }
                  var o = FS.nodePermissions(e, "wx");
                  if (o) return o;
                  if (t) {
                    if (!FS.isDir(n.mode)) return 54;
                    if (FS.isRoot(n) || FS.getPath(n) === FS.cwd()) return 10;
                  } else if (FS.isDir(n.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, r) =>
                  e
                    ? FS.isLink(e.mode)
                      ? 32
                      : FS.isDir(e.mode) &&
                        ("r" !== FS.flagsToPermissionString(r) || 512 & r)
                      ? 31
                      : FS.nodePermissions(e, FS.flagsToPermissionString(r))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: (e = 0, r = FS.MAX_OPEN_FDS) => {
                  for (var t = e; t <= r; t++) if (!FS.streams[t]) return t;
                  throw new FS.ErrnoError(33);
                },
                getStream: (e) => FS.streams[e],
                createStream: (e, r, t) => {
                  FS.FSStream ||
                    ((FS.FSStream = function () {
                      this.shared = {};
                    }),
                    (FS.FSStream.prototype = {}),
                    Object.defineProperties(FS.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                    (e = Object.assign(new FS.FSStream(), e));
                  var n = FS.nextfd(r, t);
                  return (e.fd = n), (FS.streams[n] = e), e;
                },
                closeStream: (e) => {
                  FS.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var r = FS.getDevice(e.node.rdev);
                    (e.stream_ops = r.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new FS.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, r) => (e << 8) | r,
                registerDevice: (e, r) => {
                  FS.devices[e] = { stream_ops: r };
                },
                getDevice: (e) => FS.devices[e],
                getMounts: (e) => {
                  for (var r = [], t = [e]; t.length; ) {
                    var n = t.pop();
                    r.push(n), t.push.apply(t, n.mounts);
                  }
                  return r;
                },
                syncfs: (e, r) => {
                  "function" == typeof e && ((r = e), (e = !1)),
                    FS.syncFSRequests++,
                    FS.syncFSRequests > 1 &&
                      err(
                        "warning: " +
                          FS.syncFSRequests +
                          " FS.syncfs operations in flight at once, probably just doing extra work"
                      );
                  var t = FS.getMounts(FS.root.mount),
                    n = 0;
                  function o(e) {
                    return FS.syncFSRequests--, r(e);
                  }
                  function a(e) {
                    if (e) return a.errored ? void 0 : ((a.errored = !0), o(e));
                    ++n >= t.length && o(null);
                  }
                  t.forEach((r) => {
                    if (!r.type.syncfs) return a(null);
                    r.type.syncfs(r, e, a);
                  });
                },
                mount: (e, r, t) => {
                  var n,
                    o = "/" === t,
                    a = !t;
                  if (o && FS.root) throw new FS.ErrnoError(10);
                  if (!o && !a) {
                    var i = FS.lookupPath(t, { follow_mount: !1 });
                    if (((t = i.path), (n = i.node), FS.isMountpoint(n)))
                      throw new FS.ErrnoError(10);
                    if (!FS.isDir(n.mode)) throw new FS.ErrnoError(54);
                  }
                  var s = { type: e, opts: r, mountpoint: t, mounts: [] },
                    c = e.mount(s);
                  return (
                    (c.mount = s),
                    (s.root = c),
                    o
                      ? (FS.root = c)
                      : n &&
                        ((n.mounted = s), n.mount && n.mount.mounts.push(s)),
                    c
                  );
                },
                unmount: (e) => {
                  var r = FS.lookupPath(e, { follow_mount: !1 });
                  if (!FS.isMountpoint(r.node)) throw new FS.ErrnoError(28);
                  var t = r.node,
                    n = t.mounted,
                    o = FS.getMounts(n);
                  Object.keys(FS.nameTable).forEach((e) => {
                    for (var r = FS.nameTable[e]; r; ) {
                      var t = r.name_next;
                      o.includes(r.mount) && FS.destroyNode(r), (r = t);
                    }
                  }),
                    (t.mounted = null);
                  var a = t.mount.mounts.indexOf(n);
                  t.mount.mounts.splice(a, 1);
                },
                lookup: (e, r) => e.node_ops.lookup(e, r),
                mknod: (e, r, t) => {
                  var n = FS.lookupPath(e, { parent: !0 }).node,
                    o = PATH.basename(e);
                  if (!o || "." === o || ".." === o)
                    throw new FS.ErrnoError(28);
                  var a = FS.mayCreate(n, o);
                  if (a) throw new FS.ErrnoError(a);
                  if (!n.node_ops.mknod) throw new FS.ErrnoError(63);
                  return n.node_ops.mknod(n, o, r, t);
                },
                create: (e, r) => (
                  (r = void 0 !== r ? r : 438),
                  (r &= 4095),
                  (r |= 32768),
                  FS.mknod(e, r, 0)
                ),
                mkdir: (e, r) => (
                  (r = void 0 !== r ? r : 511),
                  (r &= 1023),
                  (r |= 16384),
                  FS.mknod(e, r, 0)
                ),
                mkdirTree: (e, r) => {
                  for (var t = e.split("/"), n = "", o = 0; o < t.length; ++o)
                    if (t[o]) {
                      n += "/" + t[o];
                      try {
                        FS.mkdir(n, r);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, r, t) => (
                  void 0 === t && ((t = r), (r = 438)),
                  (r |= 8192),
                  FS.mknod(e, r, t)
                ),
                symlink: (e, r) => {
                  if (!PATH_FS.resolve(e)) throw new FS.ErrnoError(44);
                  var t = FS.lookupPath(r, { parent: !0 }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  var n = PATH.basename(r),
                    o = FS.mayCreate(t, n);
                  if (o) throw new FS.ErrnoError(o);
                  if (!t.node_ops.symlink) throw new FS.ErrnoError(63);
                  return t.node_ops.symlink(t, n, e);
                },
                rename: (e, r) => {
                  var t,
                    n,
                    o = PATH.dirname(e),
                    a = PATH.dirname(r),
                    i = PATH.basename(e),
                    s = PATH.basename(r);
                  if (
                    ((t = FS.lookupPath(e, { parent: !0 }).node),
                    (n = FS.lookupPath(r, { parent: !0 }).node),
                    !t || !n)
                  )
                    throw new FS.ErrnoError(44);
                  if (t.mount !== n.mount) throw new FS.ErrnoError(75);
                  var c,
                    u = FS.lookupNode(t, i),
                    l = PATH_FS.relative(e, a);
                  if ("." !== l.charAt(0)) throw new FS.ErrnoError(28);
                  if ("." !== (l = PATH_FS.relative(r, o)).charAt(0))
                    throw new FS.ErrnoError(55);
                  try {
                    c = FS.lookupNode(n, s);
                  } catch (e) {}
                  if (u !== c) {
                    var d = FS.isDir(u.mode),
                      f = FS.mayDelete(t, i, d);
                    if (f) throw new FS.ErrnoError(f);
                    if ((f = c ? FS.mayDelete(n, s, d) : FS.mayCreate(n, s)))
                      throw new FS.ErrnoError(f);
                    if (!t.node_ops.rename) throw new FS.ErrnoError(63);
                    if (FS.isMountpoint(u) || (c && FS.isMountpoint(c)))
                      throw new FS.ErrnoError(10);
                    if (n !== t && (f = FS.nodePermissions(t, "w")))
                      throw new FS.ErrnoError(f);
                    FS.hashRemoveNode(u);
                    try {
                      t.node_ops.rename(u, n, s);
                    } catch (e) {
                      throw e;
                    } finally {
                      FS.hashAddNode(u);
                    }
                  }
                },
                rmdir: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node,
                    t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !0);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.rmdir) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.rmdir(r, t), FS.destroyNode(n);
                },
                readdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 }).node;
                  if (!r.node_ops.readdir) throw new FS.ErrnoError(54);
                  return r.node_ops.readdir(r);
                },
                unlink: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node;
                  if (!r) throw new FS.ErrnoError(44);
                  var t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !1);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.unlink) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.unlink(r, t), FS.destroyNode(n);
                },
                readlink: (e) => {
                  var r = FS.lookupPath(e).node;
                  if (!r) throw new FS.ErrnoError(44);
                  if (!r.node_ops.readlink) throw new FS.ErrnoError(28);
                  return PATH_FS.resolve(
                    FS.getPath(r.parent),
                    r.node_ops.readlink(r)
                  );
                },
                stat: (e, r) => {
                  var t = FS.lookupPath(e, { follow: !r }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  if (!t.node_ops.getattr) throw new FS.ErrnoError(63);
                  return t.node_ops.getattr(t);
                },
                lstat: (e) => FS.stat(e, !0),
                chmod: (e, r, t) => {
                  var n;
                  if (
                    !(n =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !t }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  n.node_ops.setattr(n, {
                    mode: (4095 & r) | (-4096 & n.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, r) => {
                  FS.chmod(e, r, !0);
                },
                fchmod: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  FS.chmod(t.node, r);
                },
                chown: (e, r, t, n) => {
                  var o;
                  if (
                    !(o =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !n }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  o.node_ops.setattr(o, { timestamp: Date.now() });
                },
                lchown: (e, r, t) => {
                  FS.chown(e, r, t, !0);
                },
                fchown: (e, r, t) => {
                  var n = FS.getStream(e);
                  if (!n) throw new FS.ErrnoError(8);
                  FS.chown(n.node, r, t);
                },
                truncate: (e, r) => {
                  if (r < 0) throw new FS.ErrnoError(28);
                  var t;
                  if (
                    !(t =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  if (FS.isDir(t.mode)) throw new FS.ErrnoError(31);
                  if (!FS.isFile(t.mode)) throw new FS.ErrnoError(28);
                  var n = FS.nodePermissions(t, "w");
                  if (n) throw new FS.ErrnoError(n);
                  t.node_ops.setattr(t, { size: r, timestamp: Date.now() });
                },
                ftruncate: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & t.flags)) throw new FS.ErrnoError(28);
                  FS.truncate(t.node, r);
                },
                utime: (e, r, t) => {
                  var n = FS.lookupPath(e, { follow: !0 }).node;
                  n.node_ops.setattr(n, { timestamp: Math.max(r, t) });
                },
                open: (e, r, t) => {
                  if ("" === e) throw new FS.ErrnoError(44);
                  var n;
                  if (
                    ((t = void 0 === t ? 438 : t),
                    (t =
                      64 &
                      (r = "string" == typeof r ? FS.modeStringToFlags(r) : r)
                        ? (4095 & t) | 32768
                        : 0),
                    "object" == typeof e)
                  )
                    n = e;
                  else {
                    e = PATH.normalize(e);
                    try {
                      n = FS.lookupPath(e, { follow: !(131072 & r) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & r)
                    if (n) {
                      if (128 & r) throw new FS.ErrnoError(20);
                    } else (n = FS.mknod(e, t, 0)), (o = !0);
                  if (!n) throw new FS.ErrnoError(44);
                  if (
                    (FS.isChrdev(n.mode) && (r &= -513),
                    65536 & r && !FS.isDir(n.mode))
                  )
                    throw new FS.ErrnoError(54);
                  if (!o) {
                    var a = FS.mayOpen(n, r);
                    if (a) throw new FS.ErrnoError(a);
                  }
                  512 & r && !o && FS.truncate(n, 0), (r &= -131713);
                  var i = FS.createStream({
                    node: n,
                    path: FS.getPath(n),
                    flags: r,
                    seekable: !0,
                    position: 0,
                    stream_ops: n.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    i.stream_ops.open && i.stream_ops.open(i),
                    !Module.logReadFiles ||
                      1 & r ||
                      (FS.readFiles || (FS.readFiles = {}),
                      e in FS.readFiles || (FS.readFiles[e] = 1)),
                    i
                  );
                },
                close: (e) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new FS.ErrnoError(70);
                  if (0 != t && 1 != t && 2 != t) throw new FS.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, r, t)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, r, t, n, o) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.read) throw new FS.ErrnoError(28);
                  var a = void 0 !== o;
                  if (a) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var i = e.stream_ops.read(e, r, t, n, o);
                  return a || (e.position += i), i;
                },
                write: (e, r, t, n, o, a) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.write) throw new FS.ErrnoError(28);
                  e.seekable && 1024 & e.flags && FS.llseek(e, 0, 2);
                  var i = void 0 !== o;
                  if (i) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var s = e.stream_ops.write(e, r, t, n, o, a);
                  return i || (e.position += s), s;
                },
                allocate: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (r < 0 || t <= 0) throw new FS.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode))
                    throw new FS.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new FS.ErrnoError(138);
                  e.stream_ops.allocate(e, r, t);
                },
                mmap: (e, r, t, n, o) => {
                  if (0 != (2 & n) && 0 == (2 & o) && 2 != (2097155 & e.flags))
                    throw new FS.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new FS.ErrnoError(43);
                  return e.stream_ops.mmap(e, r, t, n, o);
                },
                msync: (e, r, t, n, o) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, r, t, n, o) : 0,
                munmap: (e) => 0,
                ioctl: (e, r, t) => {
                  if (!e.stream_ops.ioctl) throw new FS.ErrnoError(59);
                  return e.stream_ops.ioctl(e, r, t);
                },
                readFile: (e, r = {}) => {
                  if (
                    ((r.flags = r.flags || 0),
                    (r.encoding = r.encoding || "binary"),
                    "utf8" !== r.encoding && "binary" !== r.encoding)
                  )
                    throw new Error(
                      'Invalid encoding type "' + r.encoding + '"'
                    );
                  var t,
                    n = FS.open(e, r.flags),
                    o = FS.stat(e).size,
                    a = new Uint8Array(o);
                  return (
                    FS.read(n, a, 0, o, 0),
                    "utf8" === r.encoding
                      ? (t = UTF8ArrayToString(a, 0))
                      : "binary" === r.encoding && (t = a),
                    FS.close(n),
                    t
                  );
                },
                writeFile: (e, r, t = {}) => {
                  t.flags = t.flags || 577;
                  var n = FS.open(e, t.flags, t.mode);
                  if ("string" == typeof r) {
                    var o = new Uint8Array(lengthBytesUTF8(r) + 1),
                      a = stringToUTF8Array(r, o, 0, o.length);
                    FS.write(n, o, 0, a, void 0, t.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(r))
                      throw new Error("Unsupported data type");
                    FS.write(n, r, 0, r.byteLength, void 0, t.canOwn);
                  }
                  FS.close(n);
                },
                cwd: () => FS.currentPath,
                chdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 });
                  if (null === r.node) throw new FS.ErrnoError(44);
                  if (!FS.isDir(r.node.mode)) throw new FS.ErrnoError(54);
                  var t = FS.nodePermissions(r.node, "x");
                  if (t) throw new FS.ErrnoError(t);
                  FS.currentPath = r.path;
                },
                createDefaultDirectories: () => {
                  FS.mkdir("/tmp"),
                    FS.mkdir("/home"),
                    FS.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  FS.mkdir("/dev"),
                    FS.registerDevice(FS.makedev(1, 3), {
                      read: () => 0,
                      write: (e, r, t, n, o) => n,
                    }),
                    FS.mkdev("/dev/null", FS.makedev(1, 3)),
                    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops),
                    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops),
                    FS.mkdev("/dev/tty", FS.makedev(5, 0)),
                    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var e = getRandomDevice();
                  FS.createDevice("/dev", "random", e),
                    FS.createDevice("/dev", "urandom", e),
                    FS.mkdir("/dev/shm"),
                    FS.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var e = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd"),
                    FS.mount(
                      {
                        mount: () => {
                          var r = FS.createNode(e, "fd", 16895, 73);
                          return (
                            (r.node_ops = {
                              lookup: (e, r) => {
                                var t = +r,
                                  n = FS.getStream(t);
                                if (!n) throw new FS.ErrnoError(8);
                                var o = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => n.path },
                                };
                                return (o.parent = o), o;
                              },
                            }),
                            r
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  Module.stdin
                    ? FS.createDevice("/dev", "stdin", Module.stdin)
                    : FS.symlink("/dev/tty", "/dev/stdin"),
                    Module.stdout
                      ? FS.createDevice("/dev", "stdout", null, Module.stdout)
                      : FS.symlink("/dev/tty", "/dev/stdout"),
                    Module.stderr
                      ? FS.createDevice("/dev", "stderr", null, Module.stderr)
                      : FS.symlink("/dev/tty1", "/dev/stderr"),
                    FS.open("/dev/stdin", 0),
                    FS.open("/dev/stdout", 1),
                    FS.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  FS.ErrnoError ||
                    ((FS.ErrnoError = function (e, r) {
                      (this.node = r),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (FS.ErrnoError.prototype = new Error()),
                    (FS.ErrnoError.prototype.constructor = FS.ErrnoError),
                    [44].forEach((e) => {
                      (FS.genericErrors[e] = new FS.ErrnoError(e)),
                        (FS.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  FS.ensureErrnoError(),
                    (FS.nameTable = new Array(4096)),
                    FS.mount(MEMFS, {}, "/"),
                    FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    (FS.filesystems = { MEMFS, PROXYFS });
                },
                init: (e, r, t) => {
                  (FS.init.initialized = !0),
                    FS.ensureErrnoError(),
                    (Module.stdin = e || Module.stdin),
                    (Module.stdout = r || Module.stdout),
                    (Module.stderr = t || Module.stderr),
                    FS.createStandardStreams();
                },
                quit: () => {
                  FS.init.initialized = !1;
                  for (var e = 0; e < FS.streams.length; e++) {
                    var r = FS.streams[e];
                    r && FS.close(r);
                  }
                },
                getMode: (e, r) => {
                  var t = 0;
                  return e && (t |= 365), r && (t |= 146), t;
                },
                findObject: (e, r) => {
                  var t = FS.analyzePath(e, r);
                  return t.exists ? t.object : null;
                },
                analyzePath: (e, r) => {
                  try {
                    e = (n = FS.lookupPath(e, { follow: !r })).path;
                  } catch (e) {}
                  var t = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var n = FS.lookupPath(e, { parent: !0 });
                    (t.parentExists = !0),
                      (t.parentPath = n.path),
                      (t.parentObject = n.node),
                      (t.name = PATH.basename(e)),
                      (n = FS.lookupPath(e, { follow: !r })),
                      (t.exists = !0),
                      (t.path = n.path),
                      (t.object = n.node),
                      (t.name = n.node.name),
                      (t.isRoot = "/" === n.path);
                  } catch (e) {
                    t.error = e.errno;
                  }
                  return t;
                },
                createPath: (e, r, t, n) => {
                  e = "string" == typeof e ? e : FS.getPath(e);
                  for (var o = r.split("/").reverse(); o.length; ) {
                    var a = o.pop();
                    if (a) {
                      var i = PATH.join2(e, a);
                      try {
                        FS.mkdir(i);
                      } catch (e) {}
                      e = i;
                    }
                  }
                  return i;
                },
                createFile: (e, r, t, n, o) => {
                  var a = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    i = FS.getMode(n, o);
                  return FS.create(a, i);
                },
                createDataFile: (e, r, t, n, o, a) => {
                  var i = r;
                  e &&
                    ((e = "string" == typeof e ? e : FS.getPath(e)),
                    (i = r ? PATH.join2(e, r) : e));
                  var s = FS.getMode(n, o),
                    c = FS.create(i, s);
                  if (t) {
                    if ("string" == typeof t) {
                      for (
                        var u = new Array(t.length), l = 0, d = t.length;
                        l < d;
                        ++l
                      )
                        u[l] = t.charCodeAt(l);
                      t = u;
                    }
                    FS.chmod(c, 146 | s);
                    var f = FS.open(c, 577);
                    FS.write(f, t, 0, t.length, 0, a),
                      FS.close(f),
                      FS.chmod(c, s);
                  }
                  return c;
                },
                createDevice: (e, r, t, n) => {
                  var o = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    a = FS.getMode(!!t, !!n);
                  FS.createDevice.major || (FS.createDevice.major = 64);
                  var i = FS.makedev(FS.createDevice.major++, 0);
                  return (
                    FS.registerDevice(i, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        n && n.buffer && n.buffer.length && n(10);
                      },
                      read: (e, r, n, o, a) => {
                        for (var i = 0, s = 0; s < o; s++) {
                          var c;
                          try {
                            c = t();
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                          if (void 0 === c && 0 === i)
                            throw new FS.ErrnoError(6);
                          if (null == c) break;
                          i++, (r[n + s] = c);
                        }
                        return i && (e.node.timestamp = Date.now()), i;
                      },
                      write: (e, r, t, o, a) => {
                        for (var i = 0; i < o; i++)
                          try {
                            n(r[t + i]);
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                        return o && (e.node.timestamp = Date.now()), i;
                      },
                    }),
                    FS.mkdev(o, a, i)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!read_)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = intArrayFromString(read_(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                },
                createLazyFile: (e, r, t, n, o) => {
                  function a() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((a.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var r = e % this.chunkSize,
                          t = (e / this.chunkSize) | 0;
                        return this.getter(t)[r];
                      }
                    }),
                    (a.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (a.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", t, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + t + ". Status: " + e.status
                        );
                      var r,
                        n = Number(e.getResponseHeader("Content-length")),
                        o =
                          (r = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === r,
                        a =
                          (r = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === r,
                        i = 1048576;
                      o || (i = n);
                      var s = this;
                      s.setDataGetter((e) => {
                        var r = e * i,
                          o = (e + 1) * i - 1;
                        if (
                          ((o = Math.min(o, n - 1)),
                          void 0 === s.chunks[e] &&
                            (s.chunks[e] = ((e, r) => {
                              if (e > r)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    r +
                                    ") or no bytes requested!"
                                );
                              if (r > n - 1)
                                throw new Error(
                                  "only " +
                                    n +
                                    " bytes available! programmer error!"
                                );
                              var o = new XMLHttpRequest();
                              if (
                                (o.open("GET", t, !1),
                                n !== i &&
                                  o.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + r
                                  ),
                                (o.responseType = "arraybuffer"),
                                o.overrideMimeType &&
                                  o.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                o.send(null),
                                !(
                                  (o.status >= 200 && o.status < 300) ||
                                  304 === o.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + t + ". Status: " + o.status
                                );
                              return void 0 !== o.response
                                ? new Uint8Array(o.response || [])
                                : intArrayFromString(o.responseText || "", !0);
                            })(r, o)),
                          void 0 === s.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return s.chunks[e];
                      }),
                        (!a && n) ||
                          ((i = n = 1),
                          (n = this.getter(0).length),
                          (i = n),
                          out(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = n),
                        (this._chunkSize = i),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var i = new a();
                    Object.defineProperties(i, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var s = { isDevice: !1, contents: i };
                  } else s = { isDevice: !1, url: t };
                  var c = FS.createFile(e, r, s, n, o);
                  s.contents
                    ? (c.contents = s.contents)
                    : s.url && ((c.contents = null), (c.url = s.url)),
                    Object.defineProperties(c, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var u = {};
                  function l(e, r, t, n, o) {
                    var a = e.node.contents;
                    if (o >= a.length) return 0;
                    var i = Math.min(a.length - o, n);
                    if (a.slice)
                      for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                    else for (s = 0; s < i; s++) r[t + s] = a.get(o + s);
                    return i;
                  }
                  return (
                    Object.keys(c.stream_ops).forEach((e) => {
                      var r = c.stream_ops[e];
                      u[e] = function () {
                        return FS.forceLoadFile(c), r.apply(null, arguments);
                      };
                    }),
                    (u.read = (e, r, t, n, o) => (
                      FS.forceLoadFile(c), l(e, r, t, n, o)
                    )),
                    (u.mmap = (e, r, t, n, o) => {
                      FS.forceLoadFile(c);
                      var a = mmapAlloc(r);
                      if (!a) throw new FS.ErrnoError(48);
                      return l(e, HEAP8, a, r, t), { ptr: a, allocated: !0 };
                    }),
                    (c.stream_ops = u),
                    c
                  );
                },
                createPreloadedFile: (e, r, t, n, o, a, i, s, c, u) => {
                  var l = r ? PATH_FS.resolve(PATH.join2(e, r)) : e,
                    d = getUniqueRunDependency("cp " + l);
                  function f(t) {
                    function f(t) {
                      u && u(),
                        s || FS.createDataFile(e, r, t, n, o, c),
                        a && a(),
                        removeRunDependency(d);
                    }
                    Browser.handledByPreloadPlugin(t, l, f, () => {
                      i && i(), removeRunDependency(d);
                    }) || f(t);
                  }
                  addRunDependency(d),
                    "string" == typeof t ? asyncLoad(t, (e) => f(e), i) : f(t);
                },
                indexedDB: () =>
                  window.indexedDB ||
                  window.mozIndexedDB ||
                  window.webkitIndexedDB ||
                  window.msIndexedDB,
                DB_NAME: () => "EM_FS_" + window.location.pathname,
                DB_VERSION: 20,
                DB_STORE_NAME: "FILE_DATA",
                saveFilesToDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = () => {
                    out("creating db"),
                      o.result.createObjectStore(FS.DB_STORE_NAME);
                  }),
                    (o.onsuccess = () => {
                      var n = o.result.transaction(
                          [FS.DB_STORE_NAME],
                          "readwrite"
                        ),
                        a = n.objectStore(FS.DB_STORE_NAME),
                        i = 0,
                        s = 0,
                        c = e.length;
                      function u() {
                        0 == s ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = a.put(FS.analyzePath(e).object.contents, e);
                        (r.onsuccess = () => {
                          ++i + s == c && u();
                        }),
                          (r.onerror = () => {
                            s++, i + s == c && u();
                          });
                      }),
                        (n.onerror = t);
                    }),
                    (o.onerror = t);
                },
                loadFilesFromDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = t),
                    (o.onsuccess = () => {
                      var n = o.result;
                      try {
                        var a = n.transaction([FS.DB_STORE_NAME], "readonly");
                      } catch (e) {
                        return void t(e);
                      }
                      var i = a.objectStore(FS.DB_STORE_NAME),
                        s = 0,
                        c = 0,
                        u = e.length;
                      function l() {
                        0 == c ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = i.get(e);
                        (r.onsuccess = () => {
                          FS.analyzePath(e).exists && FS.unlink(e),
                            FS.createDataFile(
                              PATH.dirname(e),
                              PATH.basename(e),
                              r.result,
                              !0,
                              !0,
                              !0
                            ),
                            ++s + c == u && l();
                        }),
                          (r.onerror = () => {
                            c++, s + c == u && l();
                          });
                      }),
                        (a.onerror = t);
                    }),
                    (o.onerror = t);
                },
              },
              SYSCALLS = {
                DEFAULT_POLLMASK: 5,
                calculateAt: function (e, r, t) {
                  if (PATH.isAbs(r)) return r;
                  var n;
                  if (
                    ((n =
                      -100 === e ? FS.cwd() : SYSCALLS.getStreamFromFD(e).path),
                    0 == r.length)
                  ) {
                    if (!t) throw new FS.ErrnoError(44);
                    return n;
                  }
                  return PATH.join2(n, r);
                },
                doStat: function (e, r, t) {
                  try {
                    var n = e(r);
                  } catch (e) {
                    if (
                      e &&
                      e.node &&
                      PATH.normalize(r) !== PATH.normalize(FS.getPath(e.node))
                    )
                      return -54;
                    throw e;
                  }
                  return (
                    (HEAP32[t >> 2] = n.dev),
                    (HEAP32[(t + 8) >> 2] = n.ino),
                    (HEAP32[(t + 12) >> 2] = n.mode),
                    (HEAPU32[(t + 16) >> 2] = n.nlink),
                    (HEAP32[(t + 20) >> 2] = n.uid),
                    (HEAP32[(t + 24) >> 2] = n.gid),
                    (HEAP32[(t + 28) >> 2] = n.rdev),
                    (tempI64 = [
                      n.size >>> 0,
                      ((tempDouble = n.size),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 40) >> 2] = tempI64[0]),
                    (HEAP32[(t + 44) >> 2] = tempI64[1]),
                    (HEAP32[(t + 48) >> 2] = 4096),
                    (HEAP32[(t + 52) >> 2] = n.blocks),
                    (tempI64 = [
                      Math.floor(n.atime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.atime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 56) >> 2] = tempI64[0]),
                    (HEAP32[(t + 60) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 64) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.mtime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.mtime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 72) >> 2] = tempI64[0]),
                    (HEAP32[(t + 76) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 80) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.ctime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.ctime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 88) >> 2] = tempI64[0]),
                    (HEAP32[(t + 92) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 96) >> 2] = 0),
                    (tempI64 = [
                      n.ino >>> 0,
                      ((tempDouble = n.ino),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 104) >> 2] = tempI64[0]),
                    (HEAP32[(t + 108) >> 2] = tempI64[1]),
                    0
                  );
                },
                doMsync: function (e, r, t, n, o) {
                  if (!FS.isFile(r.node.mode)) throw new FS.ErrnoError(43);
                  if (2 & n) return 0;
                  var a = HEAPU8.slice(e, e + t);
                  FS.msync(r, a, o, t, n);
                },
                varargs: void 0,
                get: function () {
                  return (
                    (SYSCALLS.varargs += 4), HEAP32[(SYSCALLS.varargs - 4) >> 2]
                  );
                },
                getStr: function (e) {
                  return UTF8ToString(e);
                },
                getStreamFromFD: function (e) {
                  var r = FS.getStream(e);
                  if (!r) throw new FS.ErrnoError(8);
                  return r;
                },
              };
            function ___syscall_fcntl64(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 0:
                    return (o = SYSCALLS.get()) < 0
                      ? -28
                      : FS.createStream(n, o).fd;
                  case 1:
                  case 2:
                  case 6:
                  case 7:
                    return 0;
                  case 3:
                    return n.flags;
                  case 4:
                    var o = SYSCALLS.get();
                    return (n.flags |= o), 0;
                  case 5:
                    return (o = SYSCALLS.get()), (HEAP16[(o + 0) >> 1] = 2), 0;
                  case 16:
                  case 8:
                  default:
                    return -28;
                  case 9:
                    return setErrNo(28), -1;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_ioctl(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 21509:
                  case 21505:
                  case 21510:
                  case 21511:
                  case 21512:
                  case 21506:
                  case 21507:
                  case 21508:
                  case 21523:
                  case 21524:
                    return n.tty ? 0 : -59;
                  case 21519:
                    if (!n.tty) return -59;
                    var o = SYSCALLS.get();
                    return (HEAP32[o >> 2] = 0), 0;
                  case 21520:
                    return n.tty ? -28 : -59;
                  case 21531:
                    return (o = SYSCALLS.get()), FS.ioctl(n, r, o);
                  default:
                    return -28;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_openat(e, r, t, n) {
              SYSCALLS.varargs = n;
              try {
                (r = SYSCALLS.getStr(r)), (r = SYSCALLS.calculateAt(e, r));
                var o = n ? SYSCALLS.get() : 0;
                return FS.open(r, t, o).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            var nowIsMonotonic = !0,
              _emscripten_get_now;
            function __emscripten_get_now_is_monotonic() {
              return nowIsMonotonic;
            }
            function _abort() {
              abort("");
            }
            function _emscripten_memcpy_big(e, r, t) {
              HEAPU8.copyWithin(e, r, r + t);
            }
            function getHeapMax() {
              return 2147483648;
            }
            function emscripten_realloc_buffer(e) {
              try {
                return (
                  wasmMemory.grow((e - buffer.byteLength + 65535) >>> 16),
                  updateGlobalBufferAndViews(wasmMemory.buffer),
                  1
                );
              } catch (e) {}
            }
            function _emscripten_resize_heap(e) {
              var r = HEAPU8.length;
              e >>>= 0;
              var t,
                n = getHeapMax();
              if (e > n) return !1;
              for (var o = 1; o <= 4; o *= 2) {
                var a = r * (1 + 0.2 / o);
                if (
                  ((a = Math.min(a, e + 100663296)),
                  emscripten_realloc_buffer(
                    Math.min(
                      n,
                      (t = Math.max(e, a)) + ((65536 - (t % 65536)) % 65536)
                    )
                  ))
                )
                  return !0;
              }
              return !1;
            }
            _emscripten_get_now = ENVIRONMENT_IS_NODE
              ? () => {
                  var e = process.hrtime();
                  return 1e3 * e[0] + e[1] / 1e6;
                }
              : () => performance.now();
            var ENV = {};
            function getExecutableName() {
              return thisProgram || "./this.program";
            }
            function getEnvStrings() {
              if (!getEnvStrings.strings) {
                var e = {
                  USER: "web_user",
                  LOGNAME: "web_user",
                  PATH: "/",
                  PWD: "/",
                  HOME: "/home/web_user",
                  LANG:
                    (
                      ("object" == typeof navigator &&
                        navigator.languages &&
                        navigator.languages[0]) ||
                      "C"
                    ).replace("-", "_") + ".UTF-8",
                  _: getExecutableName(),
                };
                for (var r in ENV)
                  void 0 === ENV[r] ? delete e[r] : (e[r] = ENV[r]);
                var t = [];
                for (var r in e) t.push(r + "=" + e[r]);
                getEnvStrings.strings = t;
              }
              return getEnvStrings.strings;
            }
            function writeAsciiToMemory(e, r, t) {
              for (var n = 0; n < e.length; ++n)
                HEAP8[r++ >> 0] = e.charCodeAt(n);
              t || (HEAP8[r >> 0] = 0);
            }
            function _environ_get(e, r) {
              var t = 0;
              return (
                getEnvStrings().forEach(function (n, o) {
                  var a = r + t;
                  (HEAPU32[(e + 4 * o) >> 2] = a),
                    writeAsciiToMemory(n, a),
                    (t += n.length + 1);
                }),
                0
              );
            }
            function _environ_sizes_get(e, r) {
              var t = getEnvStrings();
              HEAPU32[e >> 2] = t.length;
              var n = 0;
              return (
                t.forEach(function (e) {
                  n += e.length + 1;
                }),
                (HEAPU32[r >> 2] = n),
                0
              );
            }
            function _proc_exit(e) {
              (EXITSTATUS = e),
                keepRuntimeAlive() ||
                  (Module.onExit && Module.onExit(e), (ABORT = !0)),
                quit_(e, new ExitStatus(e));
            }
            function exitJS(e, r) {
              (EXITSTATUS = e), _proc_exit(e);
            }
            var _exit = exitJS;
            function _fd_close(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return FS.close(r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doReadv(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.read(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                if (((o += c), c < s)) break;
              }
              return o;
            }
            function _fd_read(e, r, t, n) {
              try {
                var o = doReadv(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function convertI32PairToI53Checked(e, r) {
              return (r + 2097152) >>> 0 < 4194305 - !!e
                ? (e >>> 0) + 4294967296 * r
                : NaN;
            }
            function _fd_seek(e, r, t, n, o) {
              try {
                var a = convertI32PairToI53Checked(r, t);
                if (isNaN(a)) return 61;
                var i = SYSCALLS.getStreamFromFD(e);
                return (
                  FS.llseek(i, a, n),
                  (tempI64 = [
                    i.position >>> 0,
                    ((tempDouble = i.position),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                  (HEAP32[o >> 2] = tempI64[0]),
                  (HEAP32[(o + 4) >> 2] = tempI64[1]),
                  i.getdents && 0 === a && 0 === n && (i.getdents = null),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doWritev(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.write(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                o += c;
              }
              return o;
            }
            function _fd_write(e, r, t, n) {
              try {
                var o = doWritev(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _llvm_eh_typeid_for(e) {
              return e;
            }
            function __isLeapYear(e) {
              return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
            }
            function __arraySum(e, r) {
              for (var t = 0, n = 0; n <= r; t += e[n++]);
              return t;
            }
            var __MONTH_DAYS_LEAP = [
                31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ],
              __MONTH_DAYS_REGULAR = [
                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ];
            function __addDays(e, r) {
              for (var t = new Date(e.getTime()); r > 0; ) {
                var n = __isLeapYear(t.getFullYear()),
                  o = t.getMonth(),
                  a = (n ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[o];
                if (!(r > a - t.getDate()))
                  return t.setDate(t.getDate() + r), t;
                (r -= a - t.getDate() + 1),
                  t.setDate(1),
                  o < 11
                    ? t.setMonth(o + 1)
                    : (t.setMonth(0), t.setFullYear(t.getFullYear() + 1));
              }
              return t;
            }
            function writeArrayToMemory(e, r) {
              HEAP8.set(e, r);
            }
            function _strftime(e, r, t, n) {
              var o = HEAP32[(n + 40) >> 2],
                a = {
                  tm_sec: HEAP32[n >> 2],
                  tm_min: HEAP32[(n + 4) >> 2],
                  tm_hour: HEAP32[(n + 8) >> 2],
                  tm_mday: HEAP32[(n + 12) >> 2],
                  tm_mon: HEAP32[(n + 16) >> 2],
                  tm_year: HEAP32[(n + 20) >> 2],
                  tm_wday: HEAP32[(n + 24) >> 2],
                  tm_yday: HEAP32[(n + 28) >> 2],
                  tm_isdst: HEAP32[(n + 32) >> 2],
                  tm_gmtoff: HEAP32[(n + 36) >> 2],
                  tm_zone: o ? UTF8ToString(o) : "",
                },
                i = UTF8ToString(t),
                s = {
                  "%c": "%a %b %d %H:%M:%S %Y",
                  "%D": "%m/%d/%y",
                  "%F": "%Y-%m-%d",
                  "%h": "%b",
                  "%r": "%I:%M:%S %p",
                  "%R": "%H:%M",
                  "%T": "%H:%M:%S",
                  "%x": "%m/%d/%y",
                  "%X": "%H:%M:%S",
                  "%Ec": "%c",
                  "%EC": "%C",
                  "%Ex": "%m/%d/%y",
                  "%EX": "%H:%M:%S",
                  "%Ey": "%y",
                  "%EY": "%Y",
                  "%Od": "%d",
                  "%Oe": "%e",
                  "%OH": "%H",
                  "%OI": "%I",
                  "%Om": "%m",
                  "%OM": "%M",
                  "%OS": "%S",
                  "%Ou": "%u",
                  "%OU": "%U",
                  "%OV": "%V",
                  "%Ow": "%w",
                  "%OW": "%W",
                  "%Oy": "%y",
                };
              for (var c in s) i = i.replace(new RegExp(c, "g"), s[c]);
              var u = [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ],
                l = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
              function d(e, r, t) {
                for (
                  var n = "number" == typeof e ? e.toString() : e || "";
                  n.length < r;

                )
                  n = t[0] + n;
                return n;
              }
              function f(e, r) {
                return d(e, r, "0");
              }
              function _(e, r) {
                function t(e) {
                  return e < 0 ? -1 : e > 0 ? 1 : 0;
                }
                var n;
                return (
                  0 === (n = t(e.getFullYear() - r.getFullYear())) &&
                    0 === (n = t(e.getMonth() - r.getMonth())) &&
                    (n = t(e.getDate() - r.getDate())),
                  n
                );
              }
              function m(e) {
                switch (e.getDay()) {
                  case 0:
                    return new Date(e.getFullYear() - 1, 11, 29);
                  case 1:
                    return e;
                  case 2:
                    return new Date(e.getFullYear(), 0, 3);
                  case 3:
                    return new Date(e.getFullYear(), 0, 2);
                  case 4:
                    return new Date(e.getFullYear(), 0, 1);
                  case 5:
                    return new Date(e.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(e.getFullYear() - 1, 11, 30);
                }
              }
              function p(e) {
                var r = __addDays(new Date(e.tm_year + 1900, 0, 1), e.tm_yday),
                  t = new Date(r.getFullYear(), 0, 4),
                  n = new Date(r.getFullYear() + 1, 0, 4),
                  o = m(t),
                  a = m(n);
                return _(o, r) <= 0
                  ? _(a, r) <= 0
                    ? r.getFullYear() + 1
                    : r.getFullYear()
                  : r.getFullYear() - 1;
              }
              var S = {
                "%a": function (e) {
                  return u[e.tm_wday].substring(0, 3);
                },
                "%A": function (e) {
                  return u[e.tm_wday];
                },
                "%b": function (e) {
                  return l[e.tm_mon].substring(0, 3);
                },
                "%B": function (e) {
                  return l[e.tm_mon];
                },
                "%C": function (e) {
                  return f(((e.tm_year + 1900) / 100) | 0, 2);
                },
                "%d": function (e) {
                  return f(e.tm_mday, 2);
                },
                "%e": function (e) {
                  return d(e.tm_mday, 2, " ");
                },
                "%g": function (e) {
                  return p(e).toString().substring(2);
                },
                "%G": function (e) {
                  return p(e);
                },
                "%H": function (e) {
                  return f(e.tm_hour, 2);
                },
                "%I": function (e) {
                  var r = e.tm_hour;
                  return 0 == r ? (r = 12) : r > 12 && (r -= 12), f(r, 2);
                },
                "%j": function (e) {
                  return f(
                    e.tm_mday +
                      __arraySum(
                        __isLeapYear(e.tm_year + 1900)
                          ? __MONTH_DAYS_LEAP
                          : __MONTH_DAYS_REGULAR,
                        e.tm_mon - 1
                      ),
                    3
                  );
                },
                "%m": function (e) {
                  return f(e.tm_mon + 1, 2);
                },
                "%M": function (e) {
                  return f(e.tm_min, 2);
                },
                "%n": function () {
                  return "\n";
                },
                "%p": function (e) {
                  return e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM";
                },
                "%S": function (e) {
                  return f(e.tm_sec, 2);
                },
                "%t": function () {
                  return "\t";
                },
                "%u": function (e) {
                  return e.tm_wday || 7;
                },
                "%U": function (e) {
                  var r = e.tm_yday + 7 - e.tm_wday;
                  return f(Math.floor(r / 7), 2);
                },
                "%V": function (e) {
                  var r = Math.floor(
                    (e.tm_yday + 7 - ((e.tm_wday + 6) % 7)) / 7
                  );
                  if (((e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && r++, r)) {
                    if (53 == r) {
                      var t = (e.tm_wday + 371 - e.tm_yday) % 7;
                      4 == t || (3 == t && __isLeapYear(e.tm_year)) || (r = 1);
                    }
                  } else {
                    r = 52;
                    var n = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                    (4 == n ||
                      (5 == n && __isLeapYear((e.tm_year % 400) - 1))) &&
                      r++;
                  }
                  return f(r, 2);
                },
                "%w": function (e) {
                  return e.tm_wday;
                },
                "%W": function (e) {
                  var r = e.tm_yday + 7 - ((e.tm_wday + 6) % 7);
                  return f(Math.floor(r / 7), 2);
                },
                "%y": function (e) {
                  return (e.tm_year + 1900).toString().substring(2);
                },
                "%Y": function (e) {
                  return e.tm_year + 1900;
                },
                "%z": function (e) {
                  var r = e.tm_gmtoff,
                    t = r >= 0;
                  return (
                    (r = ((r = Math.abs(r) / 60) / 60) * 100 + (r % 60)),
                    (t ? "+" : "-") + String("0000" + r).slice(-4)
                  );
                },
                "%Z": function (e) {
                  return e.tm_zone;
                },
                "%%": function () {
                  return "%";
                },
              };
              for (var c in ((i = i.replace(/%%/g, "\0\0")), S))
                i.includes(c) && (i = i.replace(new RegExp(c, "g"), S[c](a)));
              var E = intArrayFromString((i = i.replace(/\0\0/g, "%")), !1);
              return E.length > r
                ? 0
                : (writeArrayToMemory(E, e), E.length - 1);
            }
            function _strftime_l(e, r, t, n, o) {
              return _strftime(e, r, t, n);
            }
            function handleException(e) {
              if (e instanceof ExitStatus || "unwind" == e) return EXITSTATUS;
              quit_(1, e);
            }
            function allocateUTF8OnStack(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = stackAlloc(r);
              return stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSROOT = {
              staticInit: () => {
                FS.root = null;
                let opts = (Module.ROOT && Module.ROOT.opts) || {},
                  type = (Module.ROOT && Module.ROOT.type) || "MEMFS";
                "string" == typeof type
                  ? (type = FS.filesystems[type] || eval(type))
                  : "function" == typeof type && (type = type(Module)),
                  FS.mount(type, opts, "/"),
                  FSROOT.createDefaultMountPoints();
                const restore_mkdir = FSROOT.safeMkdir();
                FS.createDefaultDirectories(),
                  FS.createDefaultDevices(),
                  FS.createSpecialDirectories(),
                  restore_mkdir();
              },
              createDefaultMountPoints: () => {
                FS.mkdirTree("/dev"),
                  FS.mount(MEMFS, {}, "/dev"),
                  FS.mkdirTree("/proc/self"),
                  FS.mount(MEMFS, {}, "/proc/self");
              },
              safeMkdir: () => {
                const e = FS.mkdir;
                return (
                  (FS.mkdir = (r, t) => {
                    try {
                      return e(r, t);
                    } catch {
                      return FS.lookupPath(r, { follow: !0 }).node;
                    }
                  }),
                  () => {
                    FS.mkdir = e;
                  }
                );
              },
            };
            function allocateUTF8(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = _malloc(r);
              return t && stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSNode = function (e, r, t, n) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = FS.nextInode++),
                  (this.name = r),
                  (this.mode = t),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = n);
              },
              readMode = 365,
              writeMode = 146;
            Object.defineProperties(FSNode.prototype, {
              read: {
                get: function () {
                  return (this.mode & readMode) === readMode;
                },
                set: function (e) {
                  e ? (this.mode |= readMode) : (this.mode &= ~readMode);
                },
              },
              write: {
                get: function () {
                  return (this.mode & writeMode) === writeMode;
                },
                set: function (e) {
                  e ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
                },
              },
              isFolder: {
                get: function () {
                  return FS.isDir(this.mode);
                },
              },
              isDevice: {
                get: function () {
                  return FS.isChrdev(this.mode);
                },
              },
            }),
              (FS.FSNode = FSNode),
              FS.staticInit(),
              (ERRNO_CODES = {
                EPERM: 63,
                ENOENT: 44,
                ESRCH: 71,
                EINTR: 27,
                EIO: 29,
                ENXIO: 60,
                E2BIG: 1,
                ENOEXEC: 45,
                EBADF: 8,
                ECHILD: 12,
                EAGAIN: 6,
                EWOULDBLOCK: 6,
                ENOMEM: 48,
                EACCES: 2,
                EFAULT: 21,
                ENOTBLK: 105,
                EBUSY: 10,
                EEXIST: 20,
                EXDEV: 75,
                ENODEV: 43,
                ENOTDIR: 54,
                EISDIR: 31,
                EINVAL: 28,
                ENFILE: 41,
                EMFILE: 33,
                ENOTTY: 59,
                ETXTBSY: 74,
                EFBIG: 22,
                ENOSPC: 51,
                ESPIPE: 70,
                EROFS: 69,
                EMLINK: 34,
                EPIPE: 64,
                EDOM: 18,
                ERANGE: 68,
                ENOMSG: 49,
                EIDRM: 24,
                ECHRNG: 106,
                EL2NSYNC: 156,
                EL3HLT: 107,
                EL3RST: 108,
                ELNRNG: 109,
                EUNATCH: 110,
                ENOCSI: 111,
                EL2HLT: 112,
                EDEADLK: 16,
                ENOLCK: 46,
                EBADE: 113,
                EBADR: 114,
                EXFULL: 115,
                ENOANO: 104,
                EBADRQC: 103,
                EBADSLT: 102,
                EDEADLOCK: 16,
                EBFONT: 101,
                ENOSTR: 100,
                ENODATA: 116,
                ETIME: 117,
                ENOSR: 118,
                ENONET: 119,
                ENOPKG: 120,
                EREMOTE: 121,
                ENOLINK: 47,
                EADV: 122,
                ESRMNT: 123,
                ECOMM: 124,
                EPROTO: 65,
                EMULTIHOP: 36,
                EDOTDOT: 125,
                EBADMSG: 9,
                ENOTUNIQ: 126,
                EBADFD: 127,
                EREMCHG: 128,
                ELIBACC: 129,
                ELIBBAD: 130,
                ELIBSCN: 131,
                ELIBMAX: 132,
                ELIBEXEC: 133,
                ENOSYS: 52,
                ENOTEMPTY: 55,
                ENAMETOOLONG: 37,
                ELOOP: 32,
                EOPNOTSUPP: 138,
                EPFNOSUPPORT: 139,
                ECONNRESET: 15,
                ENOBUFS: 42,
                EAFNOSUPPORT: 5,
                EPROTOTYPE: 67,
                ENOTSOCK: 57,
                ENOPROTOOPT: 50,
                ESHUTDOWN: 140,
                ECONNREFUSED: 14,
                EADDRINUSE: 3,
                ECONNABORTED: 13,
                ENETUNREACH: 40,
                ENETDOWN: 38,
                ETIMEDOUT: 73,
                EHOSTDOWN: 142,
                EHOSTUNREACH: 23,
                EINPROGRESS: 26,
                EALREADY: 7,
                EDESTADDRREQ: 17,
                EMSGSIZE: 35,
                EPROTONOSUPPORT: 66,
                ESOCKTNOSUPPORT: 137,
                EADDRNOTAVAIL: 4,
                ENETRESET: 39,
                EISCONN: 30,
                ENOTCONN: 53,
                ETOOMANYREFS: 141,
                EUSERS: 136,
                EDQUOT: 19,
                ESTALE: 72,
                ENOTSUP: 138,
                ENOMEDIUM: 148,
                EILSEQ: 25,
                EOVERFLOW: 61,
                ECANCELED: 11,
                ENOTRECOVERABLE: 56,
                EOWNERDEAD: 62,
                ESTRPIPE: 135,
              }),
              FSROOT.staticInit();
            var asmLibraryArg = {
                c: ___assert_fail,
                p: ___cxa_allocate_exception,
                s: ___cxa_begin_catch,
                oa: ___cxa_call_unexpected,
                w: ___cxa_end_catch,
                a: ___cxa_find_matching_catch_2,
                l: ___cxa_find_matching_catch_3,
                D: ___cxa_find_matching_catch_4,
                B: ___cxa_find_matching_catch_5,
                o: ___cxa_free_exception,
                Q: ___cxa_rethrow,
                y: ___cxa_throw,
                ua: ___cxa_uncaught_exceptions,
                g: ___resumeException,
                K: ___syscall_fcntl64,
                ra: ___syscall_ioctl,
                sa: ___syscall_openat,
                va: __emscripten_get_now_is_monotonic,
                A: _abort,
                xa: _emscripten_get_now,
                Aa: _emscripten_memcpy_big,
                wa: _emscripten_resize_heap,
                ya: _environ_get,
                za: _environ_sizes_get,
                H: _exit,
                M: _fd_close,
                qa: _fd_read,
                V: _fd_seek,
                L: _fd_write,
                O: invoke_di,
                I: invoke_diii,
                J: invoke_fiii,
                x: invoke_i,
                f: invoke_ii,
                Ca: invoke_iid,
                b: invoke_iii,
                h: invoke_iiii,
                m: invoke_iiiii,
                ta: invoke_iiiiid,
                q: invoke_iiiiii,
                u: invoke_iiiiiii,
                C: invoke_iiiiiiii,
                r: invoke_iiiiiiiii,
                N: invoke_iiiiiiiiii,
                P: invoke_iiiiiiiiiii,
                G: invoke_iiiiiiiiiiii,
                Ea: invoke_iiiiiiiiiiiiii,
                Da: invoke_iiiiiiiiiiiiiiiiii,
                T: invoke_iiiiij,
                ba: invoke_iiijj,
                aa: invoke_iij,
                fa: invoke_iiji,
                Z: invoke_iijiiii,
                Y: invoke_ij,
                U: invoke_j,
                na: invoke_ji,
                $: invoke_jiii,
                S: invoke_jiiii,
                ha: invoke_jiiiij,
                ea: invoke_jiji,
                k: invoke_v,
                j: invoke_vi,
                e: invoke_vii,
                d: invoke_viii,
                i: invoke_viiii,
                t: invoke_viiiii,
                n: invoke_viiiiii,
                z: invoke_viiiiiii,
                R: invoke_viiiiiiii,
                E: invoke_viiiiiiiiii,
                F: invoke_viiiiiiiiiiiiiii,
                X: invoke_viiiiij,
                la: invoke_viiiji,
                ga: invoke_viij,
                ka: invoke_viijii,
                ja: invoke_viijiiij,
                _: invoke_vij,
                ca: invoke_viji,
                da: invoke_vijii,
                ia: invoke_vijiiij,
                ma: invoke_vijji,
                W: invoke_vjii,
                v: _llvm_eh_typeid_for,
                Ba: _proc_exit,
                pa: _strftime_l,
              },
              asm = createWasm(),
              ___wasm_call_ctors = (Module.___wasm_call_ctors = function () {
                return (___wasm_call_ctors = Module.___wasm_call_ctors =
                  Module.asm.Ga).apply(null, arguments);
              }),
              _main = (Module._main = function () {
                return (_main = Module._main = Module.asm.Ha).apply(
                  null,
                  arguments
                );
              }),
              _free = (Module._free = function () {
                return (_free = Module._free = Module.asm.Ia).apply(
                  null,
                  arguments
                );
              }),
              ___errno_location = (Module.___errno_location = function () {
                return (___errno_location = Module.___errno_location =
                  Module.asm.Ka).apply(null, arguments);
              }),
              _malloc = (Module._malloc = function () {
                return (_malloc = Module._malloc = Module.asm.La).apply(
                  null,
                  arguments
                );
              }),
              _setThrew = (Module._setThrew = function () {
                return (_setThrew = Module._setThrew = Module.asm.Ma).apply(
                  null,
                  arguments
                );
              }),
              setTempRet0 = (Module.setTempRet0 = function () {
                return (setTempRet0 = Module.setTempRet0 = Module.asm.Na).apply(
                  null,
                  arguments
                );
              }),
              stackSave = (Module.stackSave = function () {
                return (stackSave = Module.stackSave = Module.asm.Oa).apply(
                  null,
                  arguments
                );
              }),
              stackRestore = (Module.stackRestore = function () {
                return (stackRestore = Module.stackRestore =
                  Module.asm.Pa).apply(null, arguments);
              }),
              stackAlloc = (Module.stackAlloc = function () {
                return (stackAlloc = Module.stackAlloc = Module.asm.Qa).apply(
                  null,
                  arguments
                );
              }),
              ___cxa_can_catch = (Module.___cxa_can_catch = function () {
                return (___cxa_can_catch = Module.___cxa_can_catch =
                  Module.asm.Ra).apply(null, arguments);
              }),
              ___cxa_is_pointer_type = (Module.___cxa_is_pointer_type =
                function () {
                  return (___cxa_is_pointer_type =
                    Module.___cxa_is_pointer_type =
                      Module.asm.Sa).apply(null, arguments);
                }),
              dynCall_ji = (Module.dynCall_ji = function () {
                return (dynCall_ji = Module.dynCall_ji = Module.asm.Ta).apply(
                  null,
                  arguments
                );
              }),
              dynCall_vijji = (Module.dynCall_vijji = function () {
                return (dynCall_vijji = Module.dynCall_vijji =
                  Module.asm.Ua).apply(null, arguments);
              }),
              dynCall_viijiiij = (Module.dynCall_viijiiij = function () {
                return (dynCall_viijiiij = Module.dynCall_viijiiij =
                  Module.asm.Va).apply(null, arguments);
              }),
              dynCall_vijiiij = (Module.dynCall_vijiiij = function () {
                return (dynCall_vijiiij = Module.dynCall_vijiiij =
                  Module.asm.Wa).apply(null, arguments);
              }),
              dynCall_jiiiij = (Module.dynCall_jiiiij = function () {
                return (dynCall_jiiiij = Module.dynCall_jiiiij =
                  Module.asm.Xa).apply(null, arguments);
              }),
              dynCall_viij = (Module.dynCall_viij = function () {
                return (dynCall_viij = Module.dynCall_viij =
                  Module.asm.Ya).apply(null, arguments);
              }),
              dynCall_viji = (Module.dynCall_viji = function () {
                return (dynCall_viji = Module.dynCall_viji =
                  Module.asm.Za).apply(null, arguments);
              }),
              dynCall_iij = (Module.dynCall_iij = function () {
                return (dynCall_iij = Module.dynCall_iij = Module.asm._a).apply(
                  null,
                  arguments
                );
              }),
              dynCall_iiijj = (Module.dynCall_iiijj = function () {
                return (dynCall_iiijj = Module.dynCall_iiijj =
                  Module.asm.$a).apply(null, arguments);
              }),
              dynCall_viiiji = (Module.dynCall_viiiji = function () {
                return (dynCall_viiiji = Module.dynCall_viiiji =
                  Module.asm.ab).apply(null, arguments);
              }),
              dynCall_viijii = (Module.dynCall_viijii = function () {
                return (dynCall_viijii = Module.dynCall_viijii =
                  Module.asm.bb).apply(null, arguments);
              }),
              dynCall_iiji = (Module.dynCall_iiji = function () {
                return (dynCall_iiji = Module.dynCall_iiji =
                  Module.asm.cb).apply(null, arguments);
              }),
              dynCall_jiji = (Module.dynCall_jiji = function () {
                return (dynCall_jiji = Module.dynCall_jiji =
                  Module.asm.db).apply(null, arguments);
              }),
              dynCall_vijii = (Module.dynCall_vijii = function () {
                return (dynCall_vijii = Module.dynCall_vijii =
                  Module.asm.eb).apply(null, arguments);
              }),
              dynCall_jiii = (Module.dynCall_jiii = function () {
                return (dynCall_jiii = Module.dynCall_jiii =
                  Module.asm.fb).apply(null, arguments);
              }),
              dynCall_iijiiii = (Module.dynCall_iijiiii = function () {
                return (dynCall_iijiiii = Module.dynCall_iijiiii =
                  Module.asm.gb).apply(null, arguments);
              }),
              dynCall_vij = (Module.dynCall_vij = function () {
                return (dynCall_vij = Module.dynCall_vij = Module.asm.hb).apply(
                  null,
                  arguments
                );
              }),
              dynCall_ij = (Module.dynCall_ij = function () {
                return (dynCall_ij = Module.dynCall_ij = Module.asm.ib).apply(
                  null,
                  arguments
                );
              }),
              dynCall_viiiiij = (Module.dynCall_viiiiij = function () {
                return (dynCall_viiiiij = Module.dynCall_viiiiij =
                  Module.asm.jb).apply(null, arguments);
              }),
              dynCall_vjii = (Module.dynCall_vjii = function () {
                return (dynCall_vjii = Module.dynCall_vjii =
                  Module.asm.kb).apply(null, arguments);
              }),
              dynCall_j = (Module.dynCall_j = function () {
                return (dynCall_j = Module.dynCall_j = Module.asm.lb).apply(
                  null,
                  arguments
                );
              }),
              dynCall_iiiiij = (Module.dynCall_iiiiij = function () {
                return (dynCall_iiiiij = Module.dynCall_iiiiij =
                  Module.asm.mb).apply(null, arguments);
              }),
              dynCall_jiiii = (Module.dynCall_jiiii = function () {
                return (dynCall_jiiii = Module.dynCall_jiiii =
                  Module.asm.nb).apply(null, arguments);
              }),
              calledRun;
            function invoke_ii(e, r) {
              var t = stackSave();
              try {
                return getWasmTableEntry(e)(r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiii(e, r, t, n) {
              var o = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiiii(e, r, t, n, o, a, i, s, c) {
              var u = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i, s, c);
              } catch (e) {
                if ((stackRestore(u), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiii(e, r, t, n, o) {
              var a = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viii(e, r, t, n) {
              var o = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iii(e, r, t) {
              var n = stackSave();
              try {
                return getWasmTableEntry(e)(r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_i(e) {
              var r = stackSave();
              try {
                return getWasmTableEntry(e)();
              } catch (e) {
                if ((stackRestore(r), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vii(e, r, t) {
              var n = stackSave();
              try {
                getWasmTableEntry(e)(r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiii(e, r, t, n, o, a) {
              var i = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a);
              } catch (e) {
                if ((stackRestore(i), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_v(e) {
              var r = stackSave();
              try {
                getWasmTableEntry(e)();
              } catch (e) {
                if ((stackRestore(r), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vi(e, r) {
              var t = stackSave();
              try {
                getWasmTableEntry(e)(r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiii(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiii(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiii(e, r, t, n, o) {
              var a = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiiiii(e, r, t, n, o, a, i, s, c) {
              var u = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a, i, s, c);
              } catch (e) {
                if ((stackRestore(u), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiiiiii(e, r, t, n, o, a, i, s, c, u, l) {
              var d = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i, s, c, u, l);
              } catch (e) {
                if ((stackRestore(d), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiiiiiiiii(
              e,
              r,
              t,
              n,
              o,
              a,
              i,
              s,
              c,
              u,
              l,
              d,
              f,
              _
            ) {
              var m = stackSave();
              try {
                return getWasmTableEntry(e)(
                  r,
                  t,
                  n,
                  o,
                  a,
                  i,
                  s,
                  c,
                  u,
                  l,
                  d,
                  f,
                  _
                );
              } catch (e) {
                if ((stackRestore(m), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiiiiiiiiiiiii(
              e,
              r,
              t,
              n,
              o,
              a,
              i,
              s,
              c,
              u,
              l,
              d,
              f,
              _,
              m,
              p,
              S,
              E
            ) {
              var h = stackSave();
              try {
                return getWasmTableEntry(e)(
                  r,
                  t,
                  n,
                  o,
                  a,
                  i,
                  s,
                  c,
                  u,
                  l,
                  d,
                  f,
                  _,
                  m,
                  p,
                  S,
                  E
                );
              } catch (e) {
                if ((stackRestore(h), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiii(e, r, t, n, o, a) {
              var i = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a);
              } catch (e) {
                if ((stackRestore(i), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iid(e, r, t) {
              var n = stackSave();
              try {
                return getWasmTableEntry(e)(r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiiii(e, r, t, n, o, a, i, s) {
              var c = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a, i, s);
              } catch (e) {
                if ((stackRestore(c), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiii(e, r, t, n, o, a, i, s) {
              var c = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i, s);
              } catch (e) {
                if ((stackRestore(c), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_di(e, r) {
              var t = stackSave();
              try {
                return getWasmTableEntry(e)(r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiiiii(e, r, t, n, o, a, i, s, c, u) {
              var l = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i, s, c, u);
              } catch (e) {
                if ((stackRestore(l), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiid(e, r, t, n, o, a) {
              var i = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a);
              } catch (e) {
                if ((stackRestore(i), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_fiii(e, r, t, n) {
              var o = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_diii(e, r, t, n) {
              var o = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiiiiiii(e, r, t, n, o, a, i, s, c, u, l, d) {
              var f = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i, s, c, u, l, d);
              } catch (e) {
                if ((stackRestore(f), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiiiiiii(e, r, t, n, o, a, i, s, c, u, l) {
              var d = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a, i, s, c, u, l);
              } catch (e) {
                if ((stackRestore(d), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiiiiiiiiiiii(
              e,
              r,
              t,
              n,
              o,
              a,
              i,
              s,
              c,
              u,
              l,
              d,
              f,
              _,
              m,
              p
            ) {
              var S = stackSave();
              try {
                getWasmTableEntry(e)(
                  r,
                  t,
                  n,
                  o,
                  a,
                  i,
                  s,
                  c,
                  u,
                  l,
                  d,
                  f,
                  _,
                  m,
                  p
                );
              } catch (e) {
                if ((stackRestore(S), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_ji(e, r) {
              var t = stackSave();
              try {
                return dynCall_ji(e, r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vijji(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                dynCall_vijji(e, r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiji(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                dynCall_viiiji(e, r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viijii(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                dynCall_viijii(e, r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viijiiij(e, r, t, n, o, a, i, s, c, u) {
              var l = stackSave();
              try {
                dynCall_viijiiij(e, r, t, n, o, a, i, s, c, u);
              } catch (e) {
                if ((stackRestore(l), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vijiiij(e, r, t, n, o, a, i, s, c) {
              var u = stackSave();
              try {
                dynCall_vijiiij(e, r, t, n, o, a, i, s, c);
              } catch (e) {
                if ((stackRestore(u), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiiiij(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                return dynCall_jiiiij(e, r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viij(e, r, t, n, o) {
              var a = stackSave();
              try {
                dynCall_viij(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiji(e, r, t, n, o) {
              var a = stackSave();
              try {
                return dynCall_iiji(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiji(e, r, t, n, o) {
              var a = stackSave();
              try {
                return dynCall_jiji(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vijii(e, r, t, n, o, a) {
              var i = stackSave();
              try {
                dynCall_vijii(e, r, t, n, o, a);
              } catch (e) {
                if ((stackRestore(i), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viji(e, r, t, n, o) {
              var a = stackSave();
              try {
                dynCall_viji(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiijj(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                return dynCall_iiijj(e, r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iij(e, r, t, n) {
              var o = stackSave();
              try {
                return dynCall_iij(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiii(e, r, t, n) {
              var o = stackSave();
              try {
                return dynCall_jiii(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vij(e, r, t, n) {
              var o = stackSave();
              try {
                dynCall_vij(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iijiiii(e, r, t, n, o, a, i, s) {
              var c = stackSave();
              try {
                return dynCall_iijiiii(e, r, t, n, o, a, i, s);
              } catch (e) {
                if ((stackRestore(c), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_ij(e, r, t) {
              var n = stackSave();
              try {
                return dynCall_ij(e, r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiij(e, r, t, n, o, a, i, s) {
              var c = stackSave();
              try {
                dynCall_viiiiij(e, r, t, n, o, a, i, s);
              } catch (e) {
                if ((stackRestore(c), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vjii(e, r, t, n, o) {
              var a = stackSave();
              try {
                dynCall_vjii(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_j(e) {
              var r = stackSave();
              try {
                return dynCall_j(e);
              } catch (e) {
                if ((stackRestore(r), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiij(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                return dynCall_iiiiij(e, r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiiii(e, r, t, n, o) {
              var a = stackSave();
              try {
                return dynCall_jiiii(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function callMain(e) {
              var r = Module._main;
              (e = e || []).unshift(thisProgram);
              var t = e.length,
                n = stackAlloc(4 * (t + 1)),
                o = n >> 2;
              e.forEach((e) => {
                HEAP32[o++] = allocateUTF8OnStack(e);
              }),
                (HEAP32[o] = 0);
              try {
                var a = r(t, n);
                return exitJS(a, !0), a;
              } catch (e) {
                return handleException(e);
              }
            }
            function run(e) {
              function r() {
                calledRun ||
                  ((calledRun = !0),
                  (Module.calledRun = !0),
                  ABORT ||
                    (initRuntime(),
                    preMain(),
                    readyPromiseResolve(Module),
                    Module.onRuntimeInitialized &&
                      Module.onRuntimeInitialized(),
                    shouldRunNow && callMain(e),
                    postRun()));
              }
              (e = e || arguments_),
                runDependencies > 0 ||
                  (preRun(),
                  runDependencies > 0 ||
                    (Module.setStatus
                      ? (Module.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            Module.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
            }
            if (
              ((Module.ERRNO_CODES = ERRNO_CODES),
              (Module.allocateUTF8 = allocateUTF8),
              (Module.FS = FS),
              (Module.PROXYFS = PROXYFS),
              (dependenciesFulfilled = function e() {
                calledRun || run(), calledRun || (dependenciesFulfilled = e);
              }),
              Module.preInit)
            )
              for (
                "function" == typeof Module.preInit &&
                (Module.preInit = [Module.preInit]);
                Module.preInit.length > 0;

              )
                Module.preInit.pop()();
            var shouldRunNow = !0;
            return (
              Module.noInitialRun && (shouldRunNow = !1), run(), Module.ready
            );
          };
        })();
        const __WEBPACK_DEFAULT_EXPORT__ = Module;
      },
      2406: (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
          Z: () => __WEBPACK_DEFAULT_EXPORT__,
        });
        var Module = (() => {
          var _scriptDir =
            "file:///home/jprendes/Projects/emception/build/emception/brotli/brotli.mjs";
          return function (Module) {
            Module = Module || {};
            var Module = void 0 !== Module ? Module : {},
              readyPromiseResolve,
              readyPromiseReject;
            Module.ready = new Promise(function (e, r) {
              (readyPromiseResolve = e), (readyPromiseReject = r);
            });
            var moduleOverrides = Object.assign({}, Module),
              arguments_ = [],
              thisProgram = "./this.program",
              quit_ = (e, r) => {
                throw r;
              },
              ENVIRONMENT_IS_WEB = "object" == typeof window,
              ENVIRONMENT_IS_WORKER = "function" == typeof importScripts,
              ENVIRONMENT_IS_NODE =
                "object" == typeof process &&
                "object" == typeof process.versions &&
                "string" == typeof process.versions.node,
              scriptDirectory = "",
              read_,
              readAsync,
              readBinary,
              setWindowTitle,
              fs,
              nodePath;
            function locateFile(e) {
              return Module.locateFile
                ? Module.locateFile(e, scriptDirectory)
                : scriptDirectory + e;
            }
            function logExceptionOnExit(e) {
              e instanceof ExitStatus || err("exiting due to exception: " + e);
            }
            ENVIRONMENT_IS_NODE
              ? ((scriptDirectory = ENVIRONMENT_IS_WORKER
                  ? require("path").dirname(scriptDirectory) + "/"
                  : __dirname + "/"),
                "function" == typeof require &&
                  ((fs = require("fs")), (nodePath = require("path"))),
                (read_ = (e, r) => (
                  (e = nodePath.normalize(e)),
                  fs.readFileSync(e, r ? void 0 : "utf8")
                )),
                (readBinary = (e) => {
                  var r = read_(e, !0);
                  return r.buffer || (r = new Uint8Array(r)), r;
                }),
                (readAsync = (e, r, t) => {
                  (e = nodePath.normalize(e)),
                    fs.readFile(e, function (e, n) {
                      e ? t(e) : r(n.buffer);
                    });
                }),
                process.argv.length > 1 &&
                  (thisProgram = process.argv[1].replace(/\\/g, "/")),
                (arguments_ = process.argv.slice(2)),
                process.on("uncaughtException", function (e) {
                  if (!(e instanceof ExitStatus)) throw e;
                }),
                process.on("unhandledRejection", function (e) {
                  throw e;
                }),
                (quit_ = (e, r) => {
                  if (keepRuntimeAlive()) throw ((process.exitCode = e), r);
                  logExceptionOnExit(r), process.exit(e);
                }),
                (Module.inspect = function () {
                  return "[Emscripten Module object]";
                }))
              : (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) &&
                (ENVIRONMENT_IS_WORKER
                  ? (scriptDirectory = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (scriptDirectory = document.currentScript.src),
                _scriptDir && (scriptDirectory = _scriptDir),
                (scriptDirectory =
                  0 !== scriptDirectory.indexOf("blob:")
                    ? scriptDirectory.substr(
                        0,
                        scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") +
                          1
                      )
                    : ""),
                (read_ = (e) => {
                  var r = new XMLHttpRequest();
                  return r.open("GET", e, !1), r.send(null), r.responseText;
                }),
                ENVIRONMENT_IS_WORKER &&
                  (readBinary = (e) => {
                    var r = new XMLHttpRequest();
                    return (
                      r.open("GET", e, !1),
                      (r.responseType = "arraybuffer"),
                      r.send(null),
                      new Uint8Array(r.response)
                    );
                  }),
                (readAsync = (e, r, t) => {
                  var n = new XMLHttpRequest();
                  n.open("GET", e, !0),
                    (n.responseType = "arraybuffer"),
                    (n.onload = () => {
                      200 == n.status || (0 == n.status && n.response)
                        ? r(n.response)
                        : t();
                    }),
                    (n.onerror = t),
                    n.send(null);
                }),
                (setWindowTitle = (e) => (document.title = e)));
            var out = Module.print || console.log.bind(console),
              err = Module.printErr || console.warn.bind(console),
              wasmBinary;
            Object.assign(Module, moduleOverrides),
              (moduleOverrides = null),
              Module.arguments && (arguments_ = Module.arguments),
              Module.thisProgram && (thisProgram = Module.thisProgram),
              Module.quit && (quit_ = Module.quit),
              Module.wasmBinary && (wasmBinary = Module.wasmBinary);
            var noExitRuntime = Module.noExitRuntime || !0,
              wasmMemory;
            "object" != typeof WebAssembly &&
              abort("no native wasm support detected");
            var ABORT = !1,
              EXITSTATUS;
            function assert(e, r) {
              e || abort(r);
            }
            var UTF8Decoder =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0,
              buffer,
              HEAP8,
              HEAPU8,
              HEAP16,
              HEAPU16,
              HEAP32,
              HEAPU32,
              HEAPF32,
              HEAPF64;
            function UTF8ArrayToString(e, r, t) {
              for (var n = r + t, o = r; e[o] && !(o >= n); ) ++o;
              if (o - r > 16 && e.buffer && UTF8Decoder)
                return UTF8Decoder.decode(e.subarray(r, o));
              for (var a = ""; r < o; ) {
                var i = e[r++];
                if (128 & i) {
                  var s = 63 & e[r++];
                  if (192 != (224 & i)) {
                    var c = 63 & e[r++];
                    if (
                      (i =
                        224 == (240 & i)
                          ? ((15 & i) << 12) | (s << 6) | c
                          : ((7 & i) << 18) |
                            (s << 12) |
                            (c << 6) |
                            (63 & e[r++])) < 65536
                    )
                      a += String.fromCharCode(i);
                    else {
                      var u = i - 65536;
                      a += String.fromCharCode(
                        55296 | (u >> 10),
                        56320 | (1023 & u)
                      );
                    }
                  } else a += String.fromCharCode(((31 & i) << 6) | s);
                } else a += String.fromCharCode(i);
              }
              return a;
            }
            function UTF8ToString(e, r) {
              return e ? UTF8ArrayToString(HEAPU8, e, r) : "";
            }
            function stringToUTF8Array(e, r, t, n) {
              if (!(n > 0)) return 0;
              for (var o = t, a = t + n - 1, i = 0; i < e.length; ++i) {
                var s = e.charCodeAt(i);
                if (
                  (s >= 55296 &&
                    s <= 57343 &&
                    (s =
                      (65536 + ((1023 & s) << 10)) |
                      (1023 & e.charCodeAt(++i))),
                  s <= 127)
                ) {
                  if (t >= a) break;
                  r[t++] = s;
                } else if (s <= 2047) {
                  if (t + 1 >= a) break;
                  (r[t++] = 192 | (s >> 6)), (r[t++] = 128 | (63 & s));
                } else if (s <= 65535) {
                  if (t + 2 >= a) break;
                  (r[t++] = 224 | (s >> 12)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                } else {
                  if (t + 3 >= a) break;
                  (r[t++] = 240 | (s >> 18)),
                    (r[t++] = 128 | ((s >> 12) & 63)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                }
              }
              return (r[t] = 0), t - o;
            }
            function lengthBytesUTF8(e) {
              for (var r = 0, t = 0; t < e.length; ++t) {
                var n = e.charCodeAt(t);
                n <= 127
                  ? r++
                  : n <= 2047
                  ? (r += 2)
                  : n >= 55296 && n <= 57343
                  ? ((r += 4), ++t)
                  : (r += 3);
              }
              return r;
            }
            function updateGlobalBufferAndViews(e) {
              (buffer = e),
                (Module.HEAP8 = HEAP8 = new Int8Array(e)),
                (Module.HEAP16 = HEAP16 = new Int16Array(e)),
                (Module.HEAP32 = HEAP32 = new Int32Array(e)),
                (Module.HEAPU8 = HEAPU8 = new Uint8Array(e)),
                (Module.HEAPU16 = HEAPU16 = new Uint16Array(e)),
                (Module.HEAPU32 = HEAPU32 = new Uint32Array(e)),
                (Module.HEAPF32 = HEAPF32 = new Float32Array(e)),
                (Module.HEAPF64 = HEAPF64 = new Float64Array(e));
            }
            var INITIAL_MEMORY = Module.INITIAL_MEMORY || 16777216,
              wasmTable,
              __ATPRERUN__ = [],
              __ATINIT__ = [],
              __ATMAIN__ = [],
              __ATPOSTRUN__ = [],
              runtimeInitialized = !1;
            function keepRuntimeAlive() {
              return noExitRuntime;
            }
            function preRun() {
              if (Module.preRun)
                for (
                  "function" == typeof Module.preRun &&
                  (Module.preRun = [Module.preRun]);
                  Module.preRun.length;

                )
                  addOnPreRun(Module.preRun.shift());
              callRuntimeCallbacks(__ATPRERUN__);
            }
            function initRuntime() {
              (runtimeInitialized = !0),
                Module.noFSInit || FS.init.initialized || FS.init(),
                (FS.ignorePermissions = !1),
                TTY.init(),
                callRuntimeCallbacks(__ATINIT__);
            }
            function preMain() {
              callRuntimeCallbacks(__ATMAIN__);
            }
            function postRun() {
              if (Module.postRun)
                for (
                  "function" == typeof Module.postRun &&
                  (Module.postRun = [Module.postRun]);
                  Module.postRun.length;

                )
                  addOnPostRun(Module.postRun.shift());
              callRuntimeCallbacks(__ATPOSTRUN__);
            }
            function addOnPreRun(e) {
              __ATPRERUN__.unshift(e);
            }
            function addOnInit(e) {
              __ATINIT__.unshift(e);
            }
            function addOnPostRun(e) {
              __ATPOSTRUN__.unshift(e);
            }
            var runDependencies = 0,
              runDependencyWatcher = null,
              dependenciesFulfilled = null;
            function getUniqueRunDependency(e) {
              return e;
            }
            function addRunDependency(e) {
              runDependencies++,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies);
            }
            function removeRunDependency(e) {
              if (
                (runDependencies--,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies),
                0 == runDependencies &&
                  (null !== runDependencyWatcher &&
                    (clearInterval(runDependencyWatcher),
                    (runDependencyWatcher = null)),
                  dependenciesFulfilled))
              ) {
                var r = dependenciesFulfilled;
                (dependenciesFulfilled = null), r();
              }
            }
            function abort(e) {
              Module.onAbort && Module.onAbort(e),
                err((e = "Aborted(" + e + ")")),
                (ABORT = !0),
                (EXITSTATUS = 1),
                (e += ". Build with -sASSERTIONS for more info.");
              var r = new WebAssembly.RuntimeError(e);
              throw (readyPromiseReject(r), r);
            }
            var dataURIPrefix = "data:application/octet-stream;base64,",
              wasmBinaryFile,
              tempDouble,
              tempI64;
            function isDataURI(e) {
              return e.startsWith(dataURIPrefix);
            }
            function isFileURI(e) {
              return e.startsWith("file://");
            }
            function getBinary(e) {
              try {
                if (e == wasmBinaryFile && wasmBinary)
                  return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(e);
                throw "both async and sync fetching of the wasm failed";
              } catch (e) {
                abort(e);
              }
            }
            function getBinaryPromise() {
              if (
                !wasmBinary &&
                (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)
              ) {
                if ("function" == typeof fetch && !isFileURI(wasmBinaryFile))
                  return fetch(wasmBinaryFile, { credentials: "same-origin" })
                    .then(function (e) {
                      if (!e.ok)
                        throw (
                          "failed to load wasm binary file at '" +
                          wasmBinaryFile +
                          "'"
                        );
                      return e.arrayBuffer();
                    })
                    .catch(function () {
                      return getBinary(wasmBinaryFile);
                    });
                if (readAsync)
                  return new Promise(function (e, r) {
                    readAsync(
                      wasmBinaryFile,
                      function (r) {
                        e(new Uint8Array(r));
                      },
                      r
                    );
                  });
              }
              return Promise.resolve().then(function () {
                return getBinary(wasmBinaryFile);
              });
            }
            function createWasm() {
              var e = { a: asmLibraryArg };
              function r(e, r) {
                var t = e.exports;
                (Module.asm = t),
                  updateGlobalBufferAndViews(
                    (wasmMemory = Module.asm.r).buffer
                  ),
                  (wasmTable = Module.asm.x),
                  addOnInit(Module.asm.s),
                  removeRunDependency("wasm-instantiate");
              }
              function t(e) {
                r(e.instance);
              }
              function n(r) {
                return getBinaryPromise()
                  .then(function (r) {
                    return WebAssembly.instantiate(r, e);
                  })
                  .then(function (e) {
                    return e;
                  })
                  .then(r, function (e) {
                    err("failed to asynchronously prepare wasm: " + e),
                      abort(e);
                  });
              }
              if (
                (addRunDependency("wasm-instantiate"), Module.instantiateWasm)
              )
                try {
                  return Module.instantiateWasm(e, r);
                } catch (e) {
                  err(
                    "Module.instantiateWasm callback failed with error: " + e
                  ),
                    readyPromiseReject(e);
                }
              return (
                (wasmBinary ||
                "function" != typeof WebAssembly.instantiateStreaming ||
                isDataURI(wasmBinaryFile) ||
                isFileURI(wasmBinaryFile) ||
                ENVIRONMENT_IS_NODE ||
                "function" != typeof fetch
                  ? n(t)
                  : fetch(wasmBinaryFile, { credentials: "same-origin" }).then(
                      function (r) {
                        return WebAssembly.instantiateStreaming(r, e).then(
                          t,
                          function (e) {
                            return (
                              err("wasm streaming compile failed: " + e),
                              err("falling back to ArrayBuffer instantiation"),
                              n(t)
                            );
                          }
                        );
                      }
                    )
                ).catch(readyPromiseReject),
                {}
              );
            }
            function ExitStatus(e) {
              (this.name = "ExitStatus"),
                (this.message = "Program terminated with exit(" + e + ")"),
                (this.status = e);
            }
            function callRuntimeCallbacks(e) {
              for (; e.length > 0; ) e.shift()(Module);
            }
            Module.locateFile
              ? ((wasmBinaryFile = "brotli.wasm"),
                isDataURI(wasmBinaryFile) ||
                  (wasmBinaryFile = locateFile(wasmBinaryFile)))
              : (wasmBinaryFile = new URL(
                  __webpack_require__(7911),
                  __webpack_require__.b
                ).toString());
            var PATH = {
              isAbs: (e) => "/" === e.charAt(0),
              splitPath: (e) =>
                /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                  .exec(e)
                  .slice(1),
              normalizeArray: (e, r) => {
                for (var t = 0, n = e.length - 1; n >= 0; n--) {
                  var o = e[n];
                  "." === o
                    ? e.splice(n, 1)
                    : ".." === o
                    ? (e.splice(n, 1), t++)
                    : t && (e.splice(n, 1), t--);
                }
                if (r) for (; t; t--) e.unshift("..");
                return e;
              },
              normalize: (e) => {
                var r = PATH.isAbs(e),
                  t = "/" === e.substr(-1);
                return (
                  (e = PATH.normalizeArray(
                    e.split("/").filter((e) => !!e),
                    !r
                  ).join("/")) ||
                    r ||
                    (e = "."),
                  e && t && (e += "/"),
                  (r ? "/" : "") + e
                );
              },
              dirname: (e) => {
                var r = PATH.splitPath(e),
                  t = r[0],
                  n = r[1];
                return t || n
                  ? (n && (n = n.substr(0, n.length - 1)), t + n)
                  : ".";
              },
              basename: (e) => {
                if ("/" === e) return "/";
                var r = (e = (e = PATH.normalize(e)).replace(
                  /\/$/,
                  ""
                )).lastIndexOf("/");
                return -1 === r ? e : e.substr(r + 1);
              },
              join: function () {
                var e = Array.prototype.slice.call(arguments);
                return PATH.normalize(e.join("/"));
              },
              join2: (e, r) => PATH.normalize(e + "/" + r),
            };
            function getRandomDevice() {
              if (
                "object" == typeof crypto &&
                "function" == typeof crypto.getRandomValues
              ) {
                var e = new Uint8Array(1);
                return () => (crypto.getRandomValues(e), e[0]);
              }
              if (ENVIRONMENT_IS_NODE)
                try {
                  var r = require("crypto");
                  return () => r.randomBytes(1)[0];
                } catch (e) {}
              return () => abort("randomDevice");
            }
            var PATH_FS = {
              resolve: function () {
                for (
                  var e = "", r = !1, t = arguments.length - 1;
                  t >= -1 && !r;
                  t--
                ) {
                  var n = t >= 0 ? arguments[t] : FS.cwd();
                  if ("string" != typeof n)
                    throw new TypeError(
                      "Arguments to path.resolve must be strings"
                    );
                  if (!n) return "";
                  (e = n + "/" + e), (r = PATH.isAbs(n));
                }
                return (
                  (r ? "/" : "") +
                    (e = PATH.normalizeArray(
                      e.split("/").filter((e) => !!e),
                      !r
                    ).join("/")) || "."
                );
              },
              relative: (e, r) => {
                function t(e) {
                  for (var r = 0; r < e.length && "" === e[r]; r++);
                  for (var t = e.length - 1; t >= 0 && "" === e[t]; t--);
                  return r > t ? [] : e.slice(r, t - r + 1);
                }
                (e = PATH_FS.resolve(e).substr(1)),
                  (r = PATH_FS.resolve(r).substr(1));
                for (
                  var n = t(e.split("/")),
                    o = t(r.split("/")),
                    a = Math.min(n.length, o.length),
                    i = a,
                    s = 0;
                  s < a;
                  s++
                )
                  if (n[s] !== o[s]) {
                    i = s;
                    break;
                  }
                var c = [];
                for (s = i; s < n.length; s++) c.push("..");
                return (c = c.concat(o.slice(i))).join("/");
              },
            };
            function intArrayFromString(e, r, t) {
              var n = t > 0 ? t : lengthBytesUTF8(e) + 1,
                o = new Array(n),
                a = stringToUTF8Array(e, o, 0, o.length);
              return r && (o.length = a), o;
            }
            var TTY = {
              ttys: [],
              init: function () {},
              shutdown: function () {},
              register: function (e, r) {
                (TTY.ttys[e] = { input: [], output: [], ops: r }),
                  FS.registerDevice(e, TTY.stream_ops);
              },
              stream_ops: {
                open: function (e) {
                  var r = TTY.ttys[e.node.rdev];
                  if (!r) throw new FS.ErrnoError(43);
                  (e.tty = r), (e.seekable = !1);
                },
                close: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                fsync: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                read: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.get_char)
                    throw new FS.ErrnoError(60);
                  for (var a = 0, i = 0; i < n; i++) {
                    var s;
                    try {
                      s = e.tty.ops.get_char(e.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (void 0 === s && 0 === a) throw new FS.ErrnoError(6);
                    if (null == s) break;
                    a++, (r[t + i] = s);
                  }
                  return a && (e.node.timestamp = Date.now()), a;
                },
                write: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.put_char)
                    throw new FS.ErrnoError(60);
                  try {
                    for (var a = 0; a < n; a++)
                      e.tty.ops.put_char(e.tty, r[t + a]);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  return n && (e.node.timestamp = Date.now()), a;
                },
              },
              default_tty_ops: {
                get_char: function (e) {
                  if (!e.input.length) {
                    var r = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var t = Buffer.alloc(256),
                        n = 0;
                      try {
                        n = fs.readSync(process.stdin.fd, t, 0, 256, -1);
                      } catch (e) {
                        if (!e.toString().includes("EOF")) throw e;
                        n = 0;
                      }
                      r = n > 0 ? t.slice(0, n).toString("utf-8") : null;
                    } else
                      "undefined" != typeof window &&
                      "function" == typeof window.prompt
                        ? null !== (r = window.prompt("Input: ")) && (r += "\n")
                        : "function" == typeof readline &&
                          null !== (r = readline()) &&
                          (r += "\n");
                    if (!r) return null;
                    e.input = intArrayFromString(r, !0);
                  }
                  return e.input.shift();
                },
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (out(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (out(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
              default_tty1_ops: {
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (err(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (err(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
            };
            function mmapAlloc(e) {
              abort();
            }
            var MEMFS = {
              ops_table: null,
              mount: function (e) {
                return MEMFS.createNode(null, "/", 16895, 0);
              },
              createNode: function (e, r, t, n) {
                if (FS.isBlkdev(t) || FS.isFIFO(t)) throw new FS.ErrnoError(63);
                MEMFS.ops_table ||
                  (MEMFS.ops_table = {
                    dir: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink,
                      },
                      stream: { llseek: MEMFS.stream_ops.llseek },
                    },
                    file: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync,
                      },
                    },
                    link: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink,
                      },
                      stream: {},
                    },
                    chrdev: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: FS.chrdev_stream_ops,
                    },
                  });
                var o = FS.createNode(e, r, t, n);
                return (
                  FS.isDir(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.dir.node),
                      (o.stream_ops = MEMFS.ops_table.dir.stream),
                      (o.contents = {}))
                    : FS.isFile(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.file.node),
                      (o.stream_ops = MEMFS.ops_table.file.stream),
                      (o.usedBytes = 0),
                      (o.contents = null))
                    : FS.isLink(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.link.node),
                      (o.stream_ops = MEMFS.ops_table.link.stream))
                    : FS.isChrdev(o.mode) &&
                      ((o.node_ops = MEMFS.ops_table.chrdev.node),
                      (o.stream_ops = MEMFS.ops_table.chrdev.stream)),
                  (o.timestamp = Date.now()),
                  e && ((e.contents[r] = o), (e.timestamp = o.timestamp)),
                  o
                );
              },
              getFileDataAsTypedArray: function (e) {
                return e.contents
                  ? e.contents.subarray
                    ? e.contents.subarray(0, e.usedBytes)
                    : new Uint8Array(e.contents)
                  : new Uint8Array(0);
              },
              expandFileStorage: function (e, r) {
                var t = e.contents ? e.contents.length : 0;
                if (!(t >= r)) {
                  (r = Math.max(r, (t * (t < 1048576 ? 2 : 1.125)) >>> 0)),
                    0 != t && (r = Math.max(r, 256));
                  var n = e.contents;
                  (e.contents = new Uint8Array(r)),
                    e.usedBytes > 0 &&
                      e.contents.set(n.subarray(0, e.usedBytes), 0);
                }
              },
              resizeFileStorage: function (e, r) {
                if (e.usedBytes != r)
                  if (0 == r) (e.contents = null), (e.usedBytes = 0);
                  else {
                    var t = e.contents;
                    (e.contents = new Uint8Array(r)),
                      t &&
                        e.contents.set(t.subarray(0, Math.min(r, e.usedBytes))),
                      (e.usedBytes = r);
                  }
              },
              node_ops: {
                getattr: function (e) {
                  var r = {};
                  return (
                    (r.dev = FS.isChrdev(e.mode) ? e.id : 1),
                    (r.ino = e.id),
                    (r.mode = e.mode),
                    (r.nlink = 1),
                    (r.uid = 0),
                    (r.gid = 0),
                    (r.rdev = e.rdev),
                    FS.isDir(e.mode)
                      ? (r.size = 4096)
                      : FS.isFile(e.mode)
                      ? (r.size = e.usedBytes)
                      : FS.isLink(e.mode)
                      ? (r.size = e.link.length)
                      : (r.size = 0),
                    (r.atime = new Date(e.timestamp)),
                    (r.mtime = new Date(e.timestamp)),
                    (r.ctime = new Date(e.timestamp)),
                    (r.blksize = 4096),
                    (r.blocks = Math.ceil(r.size / r.blksize)),
                    r
                  );
                },
                setattr: function (e, r) {
                  void 0 !== r.mode && (e.mode = r.mode),
                    void 0 !== r.timestamp && (e.timestamp = r.timestamp),
                    void 0 !== r.size && MEMFS.resizeFileStorage(e, r.size);
                },
                lookup: function (e, r) {
                  throw FS.genericErrors[44];
                },
                mknod: function (e, r, t, n) {
                  return MEMFS.createNode(e, r, t, n);
                },
                rename: function (e, r, t) {
                  if (FS.isDir(e.mode)) {
                    var n;
                    try {
                      n = FS.lookupNode(r, t);
                    } catch (e) {}
                    if (n)
                      for (var o in n.contents) throw new FS.ErrnoError(55);
                  }
                  delete e.parent.contents[e.name],
                    (e.parent.timestamp = Date.now()),
                    (e.name = t),
                    (r.contents[t] = e),
                    (r.timestamp = e.parent.timestamp),
                    (e.parent = r);
                },
                unlink: function (e, r) {
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                rmdir: function (e, r) {
                  var t = FS.lookupNode(e, r);
                  for (var n in t.contents) throw new FS.ErrnoError(55);
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                readdir: function (e) {
                  var r = [".", ".."];
                  for (var t in e.contents)
                    e.contents.hasOwnProperty(t) && r.push(t);
                  return r;
                },
                symlink: function (e, r, t) {
                  var n = MEMFS.createNode(e, r, 41471, 0);
                  return (n.link = t), n;
                },
                readlink: function (e) {
                  if (!FS.isLink(e.mode)) throw new FS.ErrnoError(28);
                  return e.link;
                },
              },
              stream_ops: {
                read: function (e, r, t, n, o) {
                  var a = e.node.contents;
                  if (o >= e.node.usedBytes) return 0;
                  var i = Math.min(e.node.usedBytes - o, n);
                  if (i > 8 && a.subarray) r.set(a.subarray(o, o + i), t);
                  else for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                  return i;
                },
                write: function (e, r, t, n, o, a) {
                  if ((r.buffer === HEAP8.buffer && (a = !1), !n)) return 0;
                  var i = e.node;
                  if (
                    ((i.timestamp = Date.now()),
                    r.subarray && (!i.contents || i.contents.subarray))
                  ) {
                    if (a)
                      return (
                        (i.contents = r.subarray(t, t + n)),
                        (i.usedBytes = n),
                        n
                      );
                    if (0 === i.usedBytes && 0 === o)
                      return (
                        (i.contents = r.slice(t, t + n)), (i.usedBytes = n), n
                      );
                    if (o + n <= i.usedBytes)
                      return i.contents.set(r.subarray(t, t + n), o), n;
                  }
                  if (
                    (MEMFS.expandFileStorage(i, o + n),
                    i.contents.subarray && r.subarray)
                  )
                    i.contents.set(r.subarray(t, t + n), o);
                  else for (var s = 0; s < n; s++) i.contents[o + s] = r[t + s];
                  return (i.usedBytes = Math.max(i.usedBytes, o + n)), n;
                },
                llseek: function (e, r, t) {
                  var n = r;
                  if (
                    (1 === t
                      ? (n += e.position)
                      : 2 === t &&
                        FS.isFile(e.node.mode) &&
                        (n += e.node.usedBytes),
                    n < 0)
                  )
                    throw new FS.ErrnoError(28);
                  return n;
                },
                allocate: function (e, r, t) {
                  MEMFS.expandFileStorage(e.node, r + t),
                    (e.node.usedBytes = Math.max(e.node.usedBytes, r + t));
                },
                mmap: function (e, r, t, n, o) {
                  if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);
                  var a,
                    i,
                    s = e.node.contents;
                  if (2 & o || s.buffer !== buffer) {
                    if (
                      ((t > 0 || t + r < s.length) &&
                        (s = s.subarray
                          ? s.subarray(t, t + r)
                          : Array.prototype.slice.call(s, t, t + r)),
                      (i = !0),
                      !(a = mmapAlloc(r)))
                    )
                      throw new FS.ErrnoError(48);
                    HEAP8.set(s, a);
                  } else (i = !1), (a = s.byteOffset);
                  return { ptr: a, allocated: i };
                },
                msync: function (e, r, t, n, o) {
                  return MEMFS.stream_ops.write(e, r, 0, n, t, !1), 0;
                },
              },
            };
            function asyncLoad(e, r, t, n) {
              var o = n ? "" : getUniqueRunDependency("al " + e);
              readAsync(
                e,
                (t) => {
                  assert(
                    t,
                    'Loading data file "' + e + '" failed (no arrayBuffer).'
                  ),
                    r(new Uint8Array(t)),
                    o && removeRunDependency(o);
                },
                (r) => {
                  if (!t) throw 'Loading data file "' + e + '" failed.';
                  t();
                }
              ),
                o && addRunDependency(o);
            }
            var ERRNO_CODES = {},
              PROXYFS = {
                mount: function (e) {
                  return PROXYFS.createNode(
                    null,
                    "/",
                    e.opts.fs.lstat(e.opts.root).mode,
                    0
                  );
                },
                createNode: function (e, r, t, n) {
                  if (!FS.isDir(t) && !FS.isFile(t) && !FS.isLink(t))
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                  var o = FS.createNode(e, r, t);
                  return (
                    (o.node_ops = PROXYFS.node_ops),
                    (o.stream_ops = PROXYFS.stream_ops),
                    o
                  );
                },
                realPath: function (e) {
                  for (var r = []; e.parent !== e; )
                    r.push(e.name), (e = e.parent);
                  return (
                    r.push(e.mount.opts.root),
                    r.reverse(),
                    PATH.join.apply(null, r)
                  );
                },
                node_ops: {
                  getattr: function (e) {
                    var r,
                      t = PROXYFS.realPath(e);
                    try {
                      r = e.mount.opts.fs.lstat(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return {
                      dev: r.dev,
                      ino: r.ino,
                      mode: r.mode,
                      nlink: r.nlink,
                      uid: r.uid,
                      gid: r.gid,
                      rdev: r.rdev,
                      size: r.size,
                      atime: r.atime,
                      mtime: r.mtime,
                      ctime: r.ctime,
                      blksize: r.blksize,
                      blocks: r.blocks,
                    };
                  },
                  setattr: function (e, r) {
                    var t = PROXYFS.realPath(e);
                    try {
                      if (
                        (void 0 !== r.mode &&
                          (e.mount.opts.fs.chmod(t, r.mode), (e.mode = r.mode)),
                        void 0 !== r.timestamp)
                      ) {
                        var n = new Date(r.timestamp);
                        e.mount.opts.fs.utime(t, n, n);
                      }
                      void 0 !== r.size && e.mount.opts.fs.truncate(t, r.size);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  lookup: function (e, r) {
                    try {
                      var t = PATH.join2(PROXYFS.realPath(e), r),
                        n = e.mount.opts.fs.lstat(t).mode;
                      return PROXYFS.createNode(e, r, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  mknod: function (e, r, t, n) {
                    var o = PROXYFS.createNode(e, r, t, n),
                      a = PROXYFS.realPath(o);
                    try {
                      FS.isDir(o.mode)
                        ? o.mount.opts.fs.mkdir(a, o.mode)
                        : o.mount.opts.fs.writeFile(a, "", { mode: o.mode });
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return o;
                  },
                  rename: function (e, r, t) {
                    var n = PROXYFS.realPath(e),
                      o = PATH.join2(PROXYFS.realPath(r), t);
                    try {
                      e.mount.opts.fs.rename(n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  unlink: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.unlink(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  rmdir: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.rmdir(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readdir: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readdir(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  symlink: function (e, r, t) {
                    var n = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.symlink(t, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readlink: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readlink(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                },
                stream_ops: {
                  open: function (e) {
                    var r = PROXYFS.realPath(e.node);
                    try {
                      e.nfd = e.node.mount.opts.fs.open(r, e.flags);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  close: function (e) {
                    try {
                      e.node.mount.opts.fs.close(e.nfd);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  read: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.read(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  write: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.write(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  llseek: function (e, r, t) {
                    var n = r;
                    if (1 === t) n += e.position;
                    else if (2 === t && FS.isFile(e.node.mode))
                      try {
                        n += e.node.node_ops.getattr(e.node).size;
                      } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                      }
                    if (n < 0) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                    return n;
                  },
                },
              },
              FS = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, r = {}) => {
                  if (!(e = PATH_FS.resolve(FS.cwd(), e)))
                    return { path: "", node: null };
                  if (
                    (r = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      r
                    )).recurse_count > 8
                  )
                    throw new FS.ErrnoError(32);
                  for (
                    var t = PATH.normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !1
                      ),
                      n = FS.root,
                      o = "/",
                      a = 0;
                    a < t.length;
                    a++
                  ) {
                    var i = a === t.length - 1;
                    if (i && r.parent) break;
                    if (
                      ((n = FS.lookupNode(n, t[a])),
                      (o = PATH.join2(o, t[a])),
                      FS.isMountpoint(n) &&
                        (!i || (i && r.follow_mount)) &&
                        (n = n.mounted.root),
                      !i || r.follow)
                    )
                      for (var s = 0; FS.isLink(n.mode); ) {
                        var c = FS.readlink(o);
                        if (
                          ((o = PATH_FS.resolve(PATH.dirname(o), c)),
                          (n = FS.lookupPath(o, {
                            recurse_count: r.recurse_count + 1,
                          }).node),
                          s++ > 40)
                        )
                          throw new FS.ErrnoError(32);
                      }
                  }
                  return { path: o, node: n };
                },
                getPath: (e) => {
                  for (var r; ; ) {
                    if (FS.isRoot(e)) {
                      var t = e.mount.mountpoint;
                      return r
                        ? "/" !== t[t.length - 1]
                          ? t + "/" + r
                          : t + r
                        : t;
                    }
                    (r = r ? e.name + "/" + r : e.name), (e = e.parent);
                  }
                },
                hashName: (e, r) => {
                  for (var t = 0, n = 0; n < r.length; n++)
                    t = ((t << 5) - t + r.charCodeAt(n)) | 0;
                  return ((e + t) >>> 0) % FS.nameTable.length;
                },
                hashAddNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  (e.name_next = FS.nameTable[r]), (FS.nameTable[r] = e);
                },
                hashRemoveNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  if (FS.nameTable[r] === e) FS.nameTable[r] = e.name_next;
                  else
                    for (var t = FS.nameTable[r]; t; ) {
                      if (t.name_next === e) {
                        t.name_next = e.name_next;
                        break;
                      }
                      t = t.name_next;
                    }
                },
                lookupNode: (e, r) => {
                  var t = FS.mayLookup(e);
                  if (t) throw new FS.ErrnoError(t, e);
                  for (
                    var n = FS.hashName(e.id, r), o = FS.nameTable[n];
                    o;
                    o = o.name_next
                  ) {
                    var a = o.name;
                    if (o.parent.id === e.id && a === r) return o;
                  }
                  return FS.lookup(e, r);
                },
                createNode: (e, r, t, n) => {
                  var o = new FS.FSNode(e, r, t, n);
                  return FS.hashAddNode(o), o;
                },
                destroyNode: (e) => {
                  FS.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagModes: {
                  r: 0,
                  "r+": 2,
                  w: 577,
                  "w+": 578,
                  a: 1089,
                  "a+": 1090,
                },
                modeStringToFlags: (e) => {
                  var r = FS.flagModes[e];
                  if (void 0 === r)
                    throw new Error("Unknown file open mode: " + e);
                  return r;
                },
                flagsToPermissionString: (e) => {
                  var r = ["r", "w", "rw"][3 & e];
                  return 512 & e && (r += "w"), r;
                },
                nodePermissions: (e, r) =>
                  FS.ignorePermissions ||
                  ((!r.includes("r") || 292 & e.mode) &&
                    (!r.includes("w") || 146 & e.mode) &&
                    (!r.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  FS.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, r) => {
                  try {
                    return FS.lookupNode(e, r), 20;
                  } catch (e) {}
                  return FS.nodePermissions(e, "wx");
                },
                mayDelete: (e, r, t) => {
                  var n;
                  try {
                    n = FS.lookupNode(e, r);
                  } catch (e) {
                    return e.errno;
                  }
                  var o = FS.nodePermissions(e, "wx");
                  if (o) return o;
                  if (t) {
                    if (!FS.isDir(n.mode)) return 54;
                    if (FS.isRoot(n) || FS.getPath(n) === FS.cwd()) return 10;
                  } else if (FS.isDir(n.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, r) =>
                  e
                    ? FS.isLink(e.mode)
                      ? 32
                      : FS.isDir(e.mode) &&
                        ("r" !== FS.flagsToPermissionString(r) || 512 & r)
                      ? 31
                      : FS.nodePermissions(e, FS.flagsToPermissionString(r))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: (e = 0, r = FS.MAX_OPEN_FDS) => {
                  for (var t = e; t <= r; t++) if (!FS.streams[t]) return t;
                  throw new FS.ErrnoError(33);
                },
                getStream: (e) => FS.streams[e],
                createStream: (e, r, t) => {
                  FS.FSStream ||
                    ((FS.FSStream = function () {
                      this.shared = {};
                    }),
                    (FS.FSStream.prototype = {}),
                    Object.defineProperties(FS.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                    (e = Object.assign(new FS.FSStream(), e));
                  var n = FS.nextfd(r, t);
                  return (e.fd = n), (FS.streams[n] = e), e;
                },
                closeStream: (e) => {
                  FS.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var r = FS.getDevice(e.node.rdev);
                    (e.stream_ops = r.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new FS.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, r) => (e << 8) | r,
                registerDevice: (e, r) => {
                  FS.devices[e] = { stream_ops: r };
                },
                getDevice: (e) => FS.devices[e],
                getMounts: (e) => {
                  for (var r = [], t = [e]; t.length; ) {
                    var n = t.pop();
                    r.push(n), t.push.apply(t, n.mounts);
                  }
                  return r;
                },
                syncfs: (e, r) => {
                  "function" == typeof e && ((r = e), (e = !1)),
                    FS.syncFSRequests++,
                    FS.syncFSRequests > 1 &&
                      err(
                        "warning: " +
                          FS.syncFSRequests +
                          " FS.syncfs operations in flight at once, probably just doing extra work"
                      );
                  var t = FS.getMounts(FS.root.mount),
                    n = 0;
                  function o(e) {
                    return FS.syncFSRequests--, r(e);
                  }
                  function a(e) {
                    if (e) return a.errored ? void 0 : ((a.errored = !0), o(e));
                    ++n >= t.length && o(null);
                  }
                  t.forEach((r) => {
                    if (!r.type.syncfs) return a(null);
                    r.type.syncfs(r, e, a);
                  });
                },
                mount: (e, r, t) => {
                  var n,
                    o = "/" === t,
                    a = !t;
                  if (o && FS.root) throw new FS.ErrnoError(10);
                  if (!o && !a) {
                    var i = FS.lookupPath(t, { follow_mount: !1 });
                    if (((t = i.path), (n = i.node), FS.isMountpoint(n)))
                      throw new FS.ErrnoError(10);
                    if (!FS.isDir(n.mode)) throw new FS.ErrnoError(54);
                  }
                  var s = { type: e, opts: r, mountpoint: t, mounts: [] },
                    c = e.mount(s);
                  return (
                    (c.mount = s),
                    (s.root = c),
                    o
                      ? (FS.root = c)
                      : n &&
                        ((n.mounted = s), n.mount && n.mount.mounts.push(s)),
                    c
                  );
                },
                unmount: (e) => {
                  var r = FS.lookupPath(e, { follow_mount: !1 });
                  if (!FS.isMountpoint(r.node)) throw new FS.ErrnoError(28);
                  var t = r.node,
                    n = t.mounted,
                    o = FS.getMounts(n);
                  Object.keys(FS.nameTable).forEach((e) => {
                    for (var r = FS.nameTable[e]; r; ) {
                      var t = r.name_next;
                      o.includes(r.mount) && FS.destroyNode(r), (r = t);
                    }
                  }),
                    (t.mounted = null);
                  var a = t.mount.mounts.indexOf(n);
                  t.mount.mounts.splice(a, 1);
                },
                lookup: (e, r) => e.node_ops.lookup(e, r),
                mknod: (e, r, t) => {
                  var n = FS.lookupPath(e, { parent: !0 }).node,
                    o = PATH.basename(e);
                  if (!o || "." === o || ".." === o)
                    throw new FS.ErrnoError(28);
                  var a = FS.mayCreate(n, o);
                  if (a) throw new FS.ErrnoError(a);
                  if (!n.node_ops.mknod) throw new FS.ErrnoError(63);
                  return n.node_ops.mknod(n, o, r, t);
                },
                create: (e, r) => (
                  (r = void 0 !== r ? r : 438),
                  (r &= 4095),
                  (r |= 32768),
                  FS.mknod(e, r, 0)
                ),
                mkdir: (e, r) => (
                  (r = void 0 !== r ? r : 511),
                  (r &= 1023),
                  (r |= 16384),
                  FS.mknod(e, r, 0)
                ),
                mkdirTree: (e, r) => {
                  for (var t = e.split("/"), n = "", o = 0; o < t.length; ++o)
                    if (t[o]) {
                      n += "/" + t[o];
                      try {
                        FS.mkdir(n, r);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, r, t) => (
                  void 0 === t && ((t = r), (r = 438)),
                  (r |= 8192),
                  FS.mknod(e, r, t)
                ),
                symlink: (e, r) => {
                  if (!PATH_FS.resolve(e)) throw new FS.ErrnoError(44);
                  var t = FS.lookupPath(r, { parent: !0 }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  var n = PATH.basename(r),
                    o = FS.mayCreate(t, n);
                  if (o) throw new FS.ErrnoError(o);
                  if (!t.node_ops.symlink) throw new FS.ErrnoError(63);
                  return t.node_ops.symlink(t, n, e);
                },
                rename: (e, r) => {
                  var t,
                    n,
                    o = PATH.dirname(e),
                    a = PATH.dirname(r),
                    i = PATH.basename(e),
                    s = PATH.basename(r);
                  if (
                    ((t = FS.lookupPath(e, { parent: !0 }).node),
                    (n = FS.lookupPath(r, { parent: !0 }).node),
                    !t || !n)
                  )
                    throw new FS.ErrnoError(44);
                  if (t.mount !== n.mount) throw new FS.ErrnoError(75);
                  var c,
                    u = FS.lookupNode(t, i),
                    l = PATH_FS.relative(e, a);
                  if ("." !== l.charAt(0)) throw new FS.ErrnoError(28);
                  if ("." !== (l = PATH_FS.relative(r, o)).charAt(0))
                    throw new FS.ErrnoError(55);
                  try {
                    c = FS.lookupNode(n, s);
                  } catch (e) {}
                  if (u !== c) {
                    var d = FS.isDir(u.mode),
                      f = FS.mayDelete(t, i, d);
                    if (f) throw new FS.ErrnoError(f);
                    if ((f = c ? FS.mayDelete(n, s, d) : FS.mayCreate(n, s)))
                      throw new FS.ErrnoError(f);
                    if (!t.node_ops.rename) throw new FS.ErrnoError(63);
                    if (FS.isMountpoint(u) || (c && FS.isMountpoint(c)))
                      throw new FS.ErrnoError(10);
                    if (n !== t && (f = FS.nodePermissions(t, "w")))
                      throw new FS.ErrnoError(f);
                    FS.hashRemoveNode(u);
                    try {
                      t.node_ops.rename(u, n, s);
                    } catch (e) {
                      throw e;
                    } finally {
                      FS.hashAddNode(u);
                    }
                  }
                },
                rmdir: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node,
                    t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !0);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.rmdir) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.rmdir(r, t), FS.destroyNode(n);
                },
                readdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 }).node;
                  if (!r.node_ops.readdir) throw new FS.ErrnoError(54);
                  return r.node_ops.readdir(r);
                },
                unlink: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node;
                  if (!r) throw new FS.ErrnoError(44);
                  var t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !1);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.unlink) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.unlink(r, t), FS.destroyNode(n);
                },
                readlink: (e) => {
                  var r = FS.lookupPath(e).node;
                  if (!r) throw new FS.ErrnoError(44);
                  if (!r.node_ops.readlink) throw new FS.ErrnoError(28);
                  return PATH_FS.resolve(
                    FS.getPath(r.parent),
                    r.node_ops.readlink(r)
                  );
                },
                stat: (e, r) => {
                  var t = FS.lookupPath(e, { follow: !r }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  if (!t.node_ops.getattr) throw new FS.ErrnoError(63);
                  return t.node_ops.getattr(t);
                },
                lstat: (e) => FS.stat(e, !0),
                chmod: (e, r, t) => {
                  var n;
                  if (
                    !(n =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !t }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  n.node_ops.setattr(n, {
                    mode: (4095 & r) | (-4096 & n.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, r) => {
                  FS.chmod(e, r, !0);
                },
                fchmod: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  FS.chmod(t.node, r);
                },
                chown: (e, r, t, n) => {
                  var o;
                  if (
                    !(o =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !n }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  o.node_ops.setattr(o, { timestamp: Date.now() });
                },
                lchown: (e, r, t) => {
                  FS.chown(e, r, t, !0);
                },
                fchown: (e, r, t) => {
                  var n = FS.getStream(e);
                  if (!n) throw new FS.ErrnoError(8);
                  FS.chown(n.node, r, t);
                },
                truncate: (e, r) => {
                  if (r < 0) throw new FS.ErrnoError(28);
                  var t;
                  if (
                    !(t =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  if (FS.isDir(t.mode)) throw new FS.ErrnoError(31);
                  if (!FS.isFile(t.mode)) throw new FS.ErrnoError(28);
                  var n = FS.nodePermissions(t, "w");
                  if (n) throw new FS.ErrnoError(n);
                  t.node_ops.setattr(t, { size: r, timestamp: Date.now() });
                },
                ftruncate: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & t.flags)) throw new FS.ErrnoError(28);
                  FS.truncate(t.node, r);
                },
                utime: (e, r, t) => {
                  var n = FS.lookupPath(e, { follow: !0 }).node;
                  n.node_ops.setattr(n, { timestamp: Math.max(r, t) });
                },
                open: (e, r, t) => {
                  if ("" === e) throw new FS.ErrnoError(44);
                  var n;
                  if (
                    ((t = void 0 === t ? 438 : t),
                    (t =
                      64 &
                      (r = "string" == typeof r ? FS.modeStringToFlags(r) : r)
                        ? (4095 & t) | 32768
                        : 0),
                    "object" == typeof e)
                  )
                    n = e;
                  else {
                    e = PATH.normalize(e);
                    try {
                      n = FS.lookupPath(e, { follow: !(131072 & r) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & r)
                    if (n) {
                      if (128 & r) throw new FS.ErrnoError(20);
                    } else (n = FS.mknod(e, t, 0)), (o = !0);
                  if (!n) throw new FS.ErrnoError(44);
                  if (
                    (FS.isChrdev(n.mode) && (r &= -513),
                    65536 & r && !FS.isDir(n.mode))
                  )
                    throw new FS.ErrnoError(54);
                  if (!o) {
                    var a = FS.mayOpen(n, r);
                    if (a) throw new FS.ErrnoError(a);
                  }
                  512 & r && !o && FS.truncate(n, 0), (r &= -131713);
                  var i = FS.createStream({
                    node: n,
                    path: FS.getPath(n),
                    flags: r,
                    seekable: !0,
                    position: 0,
                    stream_ops: n.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    i.stream_ops.open && i.stream_ops.open(i),
                    !Module.logReadFiles ||
                      1 & r ||
                      (FS.readFiles || (FS.readFiles = {}),
                      e in FS.readFiles || (FS.readFiles[e] = 1)),
                    i
                  );
                },
                close: (e) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new FS.ErrnoError(70);
                  if (0 != t && 1 != t && 2 != t) throw new FS.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, r, t)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, r, t, n, o) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.read) throw new FS.ErrnoError(28);
                  var a = void 0 !== o;
                  if (a) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var i = e.stream_ops.read(e, r, t, n, o);
                  return a || (e.position += i), i;
                },
                write: (e, r, t, n, o, a) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.write) throw new FS.ErrnoError(28);
                  e.seekable && 1024 & e.flags && FS.llseek(e, 0, 2);
                  var i = void 0 !== o;
                  if (i) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var s = e.stream_ops.write(e, r, t, n, o, a);
                  return i || (e.position += s), s;
                },
                allocate: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (r < 0 || t <= 0) throw new FS.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode))
                    throw new FS.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new FS.ErrnoError(138);
                  e.stream_ops.allocate(e, r, t);
                },
                mmap: (e, r, t, n, o) => {
                  if (0 != (2 & n) && 0 == (2 & o) && 2 != (2097155 & e.flags))
                    throw new FS.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new FS.ErrnoError(43);
                  return e.stream_ops.mmap(e, r, t, n, o);
                },
                msync: (e, r, t, n, o) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, r, t, n, o) : 0,
                munmap: (e) => 0,
                ioctl: (e, r, t) => {
                  if (!e.stream_ops.ioctl) throw new FS.ErrnoError(59);
                  return e.stream_ops.ioctl(e, r, t);
                },
                readFile: (e, r = {}) => {
                  if (
                    ((r.flags = r.flags || 0),
                    (r.encoding = r.encoding || "binary"),
                    "utf8" !== r.encoding && "binary" !== r.encoding)
                  )
                    throw new Error(
                      'Invalid encoding type "' + r.encoding + '"'
                    );
                  var t,
                    n = FS.open(e, r.flags),
                    o = FS.stat(e).size,
                    a = new Uint8Array(o);
                  return (
                    FS.read(n, a, 0, o, 0),
                    "utf8" === r.encoding
                      ? (t = UTF8ArrayToString(a, 0))
                      : "binary" === r.encoding && (t = a),
                    FS.close(n),
                    t
                  );
                },
                writeFile: (e, r, t = {}) => {
                  t.flags = t.flags || 577;
                  var n = FS.open(e, t.flags, t.mode);
                  if ("string" == typeof r) {
                    var o = new Uint8Array(lengthBytesUTF8(r) + 1),
                      a = stringToUTF8Array(r, o, 0, o.length);
                    FS.write(n, o, 0, a, void 0, t.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(r))
                      throw new Error("Unsupported data type");
                    FS.write(n, r, 0, r.byteLength, void 0, t.canOwn);
                  }
                  FS.close(n);
                },
                cwd: () => FS.currentPath,
                chdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 });
                  if (null === r.node) throw new FS.ErrnoError(44);
                  if (!FS.isDir(r.node.mode)) throw new FS.ErrnoError(54);
                  var t = FS.nodePermissions(r.node, "x");
                  if (t) throw new FS.ErrnoError(t);
                  FS.currentPath = r.path;
                },
                createDefaultDirectories: () => {
                  FS.mkdir("/tmp"),
                    FS.mkdir("/home"),
                    FS.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  FS.mkdir("/dev"),
                    FS.registerDevice(FS.makedev(1, 3), {
                      read: () => 0,
                      write: (e, r, t, n, o) => n,
                    }),
                    FS.mkdev("/dev/null", FS.makedev(1, 3)),
                    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops),
                    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops),
                    FS.mkdev("/dev/tty", FS.makedev(5, 0)),
                    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var e = getRandomDevice();
                  FS.createDevice("/dev", "random", e),
                    FS.createDevice("/dev", "urandom", e),
                    FS.mkdir("/dev/shm"),
                    FS.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var e = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd"),
                    FS.mount(
                      {
                        mount: () => {
                          var r = FS.createNode(e, "fd", 16895, 73);
                          return (
                            (r.node_ops = {
                              lookup: (e, r) => {
                                var t = +r,
                                  n = FS.getStream(t);
                                if (!n) throw new FS.ErrnoError(8);
                                var o = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => n.path },
                                };
                                return (o.parent = o), o;
                              },
                            }),
                            r
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  Module.stdin
                    ? FS.createDevice("/dev", "stdin", Module.stdin)
                    : FS.symlink("/dev/tty", "/dev/stdin"),
                    Module.stdout
                      ? FS.createDevice("/dev", "stdout", null, Module.stdout)
                      : FS.symlink("/dev/tty", "/dev/stdout"),
                    Module.stderr
                      ? FS.createDevice("/dev", "stderr", null, Module.stderr)
                      : FS.symlink("/dev/tty1", "/dev/stderr"),
                    FS.open("/dev/stdin", 0),
                    FS.open("/dev/stdout", 1),
                    FS.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  FS.ErrnoError ||
                    ((FS.ErrnoError = function (e, r) {
                      (this.node = r),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (FS.ErrnoError.prototype = new Error()),
                    (FS.ErrnoError.prototype.constructor = FS.ErrnoError),
                    [44].forEach((e) => {
                      (FS.genericErrors[e] = new FS.ErrnoError(e)),
                        (FS.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  FS.ensureErrnoError(),
                    (FS.nameTable = new Array(4096)),
                    FS.mount(MEMFS, {}, "/"),
                    FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    (FS.filesystems = { MEMFS, PROXYFS });
                },
                init: (e, r, t) => {
                  (FS.init.initialized = !0),
                    FS.ensureErrnoError(),
                    (Module.stdin = e || Module.stdin),
                    (Module.stdout = r || Module.stdout),
                    (Module.stderr = t || Module.stderr),
                    FS.createStandardStreams();
                },
                quit: () => {
                  FS.init.initialized = !1;
                  for (var e = 0; e < FS.streams.length; e++) {
                    var r = FS.streams[e];
                    r && FS.close(r);
                  }
                },
                getMode: (e, r) => {
                  var t = 0;
                  return e && (t |= 365), r && (t |= 146), t;
                },
                findObject: (e, r) => {
                  var t = FS.analyzePath(e, r);
                  return t.exists ? t.object : null;
                },
                analyzePath: (e, r) => {
                  try {
                    e = (n = FS.lookupPath(e, { follow: !r })).path;
                  } catch (e) {}
                  var t = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var n = FS.lookupPath(e, { parent: !0 });
                    (t.parentExists = !0),
                      (t.parentPath = n.path),
                      (t.parentObject = n.node),
                      (t.name = PATH.basename(e)),
                      (n = FS.lookupPath(e, { follow: !r })),
                      (t.exists = !0),
                      (t.path = n.path),
                      (t.object = n.node),
                      (t.name = n.node.name),
                      (t.isRoot = "/" === n.path);
                  } catch (e) {
                    t.error = e.errno;
                  }
                  return t;
                },
                createPath: (e, r, t, n) => {
                  e = "string" == typeof e ? e : FS.getPath(e);
                  for (var o = r.split("/").reverse(); o.length; ) {
                    var a = o.pop();
                    if (a) {
                      var i = PATH.join2(e, a);
                      try {
                        FS.mkdir(i);
                      } catch (e) {}
                      e = i;
                    }
                  }
                  return i;
                },
                createFile: (e, r, t, n, o) => {
                  var a = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    i = FS.getMode(n, o);
                  return FS.create(a, i);
                },
                createDataFile: (e, r, t, n, o, a) => {
                  var i = r;
                  e &&
                    ((e = "string" == typeof e ? e : FS.getPath(e)),
                    (i = r ? PATH.join2(e, r) : e));
                  var s = FS.getMode(n, o),
                    c = FS.create(i, s);
                  if (t) {
                    if ("string" == typeof t) {
                      for (
                        var u = new Array(t.length), l = 0, d = t.length;
                        l < d;
                        ++l
                      )
                        u[l] = t.charCodeAt(l);
                      t = u;
                    }
                    FS.chmod(c, 146 | s);
                    var f = FS.open(c, 577);
                    FS.write(f, t, 0, t.length, 0, a),
                      FS.close(f),
                      FS.chmod(c, s);
                  }
                  return c;
                },
                createDevice: (e, r, t, n) => {
                  var o = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    a = FS.getMode(!!t, !!n);
                  FS.createDevice.major || (FS.createDevice.major = 64);
                  var i = FS.makedev(FS.createDevice.major++, 0);
                  return (
                    FS.registerDevice(i, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        n && n.buffer && n.buffer.length && n(10);
                      },
                      read: (e, r, n, o, a) => {
                        for (var i = 0, s = 0; s < o; s++) {
                          var c;
                          try {
                            c = t();
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                          if (void 0 === c && 0 === i)
                            throw new FS.ErrnoError(6);
                          if (null == c) break;
                          i++, (r[n + s] = c);
                        }
                        return i && (e.node.timestamp = Date.now()), i;
                      },
                      write: (e, r, t, o, a) => {
                        for (var i = 0; i < o; i++)
                          try {
                            n(r[t + i]);
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                        return o && (e.node.timestamp = Date.now()), i;
                      },
                    }),
                    FS.mkdev(o, a, i)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!read_)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = intArrayFromString(read_(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                },
                createLazyFile: (e, r, t, n, o) => {
                  function a() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((a.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var r = e % this.chunkSize,
                          t = (e / this.chunkSize) | 0;
                        return this.getter(t)[r];
                      }
                    }),
                    (a.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (a.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", t, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + t + ". Status: " + e.status
                        );
                      var r,
                        n = Number(e.getResponseHeader("Content-length")),
                        o =
                          (r = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === r,
                        a =
                          (r = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === r,
                        i = 1048576;
                      o || (i = n);
                      var s = this;
                      s.setDataGetter((e) => {
                        var r = e * i,
                          o = (e + 1) * i - 1;
                        if (
                          ((o = Math.min(o, n - 1)),
                          void 0 === s.chunks[e] &&
                            (s.chunks[e] = ((e, r) => {
                              if (e > r)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    r +
                                    ") or no bytes requested!"
                                );
                              if (r > n - 1)
                                throw new Error(
                                  "only " +
                                    n +
                                    " bytes available! programmer error!"
                                );
                              var o = new XMLHttpRequest();
                              if (
                                (o.open("GET", t, !1),
                                n !== i &&
                                  o.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + r
                                  ),
                                (o.responseType = "arraybuffer"),
                                o.overrideMimeType &&
                                  o.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                o.send(null),
                                !(
                                  (o.status >= 200 && o.status < 300) ||
                                  304 === o.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + t + ". Status: " + o.status
                                );
                              return void 0 !== o.response
                                ? new Uint8Array(o.response || [])
                                : intArrayFromString(o.responseText || "", !0);
                            })(r, o)),
                          void 0 === s.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return s.chunks[e];
                      }),
                        (!a && n) ||
                          ((i = n = 1),
                          (n = this.getter(0).length),
                          (i = n),
                          out(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = n),
                        (this._chunkSize = i),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var i = new a();
                    Object.defineProperties(i, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var s = { isDevice: !1, contents: i };
                  } else s = { isDevice: !1, url: t };
                  var c = FS.createFile(e, r, s, n, o);
                  s.contents
                    ? (c.contents = s.contents)
                    : s.url && ((c.contents = null), (c.url = s.url)),
                    Object.defineProperties(c, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var u = {};
                  function l(e, r, t, n, o) {
                    var a = e.node.contents;
                    if (o >= a.length) return 0;
                    var i = Math.min(a.length - o, n);
                    if (a.slice)
                      for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                    else for (s = 0; s < i; s++) r[t + s] = a.get(o + s);
                    return i;
                  }
                  return (
                    Object.keys(c.stream_ops).forEach((e) => {
                      var r = c.stream_ops[e];
                      u[e] = function () {
                        return FS.forceLoadFile(c), r.apply(null, arguments);
                      };
                    }),
                    (u.read = (e, r, t, n, o) => (
                      FS.forceLoadFile(c), l(e, r, t, n, o)
                    )),
                    (u.mmap = (e, r, t, n, o) => {
                      FS.forceLoadFile(c);
                      var a = mmapAlloc(r);
                      if (!a) throw new FS.ErrnoError(48);
                      return l(e, HEAP8, a, r, t), { ptr: a, allocated: !0 };
                    }),
                    (c.stream_ops = u),
                    c
                  );
                },
                createPreloadedFile: (e, r, t, n, o, a, i, s, c, u) => {
                  var l = r ? PATH_FS.resolve(PATH.join2(e, r)) : e,
                    d = getUniqueRunDependency("cp " + l);
                  function f(t) {
                    function f(t) {
                      u && u(),
                        s || FS.createDataFile(e, r, t, n, o, c),
                        a && a(),
                        removeRunDependency(d);
                    }
                    Browser.handledByPreloadPlugin(t, l, f, () => {
                      i && i(), removeRunDependency(d);
                    }) || f(t);
                  }
                  addRunDependency(d),
                    "string" == typeof t ? asyncLoad(t, (e) => f(e), i) : f(t);
                },
                indexedDB: () =>
                  window.indexedDB ||
                  window.mozIndexedDB ||
                  window.webkitIndexedDB ||
                  window.msIndexedDB,
                DB_NAME: () => "EM_FS_" + window.location.pathname,
                DB_VERSION: 20,
                DB_STORE_NAME: "FILE_DATA",
                saveFilesToDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = () => {
                    out("creating db"),
                      o.result.createObjectStore(FS.DB_STORE_NAME);
                  }),
                    (o.onsuccess = () => {
                      var n = o.result.transaction(
                          [FS.DB_STORE_NAME],
                          "readwrite"
                        ),
                        a = n.objectStore(FS.DB_STORE_NAME),
                        i = 0,
                        s = 0,
                        c = e.length;
                      function u() {
                        0 == s ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = a.put(FS.analyzePath(e).object.contents, e);
                        (r.onsuccess = () => {
                          ++i + s == c && u();
                        }),
                          (r.onerror = () => {
                            s++, i + s == c && u();
                          });
                      }),
                        (n.onerror = t);
                    }),
                    (o.onerror = t);
                },
                loadFilesFromDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = t),
                    (o.onsuccess = () => {
                      var n = o.result;
                      try {
                        var a = n.transaction([FS.DB_STORE_NAME], "readonly");
                      } catch (e) {
                        return void t(e);
                      }
                      var i = a.objectStore(FS.DB_STORE_NAME),
                        s = 0,
                        c = 0,
                        u = e.length;
                      function l() {
                        0 == c ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = i.get(e);
                        (r.onsuccess = () => {
                          FS.analyzePath(e).exists && FS.unlink(e),
                            FS.createDataFile(
                              PATH.dirname(e),
                              PATH.basename(e),
                              r.result,
                              !0,
                              !0,
                              !0
                            ),
                            ++s + c == u && l();
                        }),
                          (r.onerror = () => {
                            c++, s + c == u && l();
                          });
                      }),
                        (a.onerror = t);
                    }),
                    (o.onerror = t);
                },
              },
              SYSCALLS = {
                DEFAULT_POLLMASK: 5,
                calculateAt: function (e, r, t) {
                  if (PATH.isAbs(r)) return r;
                  var n;
                  if (
                    ((n =
                      -100 === e ? FS.cwd() : SYSCALLS.getStreamFromFD(e).path),
                    0 == r.length)
                  ) {
                    if (!t) throw new FS.ErrnoError(44);
                    return n;
                  }
                  return PATH.join2(n, r);
                },
                doStat: function (e, r, t) {
                  try {
                    var n = e(r);
                  } catch (e) {
                    if (
                      e &&
                      e.node &&
                      PATH.normalize(r) !== PATH.normalize(FS.getPath(e.node))
                    )
                      return -54;
                    throw e;
                  }
                  return (
                    (HEAP32[t >> 2] = n.dev),
                    (HEAP32[(t + 8) >> 2] = n.ino),
                    (HEAP32[(t + 12) >> 2] = n.mode),
                    (HEAPU32[(t + 16) >> 2] = n.nlink),
                    (HEAP32[(t + 20) >> 2] = n.uid),
                    (HEAP32[(t + 24) >> 2] = n.gid),
                    (HEAP32[(t + 28) >> 2] = n.rdev),
                    (tempI64 = [
                      n.size >>> 0,
                      ((tempDouble = n.size),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 40) >> 2] = tempI64[0]),
                    (HEAP32[(t + 44) >> 2] = tempI64[1]),
                    (HEAP32[(t + 48) >> 2] = 4096),
                    (HEAP32[(t + 52) >> 2] = n.blocks),
                    (tempI64 = [
                      Math.floor(n.atime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.atime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 56) >> 2] = tempI64[0]),
                    (HEAP32[(t + 60) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 64) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.mtime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.mtime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 72) >> 2] = tempI64[0]),
                    (HEAP32[(t + 76) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 80) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.ctime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.ctime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 88) >> 2] = tempI64[0]),
                    (HEAP32[(t + 92) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 96) >> 2] = 0),
                    (tempI64 = [
                      n.ino >>> 0,
                      ((tempDouble = n.ino),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 104) >> 2] = tempI64[0]),
                    (HEAP32[(t + 108) >> 2] = tempI64[1]),
                    0
                  );
                },
                doMsync: function (e, r, t, n, o) {
                  if (!FS.isFile(r.node.mode)) throw new FS.ErrnoError(43);
                  if (2 & n) return 0;
                  var a = HEAPU8.slice(e, e + t);
                  FS.msync(r, a, o, t, n);
                },
                varargs: void 0,
                get: function () {
                  return (
                    (SYSCALLS.varargs += 4), HEAP32[(SYSCALLS.varargs - 4) >> 2]
                  );
                },
                getStr: function (e) {
                  return UTF8ToString(e);
                },
                getStreamFromFD: function (e) {
                  var r = FS.getStream(e);
                  if (!r) throw new FS.ErrnoError(8);
                  return r;
                },
              };
            function ___syscall_chmod(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.chmod(e, r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fchownat(e, r, t, n, o) {
              try {
                r = SYSCALLS.getStr(r);
                var a = 256 & o;
                return (
                  (o &= -257),
                  (r = SYSCALLS.calculateAt(e, r)),
                  (a ? FS.lchown : FS.chown)(r, t, n),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function setErrNo(e) {
              return (HEAP32[___errno_location() >> 2] = e), e;
            }
            function ___syscall_fcntl64(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 0:
                    return (o = SYSCALLS.get()) < 0
                      ? -28
                      : FS.createStream(n, o).fd;
                  case 1:
                  case 2:
                  case 6:
                  case 7:
                    return 0;
                  case 3:
                    return n.flags;
                  case 4:
                    var o = SYSCALLS.get();
                    return (n.flags |= o), 0;
                  case 5:
                    return (o = SYSCALLS.get()), (HEAP16[(o + 0) >> 1] = 2), 0;
                  case 16:
                  case 8:
                  default:
                    return -28;
                  case 9:
                    return setErrNo(28), -1;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_ioctl(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 21509:
                  case 21505:
                  case 21510:
                  case 21511:
                  case 21512:
                  case 21506:
                  case 21507:
                  case 21508:
                  case 21523:
                  case 21524:
                    return n.tty ? 0 : -59;
                  case 21519:
                    if (!n.tty) return -59;
                    var o = SYSCALLS.get();
                    return (HEAP32[o >> 2] = 0), 0;
                  case 21520:
                    return n.tty ? -28 : -59;
                  case 21531:
                    return (o = SYSCALLS.get()), FS.ioctl(n, r, o);
                  default:
                    return -28;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_openat(e, r, t, n) {
              SYSCALLS.varargs = n;
              try {
                (r = SYSCALLS.getStr(r)), (r = SYSCALLS.calculateAt(e, r));
                var o = n ? SYSCALLS.get() : 0;
                return FS.open(r, t, o).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_stat64(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.stat, e, r);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_unlinkat(e, r, t) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  0 === t
                    ? FS.unlink(r)
                    : 512 === t
                    ? FS.rmdir(r)
                    : abort("Invalid flags passed to unlinkat"),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function readI53FromI64(e) {
              return HEAPU32[e >> 2] + 4294967296 * HEAP32[(e + 4) >> 2];
            }
            function ___syscall_utimensat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r, !0)),
                  t)
                ) {
                  var o = readI53FromI64(t),
                    a = HEAP32[(t + 8) >> 2];
                  (i = 1e3 * o + a / 1e6),
                    (s =
                      1e3 * (o = readI53FromI64((t += 16))) +
                      (a = HEAP32[(t + 8) >> 2]) / 1e6);
                } else
                  var i = Date.now(),
                    s = i;
                return FS.utime(r, i, s), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function _emscripten_date_now() {
              return Date.now();
            }
            function _emscripten_memcpy_big(e, r, t) {
              HEAPU8.copyWithin(e, r, r + t);
            }
            function getHeapMax() {
              return 2147483648;
            }
            function emscripten_realloc_buffer(e) {
              try {
                return (
                  wasmMemory.grow((e - buffer.byteLength + 65535) >>> 16),
                  updateGlobalBufferAndViews(wasmMemory.buffer),
                  1
                );
              } catch (e) {}
            }
            function _emscripten_resize_heap(e) {
              var r = HEAPU8.length;
              e >>>= 0;
              var t,
                n = getHeapMax();
              if (e > n) return !1;
              for (var o = 1; o <= 4; o *= 2) {
                var a = r * (1 + 0.2 / o);
                if (
                  ((a = Math.min(a, e + 100663296)),
                  emscripten_realloc_buffer(
                    Math.min(
                      n,
                      (t = Math.max(e, a)) + ((65536 - (t % 65536)) % 65536)
                    )
                  ))
                )
                  return !0;
              }
              return !1;
            }
            function _proc_exit(e) {
              (EXITSTATUS = e),
                keepRuntimeAlive() ||
                  (Module.onExit && Module.onExit(e), (ABORT = !0)),
                quit_(e, new ExitStatus(e));
            }
            function exitJS(e, r) {
              (EXITSTATUS = e), _proc_exit(e);
            }
            var _exit = exitJS;
            function _fd_close(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return FS.close(r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_fdstat_get(e, r) {
              try {
                var t = SYSCALLS.getStreamFromFD(e),
                  n = t.tty
                    ? 2
                    : FS.isDir(t.mode)
                    ? 3
                    : FS.isLink(t.mode)
                    ? 7
                    : 4;
                return (HEAP8[r >> 0] = n), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doReadv(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.read(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                if (((o += c), c < s)) break;
              }
              return o;
            }
            function _fd_read(e, r, t, n) {
              try {
                var o = doReadv(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function convertI32PairToI53Checked(e, r) {
              return (r + 2097152) >>> 0 < 4194305 - !!e
                ? (e >>> 0) + 4294967296 * r
                : NaN;
            }
            function _fd_seek(e, r, t, n, o) {
              try {
                var a = convertI32PairToI53Checked(r, t);
                if (isNaN(a)) return 61;
                var i = SYSCALLS.getStreamFromFD(e);
                return (
                  FS.llseek(i, a, n),
                  (tempI64 = [
                    i.position >>> 0,
                    ((tempDouble = i.position),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                  (HEAP32[o >> 2] = tempI64[0]),
                  (HEAP32[(o + 4) >> 2] = tempI64[1]),
                  i.getdents && 0 === a && 0 === n && (i.getdents = null),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doWritev(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.write(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                o += c;
              }
              return o;
            }
            function _fd_write(e, r, t, n) {
              try {
                var o = doWritev(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function handleException(e) {
              if (e instanceof ExitStatus || "unwind" == e) return EXITSTATUS;
              quit_(1, e);
            }
            function allocateUTF8OnStack(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = stackAlloc(r);
              return stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSROOT = {
              staticInit: () => {
                FS.root = null;
                let opts = (Module.ROOT && Module.ROOT.opts) || {},
                  type = (Module.ROOT && Module.ROOT.type) || "MEMFS";
                "string" == typeof type
                  ? (type = FS.filesystems[type] || eval(type))
                  : "function" == typeof type && (type = type(Module)),
                  FS.mount(type, opts, "/"),
                  FSROOT.createDefaultMountPoints();
                const restore_mkdir = FSROOT.safeMkdir();
                FS.createDefaultDirectories(),
                  FS.createDefaultDevices(),
                  FS.createSpecialDirectories(),
                  restore_mkdir();
              },
              createDefaultMountPoints: () => {
                FS.mkdirTree("/dev"),
                  FS.mount(MEMFS, {}, "/dev"),
                  FS.mkdirTree("/proc/self"),
                  FS.mount(MEMFS, {}, "/proc/self");
              },
              safeMkdir: () => {
                const e = FS.mkdir;
                return (
                  (FS.mkdir = (r, t) => {
                    try {
                      return e(r, t);
                    } catch {
                      return FS.lookupPath(r, { follow: !0 }).node;
                    }
                  }),
                  () => {
                    FS.mkdir = e;
                  }
                );
              },
            };
            function allocateUTF8(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = _malloc(r);
              return t && stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSNode = function (e, r, t, n) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = FS.nextInode++),
                  (this.name = r),
                  (this.mode = t),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = n);
              },
              readMode = 365,
              writeMode = 146;
            Object.defineProperties(FSNode.prototype, {
              read: {
                get: function () {
                  return (this.mode & readMode) === readMode;
                },
                set: function (e) {
                  e ? (this.mode |= readMode) : (this.mode &= ~readMode);
                },
              },
              write: {
                get: function () {
                  return (this.mode & writeMode) === writeMode;
                },
                set: function (e) {
                  e ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
                },
              },
              isFolder: {
                get: function () {
                  return FS.isDir(this.mode);
                },
              },
              isDevice: {
                get: function () {
                  return FS.isChrdev(this.mode);
                },
              },
            }),
              (FS.FSNode = FSNode),
              FS.staticInit(),
              (ERRNO_CODES = {
                EPERM: 63,
                ENOENT: 44,
                ESRCH: 71,
                EINTR: 27,
                EIO: 29,
                ENXIO: 60,
                E2BIG: 1,
                ENOEXEC: 45,
                EBADF: 8,
                ECHILD: 12,
                EAGAIN: 6,
                EWOULDBLOCK: 6,
                ENOMEM: 48,
                EACCES: 2,
                EFAULT: 21,
                ENOTBLK: 105,
                EBUSY: 10,
                EEXIST: 20,
                EXDEV: 75,
                ENODEV: 43,
                ENOTDIR: 54,
                EISDIR: 31,
                EINVAL: 28,
                ENFILE: 41,
                EMFILE: 33,
                ENOTTY: 59,
                ETXTBSY: 74,
                EFBIG: 22,
                ENOSPC: 51,
                ESPIPE: 70,
                EROFS: 69,
                EMLINK: 34,
                EPIPE: 64,
                EDOM: 18,
                ERANGE: 68,
                ENOMSG: 49,
                EIDRM: 24,
                ECHRNG: 106,
                EL2NSYNC: 156,
                EL3HLT: 107,
                EL3RST: 108,
                ELNRNG: 109,
                EUNATCH: 110,
                ENOCSI: 111,
                EL2HLT: 112,
                EDEADLK: 16,
                ENOLCK: 46,
                EBADE: 113,
                EBADR: 114,
                EXFULL: 115,
                ENOANO: 104,
                EBADRQC: 103,
                EBADSLT: 102,
                EDEADLOCK: 16,
                EBFONT: 101,
                ENOSTR: 100,
                ENODATA: 116,
                ETIME: 117,
                ENOSR: 118,
                ENONET: 119,
                ENOPKG: 120,
                EREMOTE: 121,
                ENOLINK: 47,
                EADV: 122,
                ESRMNT: 123,
                ECOMM: 124,
                EPROTO: 65,
                EMULTIHOP: 36,
                EDOTDOT: 125,
                EBADMSG: 9,
                ENOTUNIQ: 126,
                EBADFD: 127,
                EREMCHG: 128,
                ELIBACC: 129,
                ELIBBAD: 130,
                ELIBSCN: 131,
                ELIBMAX: 132,
                ELIBEXEC: 133,
                ENOSYS: 52,
                ENOTEMPTY: 55,
                ENAMETOOLONG: 37,
                ELOOP: 32,
                EOPNOTSUPP: 138,
                EPFNOSUPPORT: 139,
                ECONNRESET: 15,
                ENOBUFS: 42,
                EAFNOSUPPORT: 5,
                EPROTOTYPE: 67,
                ENOTSOCK: 57,
                ENOPROTOOPT: 50,
                ESHUTDOWN: 140,
                ECONNREFUSED: 14,
                EADDRINUSE: 3,
                ECONNABORTED: 13,
                ENETUNREACH: 40,
                ENETDOWN: 38,
                ETIMEDOUT: 73,
                EHOSTDOWN: 142,
                EHOSTUNREACH: 23,
                EINPROGRESS: 26,
                EALREADY: 7,
                EDESTADDRREQ: 17,
                EMSGSIZE: 35,
                EPROTONOSUPPORT: 66,
                ESOCKTNOSUPPORT: 137,
                EADDRNOTAVAIL: 4,
                ENETRESET: 39,
                EISCONN: 30,
                ENOTCONN: 53,
                ETOOMANYREFS: 141,
                EUSERS: 136,
                EDQUOT: 19,
                ESTALE: 72,
                ENOTSUP: 138,
                ENOMEDIUM: 148,
                EILSEQ: 25,
                EOVERFLOW: 61,
                ECANCELED: 11,
                ENOTRECOVERABLE: 56,
                EOWNERDEAD: 62,
                ESTRPIPE: 135,
              }),
              FSROOT.staticInit();
            var asmLibraryArg = {
                g: ___syscall_chmod,
                f: ___syscall_fchownat,
                e: ___syscall_fcntl64,
                j: ___syscall_ioctl,
                b: ___syscall_openat,
                o: ___syscall_stat64,
                n: ___syscall_unlinkat,
                m: ___syscall_utimensat,
                c: _emscripten_date_now,
                q: _emscripten_memcpy_big,
                l: _emscripten_resize_heap,
                a: _exit,
                d: _fd_close,
                p: _fd_fdstat_get,
                i: _fd_read,
                k: _fd_seek,
                h: _fd_write,
              },
              asm = createWasm(),
              ___wasm_call_ctors = (Module.___wasm_call_ctors = function () {
                return (___wasm_call_ctors = Module.___wasm_call_ctors =
                  Module.asm.s).apply(null, arguments);
              }),
              _main = (Module._main = function () {
                return (_main = Module._main = Module.asm.t).apply(
                  null,
                  arguments
                );
              }),
              _malloc = (Module._malloc = function () {
                return (_malloc = Module._malloc = Module.asm.u).apply(
                  null,
                  arguments
                );
              }),
              _free = (Module._free = function () {
                return (_free = Module._free = Module.asm.v).apply(
                  null,
                  arguments
                );
              }),
              ___errno_location = (Module.___errno_location = function () {
                return (___errno_location = Module.___errno_location =
                  Module.asm.w).apply(null, arguments);
              }),
              stackAlloc = (Module.stackAlloc = function () {
                return (stackAlloc = Module.stackAlloc = Module.asm.y).apply(
                  null,
                  arguments
                );
              }),
              calledRun;
            function callMain(e) {
              var r = Module._main;
              (e = e || []).unshift(thisProgram);
              var t = e.length,
                n = stackAlloc(4 * (t + 1)),
                o = n >> 2;
              e.forEach((e) => {
                HEAP32[o++] = allocateUTF8OnStack(e);
              }),
                (HEAP32[o] = 0);
              try {
                var a = r(t, n);
                return exitJS(a, !0), a;
              } catch (e) {
                return handleException(e);
              }
            }
            function run(e) {
              function r() {
                calledRun ||
                  ((calledRun = !0),
                  (Module.calledRun = !0),
                  ABORT ||
                    (initRuntime(),
                    preMain(),
                    readyPromiseResolve(Module),
                    Module.onRuntimeInitialized &&
                      Module.onRuntimeInitialized(),
                    shouldRunNow && callMain(e),
                    postRun()));
              }
              (e = e || arguments_),
                runDependencies > 0 ||
                  (preRun(),
                  runDependencies > 0 ||
                    (Module.setStatus
                      ? (Module.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            Module.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
            }
            if (
              ((Module.ERRNO_CODES = ERRNO_CODES),
              (Module.allocateUTF8 = allocateUTF8),
              (Module.FS = FS),
              (Module.PROXYFS = PROXYFS),
              (dependenciesFulfilled = function e() {
                calledRun || run(), calledRun || (dependenciesFulfilled = e);
              }),
              Module.preInit)
            )
              for (
                "function" == typeof Module.preInit &&
                (Module.preInit = [Module.preInit]);
                Module.preInit.length > 0;

              )
                Module.preInit.pop()();
            var shouldRunNow = !0;
            return (
              Module.noInitialRun && (shouldRunNow = !1), run(), Module.ready
            );
          };
        })();
        const __WEBPACK_DEFAULT_EXPORT__ = Module;
      },
      3576: (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
          Z: () => __WEBPACK_DEFAULT_EXPORT__,
        });
        var Module = (() => {
          var _scriptDir =
            "file:///home/jprendes/Projects/emception/build/emception/cpython/python.mjs";
          return function (Module) {
            Module = Module || {};
            var Module = void 0 !== Module ? Module : {},
              readyPromiseResolve,
              readyPromiseReject;
            Module.ready = new Promise(function (e, r) {
              (readyPromiseResolve = e), (readyPromiseReject = r);
            });
            var moduleOverrides = Object.assign({}, Module),
              arguments_ = [],
              thisProgram = "./this.program",
              quit_ = (e, r) => {
                throw r;
              },
              ENVIRONMENT_IS_WEB = "object" == typeof window,
              ENVIRONMENT_IS_WORKER = "function" == typeof importScripts,
              ENVIRONMENT_IS_NODE =
                "object" == typeof process &&
                "object" == typeof process.versions &&
                "string" == typeof process.versions.node,
              scriptDirectory = "",
              read_,
              readAsync,
              readBinary,
              setWindowTitle,
              fs,
              nodePath;
            function locateFile(e) {
              return Module.locateFile
                ? Module.locateFile(e, scriptDirectory)
                : scriptDirectory + e;
            }
            function logExceptionOnExit(e) {
              e instanceof ExitStatus || err("exiting due to exception: " + e);
            }
            ENVIRONMENT_IS_NODE
              ? ((scriptDirectory = ENVIRONMENT_IS_WORKER
                  ? require("path").dirname(scriptDirectory) + "/"
                  : __dirname + "/"),
                "function" == typeof require &&
                  ((fs = require("fs")), (nodePath = require("path"))),
                (read_ = (e, r) => (
                  (e = nodePath.normalize(e)),
                  fs.readFileSync(e, r ? void 0 : "utf8")
                )),
                (readBinary = (e) => {
                  var r = read_(e, !0);
                  return r.buffer || (r = new Uint8Array(r)), r;
                }),
                (readAsync = (e, r, t) => {
                  (e = nodePath.normalize(e)),
                    fs.readFile(e, function (e, n) {
                      e ? t(e) : r(n.buffer);
                    });
                }),
                process.argv.length > 1 &&
                  (thisProgram = process.argv[1].replace(/\\/g, "/")),
                (arguments_ = process.argv.slice(2)),
                process.on("uncaughtException", function (e) {
                  if (!(e instanceof ExitStatus)) throw e;
                }),
                process.on("unhandledRejection", function (e) {
                  throw e;
                }),
                (quit_ = (e, r) => {
                  if (keepRuntimeAlive()) throw ((process.exitCode = e), r);
                  logExceptionOnExit(r), process.exit(e);
                }),
                (Module.inspect = function () {
                  return "[Emscripten Module object]";
                }))
              : (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) &&
                (ENVIRONMENT_IS_WORKER
                  ? (scriptDirectory = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (scriptDirectory = document.currentScript.src),
                _scriptDir && (scriptDirectory = _scriptDir),
                (scriptDirectory =
                  0 !== scriptDirectory.indexOf("blob:")
                    ? scriptDirectory.substr(
                        0,
                        scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") +
                          1
                      )
                    : ""),
                (read_ = (e) => {
                  var r = new XMLHttpRequest();
                  return r.open("GET", e, !1), r.send(null), r.responseText;
                }),
                ENVIRONMENT_IS_WORKER &&
                  (readBinary = (e) => {
                    var r = new XMLHttpRequest();
                    return (
                      r.open("GET", e, !1),
                      (r.responseType = "arraybuffer"),
                      r.send(null),
                      new Uint8Array(r.response)
                    );
                  }),
                (readAsync = (e, r, t) => {
                  var n = new XMLHttpRequest();
                  n.open("GET", e, !0),
                    (n.responseType = "arraybuffer"),
                    (n.onload = () => {
                      200 == n.status || (0 == n.status && n.response)
                        ? r(n.response)
                        : t();
                    }),
                    (n.onerror = t),
                    n.send(null);
                }),
                (setWindowTitle = (e) => (document.title = e)));
            var out = Module.print || console.log.bind(console),
              err = Module.printErr || console.warn.bind(console);
            Object.assign(Module, moduleOverrides),
              (moduleOverrides = null),
              Module.arguments && (arguments_ = Module.arguments),
              Module.thisProgram && (thisProgram = Module.thisProgram),
              Module.quit && (quit_ = Module.quit);
            var POINTER_SIZE = 4,
              wasmBinary;
            Module.wasmBinary && (wasmBinary = Module.wasmBinary);
            var noExitRuntime = Module.noExitRuntime || !0,
              wasmMemory;
            "object" != typeof WebAssembly &&
              abort("no native wasm support detected");
            var ABORT = !1,
              EXITSTATUS;
            function assert(e, r) {
              e || abort(r);
            }
            var UTF8Decoder =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0,
              buffer,
              HEAP8,
              HEAPU8,
              HEAP16,
              HEAPU16,
              HEAP32,
              HEAPU32,
              HEAPF32,
              HEAP64,
              HEAPU64,
              HEAPF64;
            function UTF8ArrayToString(e, r, t) {
              for (var n = r + t, o = r; e[o] && !(o >= n); ) ++o;
              if (o - r > 16 && e.buffer && UTF8Decoder)
                return UTF8Decoder.decode(e.subarray(r, o));
              for (var a = ""; r < o; ) {
                var i = e[r++];
                if (128 & i) {
                  var s = 63 & e[r++];
                  if (192 != (224 & i)) {
                    var c = 63 & e[r++];
                    if (
                      (i =
                        224 == (240 & i)
                          ? ((15 & i) << 12) | (s << 6) | c
                          : ((7 & i) << 18) |
                            (s << 12) |
                            (c << 6) |
                            (63 & e[r++])) < 65536
                    )
                      a += String.fromCharCode(i);
                    else {
                      var u = i - 65536;
                      a += String.fromCharCode(
                        55296 | (u >> 10),
                        56320 | (1023 & u)
                      );
                    }
                  } else a += String.fromCharCode(((31 & i) << 6) | s);
                } else a += String.fromCharCode(i);
              }
              return a;
            }
            function UTF8ToString(e, r) {
              return e ? UTF8ArrayToString(HEAPU8, e, r) : "";
            }
            function stringToUTF8Array(e, r, t, n) {
              if (!(n > 0)) return 0;
              for (var o = t, a = t + n - 1, i = 0; i < e.length; ++i) {
                var s = e.charCodeAt(i);
                if (
                  (s >= 55296 &&
                    s <= 57343 &&
                    (s =
                      (65536 + ((1023 & s) << 10)) |
                      (1023 & e.charCodeAt(++i))),
                  s <= 127)
                ) {
                  if (t >= a) break;
                  r[t++] = s;
                } else if (s <= 2047) {
                  if (t + 1 >= a) break;
                  (r[t++] = 192 | (s >> 6)), (r[t++] = 128 | (63 & s));
                } else if (s <= 65535) {
                  if (t + 2 >= a) break;
                  (r[t++] = 224 | (s >> 12)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                } else {
                  if (t + 3 >= a) break;
                  (r[t++] = 240 | (s >> 18)),
                    (r[t++] = 128 | ((s >> 12) & 63)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                }
              }
              return (r[t] = 0), t - o;
            }
            function stringToUTF8(e, r, t) {
              return stringToUTF8Array(e, HEAPU8, r, t);
            }
            function lengthBytesUTF8(e) {
              for (var r = 0, t = 0; t < e.length; ++t) {
                var n = e.charCodeAt(t);
                n <= 127
                  ? r++
                  : n <= 2047
                  ? (r += 2)
                  : n >= 55296 && n <= 57343
                  ? ((r += 4), ++t)
                  : (r += 3);
              }
              return r;
            }
            function updateGlobalBufferAndViews(e) {
              (buffer = e),
                (Module.HEAP8 = HEAP8 = new Int8Array(e)),
                (Module.HEAP16 = HEAP16 = new Int16Array(e)),
                (Module.HEAP32 = HEAP32 = new Int32Array(e)),
                (Module.HEAPU8 = HEAPU8 = new Uint8Array(e)),
                (Module.HEAPU16 = HEAPU16 = new Uint16Array(e)),
                (Module.HEAPU32 = HEAPU32 = new Uint32Array(e)),
                (Module.HEAPF32 = HEAPF32 = new Float32Array(e)),
                (Module.HEAPF64 = HEAPF64 = new Float64Array(e)),
                (Module.HEAP64 = HEAP64 = new BigInt64Array(e)),
                (Module.HEAPU64 = HEAPU64 = new BigUint64Array(e));
            }
            var INITIAL_MEMORY = Module.INITIAL_MEMORY || 20971520,
              wasmTable,
              __ATPRERUN__ = [],
              __ATINIT__ = [],
              __ATMAIN__ = [],
              __ATPOSTRUN__ = [],
              runtimeInitialized = !1;
            function keepRuntimeAlive() {
              return noExitRuntime;
            }
            function preRun() {
              if (Module.preRun)
                for (
                  "function" == typeof Module.preRun &&
                  (Module.preRun = [Module.preRun]);
                  Module.preRun.length;

                )
                  addOnPreRun(Module.preRun.shift());
              callRuntimeCallbacks(__ATPRERUN__);
            }
            function initRuntime() {
              (runtimeInitialized = !0),
                Module.noFSInit || FS.init.initialized || FS.init(),
                (FS.ignorePermissions = !1),
                TTY.init(),
                (SOCKFS.root = FS.mount(SOCKFS, {}, null)),
                (PIPEFS.root = FS.mount(PIPEFS, {}, null)),
                callRuntimeCallbacks(__ATINIT__);
            }
            function preMain() {
              callRuntimeCallbacks(__ATMAIN__);
            }
            function postRun() {
              if (Module.postRun)
                for (
                  "function" == typeof Module.postRun &&
                  (Module.postRun = [Module.postRun]);
                  Module.postRun.length;

                )
                  addOnPostRun(Module.postRun.shift());
              callRuntimeCallbacks(__ATPOSTRUN__);
            }
            function addOnPreRun(e) {
              __ATPRERUN__.unshift(e);
            }
            function addOnInit(e) {
              __ATINIT__.unshift(e);
            }
            function addOnPostRun(e) {
              __ATPOSTRUN__.unshift(e);
            }
            var runDependencies = 0,
              runDependencyWatcher = null,
              dependenciesFulfilled = null;
            function getUniqueRunDependency(e) {
              return e;
            }
            function addRunDependency(e) {
              runDependencies++,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies);
            }
            function removeRunDependency(e) {
              if (
                (runDependencies--,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies),
                0 == runDependencies &&
                  (null !== runDependencyWatcher &&
                    (clearInterval(runDependencyWatcher),
                    (runDependencyWatcher = null)),
                  dependenciesFulfilled))
              ) {
                var r = dependenciesFulfilled;
                (dependenciesFulfilled = null), r();
              }
            }
            function abort(e) {
              Module.onAbort && Module.onAbort(e),
                err((e = "Aborted(" + e + ")")),
                (ABORT = !0),
                (EXITSTATUS = 1),
                (e += ". Build with -sASSERTIONS for more info.");
              var r = new WebAssembly.RuntimeError(e);
              throw (readyPromiseReject(r), r);
            }
            var dataURIPrefix = "data:application/octet-stream;base64,",
              wasmBinaryFile,
              tempDouble,
              tempI64;
            function isDataURI(e) {
              return e.startsWith(dataURIPrefix);
            }
            function isFileURI(e) {
              return e.startsWith("file://");
            }
            function getBinary(e) {
              try {
                if (e == wasmBinaryFile && wasmBinary)
                  return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(e);
                throw "both async and sync fetching of the wasm failed";
              } catch (e) {
                abort(e);
              }
            }
            function getBinaryPromise() {
              if (
                !wasmBinary &&
                (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)
              ) {
                if ("function" == typeof fetch && !isFileURI(wasmBinaryFile))
                  return fetch(wasmBinaryFile, { credentials: "same-origin" })
                    .then(function (e) {
                      if (!e.ok)
                        throw (
                          "failed to load wasm binary file at '" +
                          wasmBinaryFile +
                          "'"
                        );
                      return e.arrayBuffer();
                    })
                    .catch(function () {
                      return getBinary(wasmBinaryFile);
                    });
                if (readAsync)
                  return new Promise(function (e, r) {
                    readAsync(
                      wasmBinaryFile,
                      function (r) {
                        e(new Uint8Array(r));
                      },
                      r
                    );
                  });
              }
              return Promise.resolve().then(function () {
                return getBinary(wasmBinaryFile);
              });
            }
            function createWasm() {
              var e = {
                env: asmLibraryArg,
                wasi_snapshot_preview1: asmLibraryArg,
              };
              function r(e, r) {
                var t = e.exports;
                (Module.asm = t),
                  updateGlobalBufferAndViews(
                    (wasmMemory = Module.asm.memory).buffer
                  ),
                  (wasmTable = Module.asm.__indirect_function_table),
                  addOnInit(Module.asm.__wasm_call_ctors),
                  removeRunDependency("wasm-instantiate");
              }
              function t(e) {
                r(e.instance);
              }
              function n(r) {
                return getBinaryPromise()
                  .then(function (r) {
                    return WebAssembly.instantiate(r, e);
                  })
                  .then(function (e) {
                    return e;
                  })
                  .then(r, function (e) {
                    err("failed to asynchronously prepare wasm: " + e),
                      abort(e);
                  });
              }
              if (
                (addRunDependency("wasm-instantiate"), Module.instantiateWasm)
              )
                try {
                  return Module.instantiateWasm(e, r);
                } catch (e) {
                  err(
                    "Module.instantiateWasm callback failed with error: " + e
                  ),
                    readyPromiseReject(e);
                }
              return (
                (wasmBinary ||
                "function" != typeof WebAssembly.instantiateStreaming ||
                isDataURI(wasmBinaryFile) ||
                isFileURI(wasmBinaryFile) ||
                ENVIRONMENT_IS_NODE ||
                "function" != typeof fetch
                  ? n(t)
                  : fetch(wasmBinaryFile, { credentials: "same-origin" }).then(
                      function (r) {
                        return WebAssembly.instantiateStreaming(r, e).then(
                          t,
                          function (e) {
                            return (
                              err("wasm streaming compile failed: " + e),
                              err("falling back to ArrayBuffer instantiation"),
                              n(t)
                            );
                          }
                        );
                      }
                    )
                ).catch(readyPromiseReject),
                {}
              );
            }
            function _Py_emscripten_runtime() {
              var e,
                r =
                  lengthBytesUTF8(
                    (e =
                      "object" == typeof navigator
                        ? navigator.userAgent
                        : "object" == typeof process
                        ? "Node.js ".concat(process.version)
                        : "UNKNOWN")
                  ) + 1,
                t = _malloc(r);
              return t && stringToUTF8(e, t, r), t;
            }
            function _Py_CheckEmscriptenSignals_Helper() {
              if (!Module.Py_EmscriptenSignalBuffer) return 0;
              try {
                let e = Module.Py_EmscriptenSignalBuffer[0];
                return (Module.Py_EmscriptenSignalBuffer[0] = 0), e;
              } catch (e) {
                return 0;
              }
            }
            function emception_eval_impl(code) {
              return allocateUTF8(
                JSON.stringify(eval(UTF8ToString(code))) || ""
              );
            }
            function ExitStatus(e) {
              (this.name = "ExitStatus"),
                (this.message = "Program terminated with exit(" + e + ")"),
                (this.status = e);
            }
            function callRuntimeCallbacks(e) {
              for (; e.length > 0; ) e.shift()(Module);
            }
            Module.locateFile
              ? ((wasmBinaryFile = "python.wasm"),
                isDataURI(wasmBinaryFile) ||
                  (wasmBinaryFile = locateFile(wasmBinaryFile)))
              : (wasmBinaryFile = new URL(
                  __webpack_require__(9025),
                  __webpack_require__.b
                ).toString());
            var wasmTableMirror = [];
            function getWasmTableEntry(e) {
              var r = wasmTableMirror[e];
              return (
                r ||
                  (e >= wasmTableMirror.length &&
                    (wasmTableMirror.length = e + 1),
                  (wasmTableMirror[e] = r = wasmTable.get(e))),
                r
              );
            }
            function ___call_sighandler(e, r) {
              getWasmTableEntry(e)(r);
            }
            var PATH = {
              isAbs: (e) => "/" === e.charAt(0),
              splitPath: (e) =>
                /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                  .exec(e)
                  .slice(1),
              normalizeArray: (e, r) => {
                for (var t = 0, n = e.length - 1; n >= 0; n--) {
                  var o = e[n];
                  "." === o
                    ? e.splice(n, 1)
                    : ".." === o
                    ? (e.splice(n, 1), t++)
                    : t && (e.splice(n, 1), t--);
                }
                if (r) for (; t; t--) e.unshift("..");
                return e;
              },
              normalize: (e) => {
                var r = PATH.isAbs(e),
                  t = "/" === e.substr(-1);
                return (
                  (e = PATH.normalizeArray(
                    e.split("/").filter((e) => !!e),
                    !r
                  ).join("/")) ||
                    r ||
                    (e = "."),
                  e && t && (e += "/"),
                  (r ? "/" : "") + e
                );
              },
              dirname: (e) => {
                var r = PATH.splitPath(e),
                  t = r[0],
                  n = r[1];
                return t || n
                  ? (n && (n = n.substr(0, n.length - 1)), t + n)
                  : ".";
              },
              basename: (e) => {
                if ("/" === e) return "/";
                var r = (e = (e = PATH.normalize(e)).replace(
                  /\/$/,
                  ""
                )).lastIndexOf("/");
                return -1 === r ? e : e.substr(r + 1);
              },
              join: function () {
                var e = Array.prototype.slice.call(arguments);
                return PATH.normalize(e.join("/"));
              },
              join2: (e, r) => PATH.normalize(e + "/" + r),
            };
            function getRandomDevice() {
              if (
                "object" == typeof crypto &&
                "function" == typeof crypto.getRandomValues
              ) {
                var e = new Uint8Array(1);
                return () => (crypto.getRandomValues(e), e[0]);
              }
              if (ENVIRONMENT_IS_NODE)
                try {
                  var r = require("crypto");
                  return () => r.randomBytes(1)[0];
                } catch (e) {}
              return () => abort("randomDevice");
            }
            var PATH_FS = {
              resolve: function () {
                for (
                  var e = "", r = !1, t = arguments.length - 1;
                  t >= -1 && !r;
                  t--
                ) {
                  var n = t >= 0 ? arguments[t] : FS.cwd();
                  if ("string" != typeof n)
                    throw new TypeError(
                      "Arguments to path.resolve must be strings"
                    );
                  if (!n) return "";
                  (e = n + "/" + e), (r = PATH.isAbs(n));
                }
                return (
                  (r ? "/" : "") +
                    (e = PATH.normalizeArray(
                      e.split("/").filter((e) => !!e),
                      !r
                    ).join("/")) || "."
                );
              },
              relative: (e, r) => {
                function t(e) {
                  for (var r = 0; r < e.length && "" === e[r]; r++);
                  for (var t = e.length - 1; t >= 0 && "" === e[t]; t--);
                  return r > t ? [] : e.slice(r, t - r + 1);
                }
                (e = PATH_FS.resolve(e).substr(1)),
                  (r = PATH_FS.resolve(r).substr(1));
                for (
                  var n = t(e.split("/")),
                    o = t(r.split("/")),
                    a = Math.min(n.length, o.length),
                    i = a,
                    s = 0;
                  s < a;
                  s++
                )
                  if (n[s] !== o[s]) {
                    i = s;
                    break;
                  }
                var c = [];
                for (s = i; s < n.length; s++) c.push("..");
                return (c = c.concat(o.slice(i))).join("/");
              },
            };
            function intArrayFromString(e, r, t) {
              var n = t > 0 ? t : lengthBytesUTF8(e) + 1,
                o = new Array(n),
                a = stringToUTF8Array(e, o, 0, o.length);
              return r && (o.length = a), o;
            }
            var TTY = {
              ttys: [],
              init: function () {},
              shutdown: function () {},
              register: function (e, r) {
                (TTY.ttys[e] = { input: [], output: [], ops: r }),
                  FS.registerDevice(e, TTY.stream_ops);
              },
              stream_ops: {
                open: function (e) {
                  var r = TTY.ttys[e.node.rdev];
                  if (!r) throw new FS.ErrnoError(43);
                  (e.tty = r), (e.seekable = !1);
                },
                close: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                fsync: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                read: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.get_char)
                    throw new FS.ErrnoError(60);
                  for (var a = 0, i = 0; i < n; i++) {
                    var s;
                    try {
                      s = e.tty.ops.get_char(e.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (void 0 === s && 0 === a) throw new FS.ErrnoError(6);
                    if (null == s) break;
                    a++, (r[t + i] = s);
                  }
                  return a && (e.node.timestamp = Date.now()), a;
                },
                write: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.put_char)
                    throw new FS.ErrnoError(60);
                  try {
                    for (var a = 0; a < n; a++)
                      e.tty.ops.put_char(e.tty, r[t + a]);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  return n && (e.node.timestamp = Date.now()), a;
                },
              },
              default_tty_ops: {
                get_char: function (e) {
                  if (!e.input.length) {
                    var r = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var t = Buffer.alloc(256),
                        n = 0;
                      try {
                        n = fs.readSync(process.stdin.fd, t, 0, 256, -1);
                      } catch (e) {
                        if (!e.toString().includes("EOF")) throw e;
                        n = 0;
                      }
                      r = n > 0 ? t.slice(0, n).toString("utf-8") : null;
                    } else
                      "undefined" != typeof window &&
                      "function" == typeof window.prompt
                        ? null !== (r = window.prompt("Input: ")) && (r += "\n")
                        : "function" == typeof readline &&
                          null !== (r = readline()) &&
                          (r += "\n");
                    if (!r) return null;
                    e.input = intArrayFromString(r, !0);
                  }
                  return e.input.shift();
                },
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (out(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (out(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
              default_tty1_ops: {
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (err(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (err(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
            };
            function zeroMemory(e, r) {
              return HEAPU8.fill(0, e, e + r), e;
            }
            function alignMemory(e, r) {
              return Math.ceil(e / r) * r;
            }
            function mmapAlloc(e) {
              e = alignMemory(e, 65536);
              var r = _emscripten_builtin_memalign(65536, e);
              return r ? zeroMemory(r, e) : 0;
            }
            var MEMFS = {
              ops_table: null,
              mount: function (e) {
                return MEMFS.createNode(null, "/", 16895, 0);
              },
              createNode: function (e, r, t, n) {
                if (FS.isBlkdev(t) || FS.isFIFO(t)) throw new FS.ErrnoError(63);
                MEMFS.ops_table ||
                  (MEMFS.ops_table = {
                    dir: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink,
                      },
                      stream: { llseek: MEMFS.stream_ops.llseek },
                    },
                    file: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync,
                      },
                    },
                    link: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink,
                      },
                      stream: {},
                    },
                    chrdev: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: FS.chrdev_stream_ops,
                    },
                  });
                var o = FS.createNode(e, r, t, n);
                return (
                  FS.isDir(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.dir.node),
                      (o.stream_ops = MEMFS.ops_table.dir.stream),
                      (o.contents = {}))
                    : FS.isFile(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.file.node),
                      (o.stream_ops = MEMFS.ops_table.file.stream),
                      (o.usedBytes = 0),
                      (o.contents = null))
                    : FS.isLink(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.link.node),
                      (o.stream_ops = MEMFS.ops_table.link.stream))
                    : FS.isChrdev(o.mode) &&
                      ((o.node_ops = MEMFS.ops_table.chrdev.node),
                      (o.stream_ops = MEMFS.ops_table.chrdev.stream)),
                  (o.timestamp = Date.now()),
                  e && ((e.contents[r] = o), (e.timestamp = o.timestamp)),
                  o
                );
              },
              getFileDataAsTypedArray: function (e) {
                return e.contents
                  ? e.contents.subarray
                    ? e.contents.subarray(0, e.usedBytes)
                    : new Uint8Array(e.contents)
                  : new Uint8Array(0);
              },
              expandFileStorage: function (e, r) {
                var t = e.contents ? e.contents.length : 0;
                if (!(t >= r)) {
                  (r = Math.max(r, (t * (t < 1048576 ? 2 : 1.125)) >>> 0)),
                    0 != t && (r = Math.max(r, 256));
                  var n = e.contents;
                  (e.contents = new Uint8Array(r)),
                    e.usedBytes > 0 &&
                      e.contents.set(n.subarray(0, e.usedBytes), 0);
                }
              },
              resizeFileStorage: function (e, r) {
                if (e.usedBytes != r)
                  if (0 == r) (e.contents = null), (e.usedBytes = 0);
                  else {
                    var t = e.contents;
                    (e.contents = new Uint8Array(r)),
                      t &&
                        e.contents.set(t.subarray(0, Math.min(r, e.usedBytes))),
                      (e.usedBytes = r);
                  }
              },
              node_ops: {
                getattr: function (e) {
                  var r = {};
                  return (
                    (r.dev = FS.isChrdev(e.mode) ? e.id : 1),
                    (r.ino = e.id),
                    (r.mode = e.mode),
                    (r.nlink = 1),
                    (r.uid = 0),
                    (r.gid = 0),
                    (r.rdev = e.rdev),
                    FS.isDir(e.mode)
                      ? (r.size = 4096)
                      : FS.isFile(e.mode)
                      ? (r.size = e.usedBytes)
                      : FS.isLink(e.mode)
                      ? (r.size = e.link.length)
                      : (r.size = 0),
                    (r.atime = new Date(e.timestamp)),
                    (r.mtime = new Date(e.timestamp)),
                    (r.ctime = new Date(e.timestamp)),
                    (r.blksize = 4096),
                    (r.blocks = Math.ceil(r.size / r.blksize)),
                    r
                  );
                },
                setattr: function (e, r) {
                  void 0 !== r.mode && (e.mode = r.mode),
                    void 0 !== r.timestamp && (e.timestamp = r.timestamp),
                    void 0 !== r.size && MEMFS.resizeFileStorage(e, r.size);
                },
                lookup: function (e, r) {
                  throw FS.genericErrors[44];
                },
                mknod: function (e, r, t, n) {
                  return MEMFS.createNode(e, r, t, n);
                },
                rename: function (e, r, t) {
                  if (FS.isDir(e.mode)) {
                    var n;
                    try {
                      n = FS.lookupNode(r, t);
                    } catch (e) {}
                    if (n)
                      for (var o in n.contents) throw new FS.ErrnoError(55);
                  }
                  delete e.parent.contents[e.name],
                    (e.parent.timestamp = Date.now()),
                    (e.name = t),
                    (r.contents[t] = e),
                    (r.timestamp = e.parent.timestamp),
                    (e.parent = r);
                },
                unlink: function (e, r) {
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                rmdir: function (e, r) {
                  var t = FS.lookupNode(e, r);
                  for (var n in t.contents) throw new FS.ErrnoError(55);
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                readdir: function (e) {
                  var r = [".", ".."];
                  for (var t in e.contents)
                    e.contents.hasOwnProperty(t) && r.push(t);
                  return r;
                },
                symlink: function (e, r, t) {
                  var n = MEMFS.createNode(e, r, 41471, 0);
                  return (n.link = t), n;
                },
                readlink: function (e) {
                  if (!FS.isLink(e.mode)) throw new FS.ErrnoError(28);
                  return e.link;
                },
              },
              stream_ops: {
                read: function (e, r, t, n, o) {
                  var a = e.node.contents;
                  if (o >= e.node.usedBytes) return 0;
                  var i = Math.min(e.node.usedBytes - o, n);
                  if (i > 8 && a.subarray) r.set(a.subarray(o, o + i), t);
                  else for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                  return i;
                },
                write: function (e, r, t, n, o, a) {
                  if ((r.buffer === HEAP8.buffer && (a = !1), !n)) return 0;
                  var i = e.node;
                  if (
                    ((i.timestamp = Date.now()),
                    r.subarray && (!i.contents || i.contents.subarray))
                  ) {
                    if (a)
                      return (
                        (i.contents = r.subarray(t, t + n)),
                        (i.usedBytes = n),
                        n
                      );
                    if (0 === i.usedBytes && 0 === o)
                      return (
                        (i.contents = r.slice(t, t + n)), (i.usedBytes = n), n
                      );
                    if (o + n <= i.usedBytes)
                      return i.contents.set(r.subarray(t, t + n), o), n;
                  }
                  if (
                    (MEMFS.expandFileStorage(i, o + n),
                    i.contents.subarray && r.subarray)
                  )
                    i.contents.set(r.subarray(t, t + n), o);
                  else for (var s = 0; s < n; s++) i.contents[o + s] = r[t + s];
                  return (i.usedBytes = Math.max(i.usedBytes, o + n)), n;
                },
                llseek: function (e, r, t) {
                  var n = r;
                  if (
                    (1 === t
                      ? (n += e.position)
                      : 2 === t &&
                        FS.isFile(e.node.mode) &&
                        (n += e.node.usedBytes),
                    n < 0)
                  )
                    throw new FS.ErrnoError(28);
                  return n;
                },
                allocate: function (e, r, t) {
                  MEMFS.expandFileStorage(e.node, r + t),
                    (e.node.usedBytes = Math.max(e.node.usedBytes, r + t));
                },
                mmap: function (e, r, t, n, o) {
                  if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);
                  var a,
                    i,
                    s = e.node.contents;
                  if (2 & o || s.buffer !== buffer) {
                    if (
                      ((t > 0 || t + r < s.length) &&
                        (s = s.subarray
                          ? s.subarray(t, t + r)
                          : Array.prototype.slice.call(s, t, t + r)),
                      (i = !0),
                      !(a = mmapAlloc(r)))
                    )
                      throw new FS.ErrnoError(48);
                    HEAP8.set(s, a);
                  } else (i = !1), (a = s.byteOffset);
                  return { ptr: a, allocated: i };
                },
                msync: function (e, r, t, n, o) {
                  return MEMFS.stream_ops.write(e, r, 0, n, t, !1), 0;
                },
              },
            };
            function asyncLoad(e, r, t, n) {
              var o = n ? "" : getUniqueRunDependency("al " + e);
              readAsync(
                e,
                (t) => {
                  assert(
                    t,
                    'Loading data file "' + e + '" failed (no arrayBuffer).'
                  ),
                    r(new Uint8Array(t)),
                    o && removeRunDependency(o);
                },
                (r) => {
                  if (!t) throw 'Loading data file "' + e + '" failed.';
                  t();
                }
              ),
                o && addRunDependency(o);
            }
            var IDBFS = {
                dbs: {},
                indexedDB: () => {
                  if ("undefined" != typeof indexedDB) return indexedDB;
                  var e = null;
                  return (
                    "object" == typeof window &&
                      (e =
                        window.indexedDB ||
                        window.mozIndexedDB ||
                        window.webkitIndexedDB ||
                        window.msIndexedDB),
                    assert(e, "IDBFS used, but indexedDB not supported"),
                    e
                  );
                },
                DB_VERSION: 21,
                DB_STORE_NAME: "FILE_DATA",
                mount: function (e) {
                  return MEMFS.mount.apply(null, arguments);
                },
                syncfs: (e, r, t) => {
                  IDBFS.getLocalSet(e, (n, o) => {
                    if (n) return t(n);
                    IDBFS.getRemoteSet(e, (e, n) => {
                      if (e) return t(e);
                      var a = r ? n : o,
                        i = r ? o : n;
                      IDBFS.reconcile(a, i, t);
                    });
                  });
                },
                quit: () => {
                  Object.values(IDBFS.dbs).forEach((e) => e.close()),
                    (IDBFS.dbs = {});
                },
                getDB: (e, r) => {
                  var t,
                    n = IDBFS.dbs[e];
                  if (n) return r(null, n);
                  try {
                    t = IDBFS.indexedDB().open(e, IDBFS.DB_VERSION);
                  } catch (e) {
                    return r(e);
                  }
                  if (!t) return r("Unable to connect to IndexedDB");
                  (t.onupgradeneeded = (e) => {
                    var r,
                      t = e.target.result,
                      n = e.target.transaction;
                    (r = t.objectStoreNames.contains(IDBFS.DB_STORE_NAME)
                      ? n.objectStore(IDBFS.DB_STORE_NAME)
                      : t.createObjectStore(
                          IDBFS.DB_STORE_NAME
                        )).indexNames.contains("timestamp") ||
                      r.createIndex("timestamp", "timestamp", { unique: !1 });
                  }),
                    (t.onsuccess = () => {
                      (n = t.result), (IDBFS.dbs[e] = n), r(null, n);
                    }),
                    (t.onerror = (e) => {
                      r(this.error), e.preventDefault();
                    });
                },
                getLocalSet: (e, r) => {
                  var t = {};
                  function n(e) {
                    return "." !== e && ".." !== e;
                  }
                  function o(e) {
                    return (r) => PATH.join2(e, r);
                  }
                  for (
                    var a = FS.readdir(e.mountpoint)
                      .filter(n)
                      .map(o(e.mountpoint));
                    a.length;

                  ) {
                    var i,
                      s = a.pop();
                    try {
                      i = FS.stat(s);
                    } catch (e) {
                      return r(e);
                    }
                    FS.isDir(i.mode) &&
                      a.push.apply(a, FS.readdir(s).filter(n).map(o(s))),
                      (t[s] = { timestamp: i.mtime });
                  }
                  return r(null, { type: "local", entries: t });
                },
                getRemoteSet: (e, r) => {
                  var t = {};
                  IDBFS.getDB(e.mountpoint, (e, n) => {
                    if (e) return r(e);
                    try {
                      var o = n.transaction([IDBFS.DB_STORE_NAME], "readonly");
                      (o.onerror = (e) => {
                        r(this.error), e.preventDefault();
                      }),
                        (o
                          .objectStore(IDBFS.DB_STORE_NAME)
                          .index("timestamp")
                          .openKeyCursor().onsuccess = (e) => {
                          var o = e.target.result;
                          if (!o)
                            return r(null, {
                              type: "remote",
                              db: n,
                              entries: t,
                            });
                          (t[o.primaryKey] = { timestamp: o.key }),
                            o.continue();
                        });
                    } catch (e) {
                      return r(e);
                    }
                  });
                },
                loadLocalEntry: (e, r) => {
                  var t, n;
                  try {
                    (n = FS.lookupPath(e).node), (t = FS.stat(e));
                  } catch (e) {
                    return r(e);
                  }
                  return FS.isDir(t.mode)
                    ? r(null, { timestamp: t.mtime, mode: t.mode })
                    : FS.isFile(t.mode)
                    ? ((n.contents = MEMFS.getFileDataAsTypedArray(n)),
                      r(null, {
                        timestamp: t.mtime,
                        mode: t.mode,
                        contents: n.contents,
                      }))
                    : r(new Error("node type not supported"));
                },
                storeLocalEntry: (e, r, t) => {
                  try {
                    if (FS.isDir(r.mode)) FS.mkdirTree(e, r.mode);
                    else {
                      if (!FS.isFile(r.mode))
                        return t(new Error("node type not supported"));
                      FS.writeFile(e, r.contents, { canOwn: !0 });
                    }
                    FS.chmod(e, r.mode), FS.utime(e, r.timestamp, r.timestamp);
                  } catch (e) {
                    return t(e);
                  }
                  t(null);
                },
                removeLocalEntry: (e, r) => {
                  try {
                    var t = FS.stat(e);
                    FS.isDir(t.mode)
                      ? FS.rmdir(e)
                      : FS.isFile(t.mode) && FS.unlink(e);
                  } catch (e) {
                    return r(e);
                  }
                  r(null);
                },
                loadRemoteEntry: (e, r, t) => {
                  var n = e.get(r);
                  (n.onsuccess = (e) => {
                    t(null, e.target.result);
                  }),
                    (n.onerror = (e) => {
                      t(this.error), e.preventDefault();
                    });
                },
                storeRemoteEntry: (e, r, t, n) => {
                  try {
                    var o = e.put(t, r);
                  } catch (e) {
                    return void n(e);
                  }
                  (o.onsuccess = () => {
                    n(null);
                  }),
                    (o.onerror = (e) => {
                      n(this.error), e.preventDefault();
                    });
                },
                removeRemoteEntry: (e, r, t) => {
                  var n = e.delete(r);
                  (n.onsuccess = () => {
                    t(null);
                  }),
                    (n.onerror = (e) => {
                      t(this.error), e.preventDefault();
                    });
                },
                reconcile: (e, r, t) => {
                  var n = 0,
                    o = [];
                  Object.keys(e.entries).forEach(function (t) {
                    var a = e.entries[t],
                      i = r.entries[t];
                    (i && a.timestamp.getTime() == i.timestamp.getTime()) ||
                      (o.push(t), n++);
                  });
                  var a = [];
                  if (
                    (Object.keys(r.entries).forEach(function (r) {
                      e.entries[r] || (a.push(r), n++);
                    }),
                    !n)
                  )
                    return t(null);
                  var i = !1,
                    s = ("remote" === e.type ? e.db : r.db).transaction(
                      [IDBFS.DB_STORE_NAME],
                      "readwrite"
                    ),
                    c = s.objectStore(IDBFS.DB_STORE_NAME);
                  function u(e) {
                    if (e && !i) return (i = !0), t(e);
                  }
                  (s.onerror = (e) => {
                    u(this.error), e.preventDefault();
                  }),
                    (s.oncomplete = (e) => {
                      i || t(null);
                    }),
                    o.sort().forEach((e) => {
                      "local" === r.type
                        ? IDBFS.loadRemoteEntry(c, e, (r, t) => {
                            if (r) return u(r);
                            IDBFS.storeLocalEntry(e, t, u);
                          })
                        : IDBFS.loadLocalEntry(e, (r, t) => {
                            if (r) return u(r);
                            IDBFS.storeRemoteEntry(c, e, t, u);
                          });
                    }),
                    a
                      .sort()
                      .reverse()
                      .forEach((e) => {
                        "local" === r.type
                          ? IDBFS.removeLocalEntry(e, u)
                          : IDBFS.removeRemoteEntry(c, e, u);
                      });
                },
              },
              ERRNO_CODES = {},
              NODEFS = {
                isWindows: !1,
                staticInit: () => {
                  NODEFS.isWindows = !!process.platform.match(/^win/);
                  var e = process.binding("constants");
                  e.fs && (e = e.fs),
                    (NODEFS.flagsForNodeMap = {
                      1024: e.O_APPEND,
                      64: e.O_CREAT,
                      128: e.O_EXCL,
                      256: e.O_NOCTTY,
                      0: e.O_RDONLY,
                      2: e.O_RDWR,
                      4096: e.O_SYNC,
                      512: e.O_TRUNC,
                      1: e.O_WRONLY,
                      131072: e.O_NOFOLLOW,
                    });
                },
                convertNodeCode: (e) => {
                  var r = e.code;
                  return ERRNO_CODES[r];
                },
                mount: (e) =>
                  NODEFS.createNode(null, "/", NODEFS.getMode(e.opts.root), 0),
                createNode: (e, r, t, n) => {
                  if (!FS.isDir(t) && !FS.isFile(t) && !FS.isLink(t))
                    throw new FS.ErrnoError(28);
                  var o = FS.createNode(e, r, t);
                  return (
                    (o.node_ops = NODEFS.node_ops),
                    (o.stream_ops = NODEFS.stream_ops),
                    o
                  );
                },
                getMode: (e) => {
                  var r;
                  try {
                    (r = fs.lstatSync(e)),
                      NODEFS.isWindows &&
                        (r.mode = r.mode | ((292 & r.mode) >> 2));
                  } catch (e) {
                    if (!e.code) throw e;
                    throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                  }
                  return r.mode;
                },
                realPath: (e) => {
                  for (var r = []; e.parent !== e; )
                    r.push(e.name), (e = e.parent);
                  return (
                    r.push(e.mount.opts.root),
                    r.reverse(),
                    PATH.join.apply(null, r)
                  );
                },
                flagsForNode: (e) => {
                  (e &= -2097153),
                    (e &= -2049),
                    (e &= -32769),
                    (e &= -524289),
                    (e &= -65537);
                  var r = 0;
                  for (var t in NODEFS.flagsForNodeMap)
                    e & t && ((r |= NODEFS.flagsForNodeMap[t]), (e ^= t));
                  if (e) throw new FS.ErrnoError(28);
                  return r;
                },
                node_ops: {
                  getattr: (e) => {
                    var r,
                      t = NODEFS.realPath(e);
                    try {
                      r = fs.lstatSync(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                    return (
                      NODEFS.isWindows && !r.blksize && (r.blksize = 4096),
                      NODEFS.isWindows &&
                        !r.blocks &&
                        (r.blocks = ((r.size + r.blksize - 1) / r.blksize) | 0),
                      {
                        dev: r.dev,
                        ino: r.ino,
                        mode: r.mode,
                        nlink: r.nlink,
                        uid: r.uid,
                        gid: r.gid,
                        rdev: r.rdev,
                        size: r.size,
                        atime: r.atime,
                        mtime: r.mtime,
                        ctime: r.ctime,
                        blksize: r.blksize,
                        blocks: r.blocks,
                      }
                    );
                  },
                  setattr: (e, r) => {
                    var t = NODEFS.realPath(e);
                    try {
                      if (
                        (void 0 !== r.mode &&
                          (fs.chmodSync(t, r.mode), (e.mode = r.mode)),
                        void 0 !== r.timestamp)
                      ) {
                        var n = new Date(r.timestamp);
                        fs.utimesSync(t, n, n);
                      }
                      void 0 !== r.size && fs.truncateSync(t, r.size);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  lookup: (e, r) => {
                    var t = PATH.join2(NODEFS.realPath(e), r),
                      n = NODEFS.getMode(t);
                    return NODEFS.createNode(e, r, n);
                  },
                  mknod: (e, r, t, n) => {
                    var o = NODEFS.createNode(e, r, t, n),
                      a = NODEFS.realPath(o);
                    try {
                      FS.isDir(o.mode)
                        ? fs.mkdirSync(a, o.mode)
                        : fs.writeFileSync(a, "", { mode: o.mode });
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                    return o;
                  },
                  rename: (e, r, t) => {
                    var n = NODEFS.realPath(e),
                      o = PATH.join2(NODEFS.realPath(r), t);
                    try {
                      fs.renameSync(n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                    e.name = t;
                  },
                  unlink: (e, r) => {
                    var t = PATH.join2(NODEFS.realPath(e), r);
                    try {
                      fs.unlinkSync(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  rmdir: (e, r) => {
                    var t = PATH.join2(NODEFS.realPath(e), r);
                    try {
                      fs.rmdirSync(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  readdir: (e) => {
                    var r = NODEFS.realPath(e);
                    try {
                      return fs.readdirSync(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  symlink: (e, r, t) => {
                    var n = PATH.join2(NODEFS.realPath(e), r);
                    try {
                      fs.symlinkSync(t, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  readlink: (e) => {
                    var r = NODEFS.realPath(e);
                    try {
                      return (
                        (r = fs.readlinkSync(r)),
                        (r = nodePath.relative(
                          nodePath.resolve(e.mount.opts.root),
                          r
                        ))
                      );
                    } catch (e) {
                      if (!e.code) throw e;
                      if ("UNKNOWN" === e.code) throw new FS.ErrnoError(28);
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                },
                stream_ops: {
                  open: (e) => {
                    var r = NODEFS.realPath(e.node);
                    try {
                      FS.isFile(e.node.mode) &&
                        (e.nfd = fs.openSync(r, NODEFS.flagsForNode(e.flags)));
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  close: (e) => {
                    try {
                      FS.isFile(e.node.mode) && e.nfd && fs.closeSync(e.nfd);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  read: (e, r, t, n, o) => {
                    if (0 === n) return 0;
                    try {
                      return fs.readSync(e.nfd, Buffer.from(r.buffer), t, n, o);
                    } catch (e) {
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  write: (e, r, t, n, o) => {
                    try {
                      return fs.writeSync(
                        e.nfd,
                        Buffer.from(r.buffer),
                        t,
                        n,
                        o
                      );
                    } catch (e) {
                      throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                    }
                  },
                  llseek: (e, r, t) => {
                    var n = r;
                    if (1 === t) n += e.position;
                    else if (2 === t && FS.isFile(e.node.mode))
                      try {
                        n += fs.fstatSync(e.nfd).size;
                      } catch (e) {
                        throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
                      }
                    if (n < 0) throw new FS.ErrnoError(28);
                    return n;
                  },
                  mmap: (e, r, t, n, o) => {
                    if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);
                    var a = mmapAlloc(r);
                    return (
                      NODEFS.stream_ops.read(e, HEAP8, a, r, t),
                      { ptr: a, allocated: !0 }
                    );
                  },
                  msync: (e, r, t, n, o) => (
                    NODEFS.stream_ops.write(e, r, 0, n, t, !1), 0
                  ),
                },
              },
              WORKERFS = {
                DIR_MODE: 16895,
                FILE_MODE: 33279,
                reader: null,
                mount: function (e) {
                  assert(ENVIRONMENT_IS_WORKER),
                    WORKERFS.reader || (WORKERFS.reader = new FileReaderSync());
                  var r = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0),
                    t = {};
                  function n(e) {
                    for (
                      var n = e.split("/"), o = r, a = 0;
                      a < n.length - 1;
                      a++
                    ) {
                      var i = n.slice(0, a + 1).join("/");
                      t[i] ||
                        (t[i] = WORKERFS.createNode(
                          o,
                          n[a],
                          WORKERFS.DIR_MODE,
                          0
                        )),
                        (o = t[i]);
                    }
                    return o;
                  }
                  function o(e) {
                    var r = e.split("/");
                    return r[r.length - 1];
                  }
                  return (
                    Array.prototype.forEach.call(
                      e.opts.files || [],
                      function (e) {
                        WORKERFS.createNode(
                          n(e.name),
                          o(e.name),
                          WORKERFS.FILE_MODE,
                          0,
                          e,
                          e.lastModifiedDate
                        );
                      }
                    ),
                    (e.opts.blobs || []).forEach(function (e) {
                      WORKERFS.createNode(
                        n(e.name),
                        o(e.name),
                        WORKERFS.FILE_MODE,
                        0,
                        e.data
                      );
                    }),
                    (e.opts.packages || []).forEach(function (e) {
                      e.metadata.files.forEach(function (r) {
                        var t = r.filename.substr(1);
                        WORKERFS.createNode(
                          n(t),
                          o(t),
                          WORKERFS.FILE_MODE,
                          0,
                          e.blob.slice(r.start, r.end)
                        );
                      });
                    }),
                    r
                  );
                },
                createNode: function (e, r, t, n, o, a) {
                  var i = FS.createNode(e, r, t);
                  return (
                    (i.mode = t),
                    (i.node_ops = WORKERFS.node_ops),
                    (i.stream_ops = WORKERFS.stream_ops),
                    (i.timestamp = (a || new Date()).getTime()),
                    assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE),
                    t === WORKERFS.FILE_MODE
                      ? ((i.size = o.size), (i.contents = o))
                      : ((i.size = 4096), (i.contents = {})),
                    e && (e.contents[r] = i),
                    i
                  );
                },
                node_ops: {
                  getattr: function (e) {
                    return {
                      dev: 1,
                      ino: e.id,
                      mode: e.mode,
                      nlink: 1,
                      uid: 0,
                      gid: 0,
                      rdev: void 0,
                      size: e.size,
                      atime: new Date(e.timestamp),
                      mtime: new Date(e.timestamp),
                      ctime: new Date(e.timestamp),
                      blksize: 4096,
                      blocks: Math.ceil(e.size / 4096),
                    };
                  },
                  setattr: function (e, r) {
                    void 0 !== r.mode && (e.mode = r.mode),
                      void 0 !== r.timestamp && (e.timestamp = r.timestamp);
                  },
                  lookup: function (e, r) {
                    throw new FS.ErrnoError(44);
                  },
                  mknod: function (e, r, t, n) {
                    throw new FS.ErrnoError(63);
                  },
                  rename: function (e, r, t) {
                    throw new FS.ErrnoError(63);
                  },
                  unlink: function (e, r) {
                    throw new FS.ErrnoError(63);
                  },
                  rmdir: function (e, r) {
                    throw new FS.ErrnoError(63);
                  },
                  readdir: function (e) {
                    var r = [".", ".."];
                    for (var t in e.contents)
                      e.contents.hasOwnProperty(t) && r.push(t);
                    return r;
                  },
                  symlink: function (e, r, t) {
                    throw new FS.ErrnoError(63);
                  },
                  readlink: function (e) {
                    throw new FS.ErrnoError(63);
                  },
                },
                stream_ops: {
                  read: function (e, r, t, n, o) {
                    if (o >= e.node.size) return 0;
                    var a = e.node.contents.slice(o, o + n),
                      i = WORKERFS.reader.readAsArrayBuffer(a);
                    return r.set(new Uint8Array(i), t), a.size;
                  },
                  write: function (e, r, t, n, o) {
                    throw new FS.ErrnoError(29);
                  },
                  llseek: function (e, r, t) {
                    var n = r;
                    if (
                      (1 === t
                        ? (n += e.position)
                        : 2 === t &&
                          FS.isFile(e.node.mode) &&
                          (n += e.node.size),
                      n < 0)
                    )
                      throw new FS.ErrnoError(28);
                    return n;
                  },
                },
              },
              PROXYFS = {
                mount: function (e) {
                  return PROXYFS.createNode(
                    null,
                    "/",
                    e.opts.fs.lstat(e.opts.root).mode,
                    0
                  );
                },
                createNode: function (e, r, t, n) {
                  if (!FS.isDir(t) && !FS.isFile(t) && !FS.isLink(t))
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                  var o = FS.createNode(e, r, t);
                  return (
                    (o.node_ops = PROXYFS.node_ops),
                    (o.stream_ops = PROXYFS.stream_ops),
                    o
                  );
                },
                realPath: function (e) {
                  for (var r = []; e.parent !== e; )
                    r.push(e.name), (e = e.parent);
                  return (
                    r.push(e.mount.opts.root),
                    r.reverse(),
                    PATH.join.apply(null, r)
                  );
                },
                node_ops: {
                  getattr: function (e) {
                    var r,
                      t = PROXYFS.realPath(e);
                    try {
                      r = e.mount.opts.fs.lstat(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return {
                      dev: r.dev,
                      ino: r.ino,
                      mode: r.mode,
                      nlink: r.nlink,
                      uid: r.uid,
                      gid: r.gid,
                      rdev: r.rdev,
                      size: r.size,
                      atime: r.atime,
                      mtime: r.mtime,
                      ctime: r.ctime,
                      blksize: r.blksize,
                      blocks: r.blocks,
                    };
                  },
                  setattr: function (e, r) {
                    var t = PROXYFS.realPath(e);
                    try {
                      if (
                        (void 0 !== r.mode &&
                          (e.mount.opts.fs.chmod(t, r.mode), (e.mode = r.mode)),
                        void 0 !== r.timestamp)
                      ) {
                        var n = new Date(r.timestamp);
                        e.mount.opts.fs.utime(t, n, n);
                      }
                      void 0 !== r.size && e.mount.opts.fs.truncate(t, r.size);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  lookup: function (e, r) {
                    try {
                      var t = PATH.join2(PROXYFS.realPath(e), r),
                        n = e.mount.opts.fs.lstat(t).mode;
                      return PROXYFS.createNode(e, r, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  mknod: function (e, r, t, n) {
                    var o = PROXYFS.createNode(e, r, t, n),
                      a = PROXYFS.realPath(o);
                    try {
                      FS.isDir(o.mode)
                        ? o.mount.opts.fs.mkdir(a, o.mode)
                        : o.mount.opts.fs.writeFile(a, "", { mode: o.mode });
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return o;
                  },
                  rename: function (e, r, t) {
                    var n = PROXYFS.realPath(e),
                      o = PATH.join2(PROXYFS.realPath(r), t);
                    try {
                      e.mount.opts.fs.rename(n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  unlink: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.unlink(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  rmdir: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.rmdir(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readdir: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readdir(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  symlink: function (e, r, t) {
                    var n = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.symlink(t, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readlink: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readlink(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                },
                stream_ops: {
                  open: function (e) {
                    var r = PROXYFS.realPath(e.node);
                    try {
                      e.nfd = e.node.mount.opts.fs.open(r, e.flags);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  close: function (e) {
                    try {
                      e.node.mount.opts.fs.close(e.nfd);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  read: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.read(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  write: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.write(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  llseek: function (e, r, t) {
                    var n = r;
                    if (1 === t) n += e.position;
                    else if (2 === t && FS.isFile(e.node.mode))
                      try {
                        n += e.node.node_ops.getattr(e.node).size;
                      } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                      }
                    if (n < 0) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                    return n;
                  },
                },
              },
              FS = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, r = {}) => {
                  if (!(e = PATH_FS.resolve(FS.cwd(), e)))
                    return { path: "", node: null };
                  if (
                    (r = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      r
                    )).recurse_count > 8
                  )
                    throw new FS.ErrnoError(32);
                  for (
                    var t = PATH.normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !1
                      ),
                      n = FS.root,
                      o = "/",
                      a = 0;
                    a < t.length;
                    a++
                  ) {
                    var i = a === t.length - 1;
                    if (i && r.parent) break;
                    if (
                      ((n = FS.lookupNode(n, t[a])),
                      (o = PATH.join2(o, t[a])),
                      FS.isMountpoint(n) &&
                        (!i || (i && r.follow_mount)) &&
                        (n = n.mounted.root),
                      !i || r.follow)
                    )
                      for (var s = 0; FS.isLink(n.mode); ) {
                        var c = FS.readlink(o);
                        if (
                          ((o = PATH_FS.resolve(PATH.dirname(o), c)),
                          (n = FS.lookupPath(o, {
                            recurse_count: r.recurse_count + 1,
                          }).node),
                          s++ > 40)
                        )
                          throw new FS.ErrnoError(32);
                      }
                  }
                  return { path: o, node: n };
                },
                getPath: (e) => {
                  for (var r; ; ) {
                    if (FS.isRoot(e)) {
                      var t = e.mount.mountpoint;
                      return r
                        ? "/" !== t[t.length - 1]
                          ? t + "/" + r
                          : t + r
                        : t;
                    }
                    (r = r ? e.name + "/" + r : e.name), (e = e.parent);
                  }
                },
                hashName: (e, r) => {
                  for (var t = 0, n = 0; n < r.length; n++)
                    t = ((t << 5) - t + r.charCodeAt(n)) | 0;
                  return ((e + t) >>> 0) % FS.nameTable.length;
                },
                hashAddNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  (e.name_next = FS.nameTable[r]), (FS.nameTable[r] = e);
                },
                hashRemoveNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  if (FS.nameTable[r] === e) FS.nameTable[r] = e.name_next;
                  else
                    for (var t = FS.nameTable[r]; t; ) {
                      if (t.name_next === e) {
                        t.name_next = e.name_next;
                        break;
                      }
                      t = t.name_next;
                    }
                },
                lookupNode: (e, r) => {
                  var t = FS.mayLookup(e);
                  if (t) throw new FS.ErrnoError(t, e);
                  for (
                    var n = FS.hashName(e.id, r), o = FS.nameTable[n];
                    o;
                    o = o.name_next
                  ) {
                    var a = o.name;
                    if (o.parent.id === e.id && a === r) return o;
                  }
                  return FS.lookup(e, r);
                },
                createNode: (e, r, t, n) => {
                  var o = new FS.FSNode(e, r, t, n);
                  return FS.hashAddNode(o), o;
                },
                destroyNode: (e) => {
                  FS.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagModes: {
                  r: 0,
                  "r+": 2,
                  w: 577,
                  "w+": 578,
                  a: 1089,
                  "a+": 1090,
                },
                modeStringToFlags: (e) => {
                  var r = FS.flagModes[e];
                  if (void 0 === r)
                    throw new Error("Unknown file open mode: " + e);
                  return r;
                },
                flagsToPermissionString: (e) => {
                  var r = ["r", "w", "rw"][3 & e];
                  return 512 & e && (r += "w"), r;
                },
                nodePermissions: (e, r) =>
                  FS.ignorePermissions ||
                  ((!r.includes("r") || 292 & e.mode) &&
                    (!r.includes("w") || 146 & e.mode) &&
                    (!r.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  FS.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, r) => {
                  try {
                    return FS.lookupNode(e, r), 20;
                  } catch (e) {}
                  return FS.nodePermissions(e, "wx");
                },
                mayDelete: (e, r, t) => {
                  var n;
                  try {
                    n = FS.lookupNode(e, r);
                  } catch (e) {
                    return e.errno;
                  }
                  var o = FS.nodePermissions(e, "wx");
                  if (o) return o;
                  if (t) {
                    if (!FS.isDir(n.mode)) return 54;
                    if (FS.isRoot(n) || FS.getPath(n) === FS.cwd()) return 10;
                  } else if (FS.isDir(n.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, r) =>
                  e
                    ? FS.isLink(e.mode)
                      ? 32
                      : FS.isDir(e.mode) &&
                        ("r" !== FS.flagsToPermissionString(r) || 512 & r)
                      ? 31
                      : FS.nodePermissions(e, FS.flagsToPermissionString(r))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: (e = 0, r = FS.MAX_OPEN_FDS) => {
                  for (var t = e; t <= r; t++) if (!FS.streams[t]) return t;
                  throw new FS.ErrnoError(33);
                },
                getStream: (e) => FS.streams[e],
                createStream: (e, r, t) => {
                  FS.FSStream ||
                    ((FS.FSStream = function () {
                      this.shared = {};
                    }),
                    (FS.FSStream.prototype = {}),
                    Object.defineProperties(FS.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                    (e = Object.assign(new FS.FSStream(), e));
                  var n = FS.nextfd(r, t);
                  return (e.fd = n), (FS.streams[n] = e), e;
                },
                closeStream: (e) => {
                  FS.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var r = FS.getDevice(e.node.rdev);
                    (e.stream_ops = r.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new FS.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, r) => (e << 8) | r,
                registerDevice: (e, r) => {
                  FS.devices[e] = { stream_ops: r };
                },
                getDevice: (e) => FS.devices[e],
                getMounts: (e) => {
                  for (var r = [], t = [e]; t.length; ) {
                    var n = t.pop();
                    r.push(n), t.push.apply(t, n.mounts);
                  }
                  return r;
                },
                syncfs: (e, r) => {
                  "function" == typeof e && ((r = e), (e = !1)),
                    FS.syncFSRequests++,
                    FS.syncFSRequests > 1 &&
                      err(
                        "warning: " +
                          FS.syncFSRequests +
                          " FS.syncfs operations in flight at once, probably just doing extra work"
                      );
                  var t = FS.getMounts(FS.root.mount),
                    n = 0;
                  function o(e) {
                    return FS.syncFSRequests--, r(e);
                  }
                  function a(e) {
                    if (e) return a.errored ? void 0 : ((a.errored = !0), o(e));
                    ++n >= t.length && o(null);
                  }
                  t.forEach((r) => {
                    if (!r.type.syncfs) return a(null);
                    r.type.syncfs(r, e, a);
                  });
                },
                mount: (e, r, t) => {
                  var n,
                    o = "/" === t,
                    a = !t;
                  if (o && FS.root) throw new FS.ErrnoError(10);
                  if (!o && !a) {
                    var i = FS.lookupPath(t, { follow_mount: !1 });
                    if (((t = i.path), (n = i.node), FS.isMountpoint(n)))
                      throw new FS.ErrnoError(10);
                    if (!FS.isDir(n.mode)) throw new FS.ErrnoError(54);
                  }
                  var s = { type: e, opts: r, mountpoint: t, mounts: [] },
                    c = e.mount(s);
                  return (
                    (c.mount = s),
                    (s.root = c),
                    o
                      ? (FS.root = c)
                      : n &&
                        ((n.mounted = s), n.mount && n.mount.mounts.push(s)),
                    c
                  );
                },
                unmount: (e) => {
                  var r = FS.lookupPath(e, { follow_mount: !1 });
                  if (!FS.isMountpoint(r.node)) throw new FS.ErrnoError(28);
                  var t = r.node,
                    n = t.mounted,
                    o = FS.getMounts(n);
                  Object.keys(FS.nameTable).forEach((e) => {
                    for (var r = FS.nameTable[e]; r; ) {
                      var t = r.name_next;
                      o.includes(r.mount) && FS.destroyNode(r), (r = t);
                    }
                  }),
                    (t.mounted = null);
                  var a = t.mount.mounts.indexOf(n);
                  t.mount.mounts.splice(a, 1);
                },
                lookup: (e, r) => e.node_ops.lookup(e, r),
                mknod: (e, r, t) => {
                  var n = FS.lookupPath(e, { parent: !0 }).node,
                    o = PATH.basename(e);
                  if (!o || "." === o || ".." === o)
                    throw new FS.ErrnoError(28);
                  var a = FS.mayCreate(n, o);
                  if (a) throw new FS.ErrnoError(a);
                  if (!n.node_ops.mknod) throw new FS.ErrnoError(63);
                  return n.node_ops.mknod(n, o, r, t);
                },
                create: (e, r) => (
                  (r = void 0 !== r ? r : 438),
                  (r &= 4095),
                  (r |= 32768),
                  FS.mknod(e, r, 0)
                ),
                mkdir: (e, r) => (
                  (r = void 0 !== r ? r : 511),
                  (r &= 1023),
                  (r |= 16384),
                  FS.mknod(e, r, 0)
                ),
                mkdirTree: (e, r) => {
                  for (var t = e.split("/"), n = "", o = 0; o < t.length; ++o)
                    if (t[o]) {
                      n += "/" + t[o];
                      try {
                        FS.mkdir(n, r);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, r, t) => (
                  void 0 === t && ((t = r), (r = 438)),
                  (r |= 8192),
                  FS.mknod(e, r, t)
                ),
                symlink: (e, r) => {
                  if (!PATH_FS.resolve(e)) throw new FS.ErrnoError(44);
                  var t = FS.lookupPath(r, { parent: !0 }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  var n = PATH.basename(r),
                    o = FS.mayCreate(t, n);
                  if (o) throw new FS.ErrnoError(o);
                  if (!t.node_ops.symlink) throw new FS.ErrnoError(63);
                  return t.node_ops.symlink(t, n, e);
                },
                rename: (e, r) => {
                  var t,
                    n,
                    o = PATH.dirname(e),
                    a = PATH.dirname(r),
                    i = PATH.basename(e),
                    s = PATH.basename(r);
                  if (
                    ((t = FS.lookupPath(e, { parent: !0 }).node),
                    (n = FS.lookupPath(r, { parent: !0 }).node),
                    !t || !n)
                  )
                    throw new FS.ErrnoError(44);
                  if (t.mount !== n.mount) throw new FS.ErrnoError(75);
                  var c,
                    u = FS.lookupNode(t, i),
                    l = PATH_FS.relative(e, a);
                  if ("." !== l.charAt(0)) throw new FS.ErrnoError(28);
                  if ("." !== (l = PATH_FS.relative(r, o)).charAt(0))
                    throw new FS.ErrnoError(55);
                  try {
                    c = FS.lookupNode(n, s);
                  } catch (e) {}
                  if (u !== c) {
                    var d = FS.isDir(u.mode),
                      f = FS.mayDelete(t, i, d);
                    if (f) throw new FS.ErrnoError(f);
                    if ((f = c ? FS.mayDelete(n, s, d) : FS.mayCreate(n, s)))
                      throw new FS.ErrnoError(f);
                    if (!t.node_ops.rename) throw new FS.ErrnoError(63);
                    if (FS.isMountpoint(u) || (c && FS.isMountpoint(c)))
                      throw new FS.ErrnoError(10);
                    if (n !== t && (f = FS.nodePermissions(t, "w")))
                      throw new FS.ErrnoError(f);
                    FS.hashRemoveNode(u);
                    try {
                      t.node_ops.rename(u, n, s);
                    } catch (e) {
                      throw e;
                    } finally {
                      FS.hashAddNode(u);
                    }
                  }
                },
                rmdir: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node,
                    t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !0);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.rmdir) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.rmdir(r, t), FS.destroyNode(n);
                },
                readdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 }).node;
                  if (!r.node_ops.readdir) throw new FS.ErrnoError(54);
                  return r.node_ops.readdir(r);
                },
                unlink: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node;
                  if (!r) throw new FS.ErrnoError(44);
                  var t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !1);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.unlink) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.unlink(r, t), FS.destroyNode(n);
                },
                readlink: (e) => {
                  var r = FS.lookupPath(e).node;
                  if (!r) throw new FS.ErrnoError(44);
                  if (!r.node_ops.readlink) throw new FS.ErrnoError(28);
                  return PATH_FS.resolve(
                    FS.getPath(r.parent),
                    r.node_ops.readlink(r)
                  );
                },
                stat: (e, r) => {
                  var t = FS.lookupPath(e, { follow: !r }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  if (!t.node_ops.getattr) throw new FS.ErrnoError(63);
                  return t.node_ops.getattr(t);
                },
                lstat: (e) => FS.stat(e, !0),
                chmod: (e, r, t) => {
                  var n;
                  if (
                    !(n =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !t }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  n.node_ops.setattr(n, {
                    mode: (4095 & r) | (-4096 & n.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, r) => {
                  FS.chmod(e, r, !0);
                },
                fchmod: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  FS.chmod(t.node, r);
                },
                chown: (e, r, t, n) => {
                  var o;
                  if (
                    !(o =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !n }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  o.node_ops.setattr(o, { timestamp: Date.now() });
                },
                lchown: (e, r, t) => {
                  FS.chown(e, r, t, !0);
                },
                fchown: (e, r, t) => {
                  var n = FS.getStream(e);
                  if (!n) throw new FS.ErrnoError(8);
                  FS.chown(n.node, r, t);
                },
                truncate: (e, r) => {
                  if (r < 0) throw new FS.ErrnoError(28);
                  var t;
                  if (
                    !(t =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  if (FS.isDir(t.mode)) throw new FS.ErrnoError(31);
                  if (!FS.isFile(t.mode)) throw new FS.ErrnoError(28);
                  var n = FS.nodePermissions(t, "w");
                  if (n) throw new FS.ErrnoError(n);
                  t.node_ops.setattr(t, { size: r, timestamp: Date.now() });
                },
                ftruncate: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & t.flags)) throw new FS.ErrnoError(28);
                  FS.truncate(t.node, r);
                },
                utime: (e, r, t) => {
                  var n = FS.lookupPath(e, { follow: !0 }).node;
                  n.node_ops.setattr(n, { timestamp: Math.max(r, t) });
                },
                open: (e, r, t) => {
                  if ("" === e) throw new FS.ErrnoError(44);
                  var n;
                  if (
                    ((t = void 0 === t ? 438 : t),
                    (t =
                      64 &
                      (r = "string" == typeof r ? FS.modeStringToFlags(r) : r)
                        ? (4095 & t) | 32768
                        : 0),
                    "object" == typeof e)
                  )
                    n = e;
                  else {
                    e = PATH.normalize(e);
                    try {
                      n = FS.lookupPath(e, { follow: !(131072 & r) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & r)
                    if (n) {
                      if (128 & r) throw new FS.ErrnoError(20);
                    } else (n = FS.mknod(e, t, 0)), (o = !0);
                  if (!n) throw new FS.ErrnoError(44);
                  if (
                    (FS.isChrdev(n.mode) && (r &= -513),
                    65536 & r && !FS.isDir(n.mode))
                  )
                    throw new FS.ErrnoError(54);
                  if (!o) {
                    var a = FS.mayOpen(n, r);
                    if (a) throw new FS.ErrnoError(a);
                  }
                  512 & r && !o && FS.truncate(n, 0), (r &= -131713);
                  var i = FS.createStream({
                    node: n,
                    path: FS.getPath(n),
                    flags: r,
                    seekable: !0,
                    position: 0,
                    stream_ops: n.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    i.stream_ops.open && i.stream_ops.open(i),
                    !Module.logReadFiles ||
                      1 & r ||
                      (FS.readFiles || (FS.readFiles = {}),
                      e in FS.readFiles || (FS.readFiles[e] = 1)),
                    i
                  );
                },
                close: (e) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new FS.ErrnoError(70);
                  if (0 != t && 1 != t && 2 != t) throw new FS.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, r, t)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, r, t, n, o) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.read) throw new FS.ErrnoError(28);
                  var a = void 0 !== o;
                  if (a) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var i = e.stream_ops.read(e, r, t, n, o);
                  return a || (e.position += i), i;
                },
                write: (e, r, t, n, o, a) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.write) throw new FS.ErrnoError(28);
                  e.seekable && 1024 & e.flags && FS.llseek(e, 0, 2);
                  var i = void 0 !== o;
                  if (i) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var s = e.stream_ops.write(e, r, t, n, o, a);
                  return i || (e.position += s), s;
                },
                allocate: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (r < 0 || t <= 0) throw new FS.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode))
                    throw new FS.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new FS.ErrnoError(138);
                  e.stream_ops.allocate(e, r, t);
                },
                mmap: (e, r, t, n, o) => {
                  if (0 != (2 & n) && 0 == (2 & o) && 2 != (2097155 & e.flags))
                    throw new FS.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new FS.ErrnoError(43);
                  return e.stream_ops.mmap(e, r, t, n, o);
                },
                msync: (e, r, t, n, o) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, r, t, n, o) : 0,
                munmap: (e) => 0,
                ioctl: (e, r, t) => {
                  if (!e.stream_ops.ioctl) throw new FS.ErrnoError(59);
                  return e.stream_ops.ioctl(e, r, t);
                },
                readFile: (e, r = {}) => {
                  if (
                    ((r.flags = r.flags || 0),
                    (r.encoding = r.encoding || "binary"),
                    "utf8" !== r.encoding && "binary" !== r.encoding)
                  )
                    throw new Error(
                      'Invalid encoding type "' + r.encoding + '"'
                    );
                  var t,
                    n = FS.open(e, r.flags),
                    o = FS.stat(e).size,
                    a = new Uint8Array(o);
                  return (
                    FS.read(n, a, 0, o, 0),
                    "utf8" === r.encoding
                      ? (t = UTF8ArrayToString(a, 0))
                      : "binary" === r.encoding && (t = a),
                    FS.close(n),
                    t
                  );
                },
                writeFile: (e, r, t = {}) => {
                  t.flags = t.flags || 577;
                  var n = FS.open(e, t.flags, t.mode);
                  if ("string" == typeof r) {
                    var o = new Uint8Array(lengthBytesUTF8(r) + 1),
                      a = stringToUTF8Array(r, o, 0, o.length);
                    FS.write(n, o, 0, a, void 0, t.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(r))
                      throw new Error("Unsupported data type");
                    FS.write(n, r, 0, r.byteLength, void 0, t.canOwn);
                  }
                  FS.close(n);
                },
                cwd: () => FS.currentPath,
                chdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 });
                  if (null === r.node) throw new FS.ErrnoError(44);
                  if (!FS.isDir(r.node.mode)) throw new FS.ErrnoError(54);
                  var t = FS.nodePermissions(r.node, "x");
                  if (t) throw new FS.ErrnoError(t);
                  FS.currentPath = r.path;
                },
                createDefaultDirectories: () => {
                  FS.mkdir("/tmp"),
                    FS.mkdir("/home"),
                    FS.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  FS.mkdir("/dev"),
                    FS.registerDevice(FS.makedev(1, 3), {
                      read: () => 0,
                      write: (e, r, t, n, o) => n,
                    }),
                    FS.mkdev("/dev/null", FS.makedev(1, 3)),
                    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops),
                    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops),
                    FS.mkdev("/dev/tty", FS.makedev(5, 0)),
                    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var e = getRandomDevice();
                  FS.createDevice("/dev", "random", e),
                    FS.createDevice("/dev", "urandom", e),
                    FS.mkdir("/dev/shm"),
                    FS.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var e = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd"),
                    FS.mount(
                      {
                        mount: () => {
                          var r = FS.createNode(e, "fd", 16895, 73);
                          return (
                            (r.node_ops = {
                              lookup: (e, r) => {
                                var t = +r,
                                  n = FS.getStream(t);
                                if (!n) throw new FS.ErrnoError(8);
                                var o = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => n.path },
                                };
                                return (o.parent = o), o;
                              },
                            }),
                            r
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  Module.stdin
                    ? FS.createDevice("/dev", "stdin", Module.stdin)
                    : FS.symlink("/dev/tty", "/dev/stdin"),
                    Module.stdout
                      ? FS.createDevice("/dev", "stdout", null, Module.stdout)
                      : FS.symlink("/dev/tty", "/dev/stdout"),
                    Module.stderr
                      ? FS.createDevice("/dev", "stderr", null, Module.stderr)
                      : FS.symlink("/dev/tty1", "/dev/stderr"),
                    FS.open("/dev/stdin", 0),
                    FS.open("/dev/stdout", 1),
                    FS.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  FS.ErrnoError ||
                    ((FS.ErrnoError = function (e, r) {
                      (this.node = r),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (FS.ErrnoError.prototype = new Error()),
                    (FS.ErrnoError.prototype.constructor = FS.ErrnoError),
                    [44].forEach((e) => {
                      (FS.genericErrors[e] = new FS.ErrnoError(e)),
                        (FS.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  FS.ensureErrnoError(),
                    (FS.nameTable = new Array(4096)),
                    FS.mount(MEMFS, {}, "/"),
                    FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    (FS.filesystems = {
                      MEMFS,
                      IDBFS,
                      NODEFS,
                      WORKERFS,
                      PROXYFS,
                    });
                },
                init: (e, r, t) => {
                  (FS.init.initialized = !0),
                    FS.ensureErrnoError(),
                    (Module.stdin = e || Module.stdin),
                    (Module.stdout = r || Module.stdout),
                    (Module.stderr = t || Module.stderr),
                    FS.createStandardStreams();
                },
                quit: () => {
                  FS.init.initialized = !1;
                  for (var e = 0; e < FS.streams.length; e++) {
                    var r = FS.streams[e];
                    r && FS.close(r);
                  }
                },
                getMode: (e, r) => {
                  var t = 0;
                  return e && (t |= 365), r && (t |= 146), t;
                },
                findObject: (e, r) => {
                  var t = FS.analyzePath(e, r);
                  return t.exists ? t.object : null;
                },
                analyzePath: (e, r) => {
                  try {
                    e = (n = FS.lookupPath(e, { follow: !r })).path;
                  } catch (e) {}
                  var t = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var n = FS.lookupPath(e, { parent: !0 });
                    (t.parentExists = !0),
                      (t.parentPath = n.path),
                      (t.parentObject = n.node),
                      (t.name = PATH.basename(e)),
                      (n = FS.lookupPath(e, { follow: !r })),
                      (t.exists = !0),
                      (t.path = n.path),
                      (t.object = n.node),
                      (t.name = n.node.name),
                      (t.isRoot = "/" === n.path);
                  } catch (e) {
                    t.error = e.errno;
                  }
                  return t;
                },
                createPath: (e, r, t, n) => {
                  e = "string" == typeof e ? e : FS.getPath(e);
                  for (var o = r.split("/").reverse(); o.length; ) {
                    var a = o.pop();
                    if (a) {
                      var i = PATH.join2(e, a);
                      try {
                        FS.mkdir(i);
                      } catch (e) {}
                      e = i;
                    }
                  }
                  return i;
                },
                createFile: (e, r, t, n, o) => {
                  var a = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    i = FS.getMode(n, o);
                  return FS.create(a, i);
                },
                createDataFile: (e, r, t, n, o, a) => {
                  var i = r;
                  e &&
                    ((e = "string" == typeof e ? e : FS.getPath(e)),
                    (i = r ? PATH.join2(e, r) : e));
                  var s = FS.getMode(n, o),
                    c = FS.create(i, s);
                  if (t) {
                    if ("string" == typeof t) {
                      for (
                        var u = new Array(t.length), l = 0, d = t.length;
                        l < d;
                        ++l
                      )
                        u[l] = t.charCodeAt(l);
                      t = u;
                    }
                    FS.chmod(c, 146 | s);
                    var f = FS.open(c, 577);
                    FS.write(f, t, 0, t.length, 0, a),
                      FS.close(f),
                      FS.chmod(c, s);
                  }
                  return c;
                },
                createDevice: (e, r, t, n) => {
                  var o = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    a = FS.getMode(!!t, !!n);
                  FS.createDevice.major || (FS.createDevice.major = 64);
                  var i = FS.makedev(FS.createDevice.major++, 0);
                  return (
                    FS.registerDevice(i, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        n && n.buffer && n.buffer.length && n(10);
                      },
                      read: (e, r, n, o, a) => {
                        for (var i = 0, s = 0; s < o; s++) {
                          var c;
                          try {
                            c = t();
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                          if (void 0 === c && 0 === i)
                            throw new FS.ErrnoError(6);
                          if (null == c) break;
                          i++, (r[n + s] = c);
                        }
                        return i && (e.node.timestamp = Date.now()), i;
                      },
                      write: (e, r, t, o, a) => {
                        for (var i = 0; i < o; i++)
                          try {
                            n(r[t + i]);
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                        return o && (e.node.timestamp = Date.now()), i;
                      },
                    }),
                    FS.mkdev(o, a, i)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!read_)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = intArrayFromString(read_(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                },
                createLazyFile: (e, r, t, n, o) => {
                  function a() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((a.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var r = e % this.chunkSize,
                          t = (e / this.chunkSize) | 0;
                        return this.getter(t)[r];
                      }
                    }),
                    (a.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (a.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", t, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + t + ". Status: " + e.status
                        );
                      var r,
                        n = Number(e.getResponseHeader("Content-length")),
                        o =
                          (r = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === r,
                        a =
                          (r = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === r,
                        i = 1048576;
                      o || (i = n);
                      var s = this;
                      s.setDataGetter((e) => {
                        var r = e * i,
                          o = (e + 1) * i - 1;
                        if (
                          ((o = Math.min(o, n - 1)),
                          void 0 === s.chunks[e] &&
                            (s.chunks[e] = ((e, r) => {
                              if (e > r)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    r +
                                    ") or no bytes requested!"
                                );
                              if (r > n - 1)
                                throw new Error(
                                  "only " +
                                    n +
                                    " bytes available! programmer error!"
                                );
                              var o = new XMLHttpRequest();
                              if (
                                (o.open("GET", t, !1),
                                n !== i &&
                                  o.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + r
                                  ),
                                (o.responseType = "arraybuffer"),
                                o.overrideMimeType &&
                                  o.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                o.send(null),
                                !(
                                  (o.status >= 200 && o.status < 300) ||
                                  304 === o.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + t + ". Status: " + o.status
                                );
                              return void 0 !== o.response
                                ? new Uint8Array(o.response || [])
                                : intArrayFromString(o.responseText || "", !0);
                            })(r, o)),
                          void 0 === s.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return s.chunks[e];
                      }),
                        (!a && n) ||
                          ((i = n = 1),
                          (n = this.getter(0).length),
                          (i = n),
                          out(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = n),
                        (this._chunkSize = i),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var i = new a();
                    Object.defineProperties(i, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var s = { isDevice: !1, contents: i };
                  } else s = { isDevice: !1, url: t };
                  var c = FS.createFile(e, r, s, n, o);
                  s.contents
                    ? (c.contents = s.contents)
                    : s.url && ((c.contents = null), (c.url = s.url)),
                    Object.defineProperties(c, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var u = {};
                  function l(e, r, t, n, o) {
                    var a = e.node.contents;
                    if (o >= a.length) return 0;
                    var i = Math.min(a.length - o, n);
                    if (a.slice)
                      for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                    else for (s = 0; s < i; s++) r[t + s] = a.get(o + s);
                    return i;
                  }
                  return (
                    Object.keys(c.stream_ops).forEach((e) => {
                      var r = c.stream_ops[e];
                      u[e] = function () {
                        return FS.forceLoadFile(c), r.apply(null, arguments);
                      };
                    }),
                    (u.read = (e, r, t, n, o) => (
                      FS.forceLoadFile(c), l(e, r, t, n, o)
                    )),
                    (u.mmap = (e, r, t, n, o) => {
                      FS.forceLoadFile(c);
                      var a = mmapAlloc(r);
                      if (!a) throw new FS.ErrnoError(48);
                      return l(e, HEAP8, a, r, t), { ptr: a, allocated: !0 };
                    }),
                    (c.stream_ops = u),
                    c
                  );
                },
                createPreloadedFile: (e, r, t, n, o, a, i, s, c, u) => {
                  var l = r ? PATH_FS.resolve(PATH.join2(e, r)) : e,
                    d = getUniqueRunDependency("cp " + l);
                  function f(t) {
                    function f(t) {
                      u && u(),
                        s || FS.createDataFile(e, r, t, n, o, c),
                        a && a(),
                        removeRunDependency(d);
                    }
                    Browser.handledByPreloadPlugin(t, l, f, () => {
                      i && i(), removeRunDependency(d);
                    }) || f(t);
                  }
                  addRunDependency(d),
                    "string" == typeof t ? asyncLoad(t, (e) => f(e), i) : f(t);
                },
                indexedDB: () =>
                  window.indexedDB ||
                  window.mozIndexedDB ||
                  window.webkitIndexedDB ||
                  window.msIndexedDB,
                DB_NAME: () => "EM_FS_" + window.location.pathname,
                DB_VERSION: 20,
                DB_STORE_NAME: "FILE_DATA",
                saveFilesToDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = () => {
                    out("creating db"),
                      o.result.createObjectStore(FS.DB_STORE_NAME);
                  }),
                    (o.onsuccess = () => {
                      var n = o.result.transaction(
                          [FS.DB_STORE_NAME],
                          "readwrite"
                        ),
                        a = n.objectStore(FS.DB_STORE_NAME),
                        i = 0,
                        s = 0,
                        c = e.length;
                      function u() {
                        0 == s ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = a.put(FS.analyzePath(e).object.contents, e);
                        (r.onsuccess = () => {
                          ++i + s == c && u();
                        }),
                          (r.onerror = () => {
                            s++, i + s == c && u();
                          });
                      }),
                        (n.onerror = t);
                    }),
                    (o.onerror = t);
                },
                loadFilesFromDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = t),
                    (o.onsuccess = () => {
                      var n = o.result;
                      try {
                        var a = n.transaction([FS.DB_STORE_NAME], "readonly");
                      } catch (e) {
                        return void t(e);
                      }
                      var i = a.objectStore(FS.DB_STORE_NAME),
                        s = 0,
                        c = 0,
                        u = e.length;
                      function l() {
                        0 == c ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = i.get(e);
                        (r.onsuccess = () => {
                          FS.analyzePath(e).exists && FS.unlink(e),
                            FS.createDataFile(
                              PATH.dirname(e),
                              PATH.basename(e),
                              r.result,
                              !0,
                              !0,
                              !0
                            ),
                            ++s + c == u && l();
                        }),
                          (r.onerror = () => {
                            c++, s + c == u && l();
                          });
                      }),
                        (a.onerror = t);
                    }),
                    (o.onerror = t);
                },
              },
              SYSCALLS = {
                DEFAULT_POLLMASK: 5,
                calculateAt: function (e, r, t) {
                  if (PATH.isAbs(r)) return r;
                  var n;
                  if (
                    ((n =
                      -100 === e ? FS.cwd() : SYSCALLS.getStreamFromFD(e).path),
                    0 == r.length)
                  ) {
                    if (!t) throw new FS.ErrnoError(44);
                    return n;
                  }
                  return PATH.join2(n, r);
                },
                doStat: function (e, r, t) {
                  try {
                    var n = e(r);
                  } catch (e) {
                    if (
                      e &&
                      e.node &&
                      PATH.normalize(r) !== PATH.normalize(FS.getPath(e.node))
                    )
                      return -54;
                    throw e;
                  }
                  return (
                    (HEAP32[t >> 2] = n.dev),
                    (HEAP32[(t + 8) >> 2] = n.ino),
                    (HEAP32[(t + 12) >> 2] = n.mode),
                    (HEAPU32[(t + 16) >> 2] = n.nlink),
                    (HEAP32[(t + 20) >> 2] = n.uid),
                    (HEAP32[(t + 24) >> 2] = n.gid),
                    (HEAP32[(t + 28) >> 2] = n.rdev),
                    (tempI64 = [
                      n.size >>> 0,
                      ((tempDouble = n.size),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 40) >> 2] = tempI64[0]),
                    (HEAP32[(t + 44) >> 2] = tempI64[1]),
                    (HEAP32[(t + 48) >> 2] = 4096),
                    (HEAP32[(t + 52) >> 2] = n.blocks),
                    (tempI64 = [
                      Math.floor(n.atime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.atime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 56) >> 2] = tempI64[0]),
                    (HEAP32[(t + 60) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 64) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.mtime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.mtime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 72) >> 2] = tempI64[0]),
                    (HEAP32[(t + 76) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 80) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.ctime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.ctime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 88) >> 2] = tempI64[0]),
                    (HEAP32[(t + 92) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 96) >> 2] = 0),
                    (tempI64 = [
                      n.ino >>> 0,
                      ((tempDouble = n.ino),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 104) >> 2] = tempI64[0]),
                    (HEAP32[(t + 108) >> 2] = tempI64[1]),
                    0
                  );
                },
                doMsync: function (e, r, t, n, o) {
                  if (!FS.isFile(r.node.mode)) throw new FS.ErrnoError(43);
                  if (2 & n) return 0;
                  var a = HEAPU8.slice(e, e + t);
                  FS.msync(r, a, o, t, n);
                },
                varargs: void 0,
                get: function () {
                  return (
                    (SYSCALLS.varargs += 4), HEAP32[(SYSCALLS.varargs - 4) >> 2]
                  );
                },
                getStr: function (e) {
                  return UTF8ToString(e);
                },
                getStreamFromFD: function (e) {
                  var r = FS.getStream(e);
                  if (!r) throw new FS.ErrnoError(8);
                  return r;
                },
              };
            function ___syscall__newselect(e, r, t, n, o) {
              try {
                for (
                  var a = 0,
                    i = r ? HEAP32[r >> 2] : 0,
                    s = r ? HEAP32[(r + 4) >> 2] : 0,
                    c = t ? HEAP32[t >> 2] : 0,
                    u = t ? HEAP32[(t + 4) >> 2] : 0,
                    l = n ? HEAP32[n >> 2] : 0,
                    d = n ? HEAP32[(n + 4) >> 2] : 0,
                    f = 0,
                    _ = 0,
                    m = 0,
                    p = 0,
                    S = 0,
                    E = 0,
                    h =
                      (r ? HEAP32[r >> 2] : 0) |
                      (t ? HEAP32[t >> 2] : 0) |
                      (n ? HEAP32[n >> 2] : 0),
                    F =
                      (r ? HEAP32[(r + 4) >> 2] : 0) |
                      (t ? HEAP32[(t + 4) >> 2] : 0) |
                      (n ? HEAP32[(n + 4) >> 2] : 0),
                    w = function (e, r, t, n) {
                      return e < 32 ? r & n : t & n;
                    },
                    y = 0;
                  y < e;
                  y++
                ) {
                  var b = 1 << y % 32;
                  if (w(y, h, F, b)) {
                    var v = SYSCALLS.getStreamFromFD(y),
                      g = SYSCALLS.DEFAULT_POLLMASK;
                    v.stream_ops.poll && (g = v.stream_ops.poll(v)),
                      1 & g &&
                        w(y, i, s, b) &&
                        (y < 32 ? (f |= b) : (_ |= b), a++),
                      4 & g &&
                        w(y, c, u, b) &&
                        (y < 32 ? (m |= b) : (p |= b), a++),
                      2 & g &&
                        w(y, l, d, b) &&
                        (y < 32 ? (S |= b) : (E |= b), a++);
                  }
                }
                return (
                  r && ((HEAP32[r >> 2] = f), (HEAP32[(r + 4) >> 2] = _)),
                  t && ((HEAP32[t >> 2] = m), (HEAP32[(t + 4) >> 2] = p)),
                  n && ((HEAP32[n >> 2] = S), (HEAP32[(n + 4) >> 2] = E)),
                  a
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            var SOCKFS = {
              mount: function (e) {
                return (
                  (Module.websocket =
                    Module.websocket && "object" == typeof Module.websocket
                      ? Module.websocket
                      : {}),
                  (Module.websocket._callbacks = {}),
                  (Module.websocket.on = function (e, r) {
                    return (
                      "function" == typeof r && (this._callbacks[e] = r), this
                    );
                  }),
                  (Module.websocket.emit = function (e, r) {
                    "function" == typeof this._callbacks[e] &&
                      this._callbacks[e].call(this, r);
                  }),
                  FS.createNode(null, "/", 16895, 0)
                );
              },
              createSocket: function (e, r, t) {
                if (1 == (r &= -526337) && t && 6 != t)
                  throw new FS.ErrnoError(66);
                var n = {
                    family: e,
                    type: r,
                    protocol: t,
                    server: null,
                    error: null,
                    peers: {},
                    pending: [],
                    recv_queue: [],
                    sock_ops: SOCKFS.websocket_sock_ops,
                  },
                  o = SOCKFS.nextname(),
                  a = FS.createNode(SOCKFS.root, o, 49152, 0);
                a.sock = n;
                var i = FS.createStream({
                  path: o,
                  node: a,
                  flags: 2,
                  seekable: !1,
                  stream_ops: SOCKFS.stream_ops,
                });
                return (n.stream = i), n;
              },
              getSocket: function (e) {
                var r = FS.getStream(e);
                return r && FS.isSocket(r.node.mode) ? r.node.sock : null;
              },
              stream_ops: {
                poll: function (e) {
                  var r = e.node.sock;
                  return r.sock_ops.poll(r);
                },
                ioctl: function (e, r, t) {
                  var n = e.node.sock;
                  return n.sock_ops.ioctl(n, r, t);
                },
                read: function (e, r, t, n, o) {
                  var a = e.node.sock,
                    i = a.sock_ops.recvmsg(a, n);
                  return i ? (r.set(i.buffer, t), i.buffer.length) : 0;
                },
                write: function (e, r, t, n, o) {
                  var a = e.node.sock;
                  return a.sock_ops.sendmsg(a, r, t, n);
                },
                close: function (e) {
                  var r = e.node.sock;
                  r.sock_ops.close(r);
                },
              },
              nextname: function () {
                return (
                  SOCKFS.nextname.current || (SOCKFS.nextname.current = 0),
                  "socket[" + SOCKFS.nextname.current++ + "]"
                );
              },
              websocket_sock_ops: {
                createPeer: function (e, r, t) {
                  var n;
                  if (
                    ("object" == typeof r && ((n = r), (r = null), (t = null)),
                    n)
                  )
                    if (n._socket)
                      (r = n._socket.remoteAddress), (t = n._socket.remotePort);
                    else {
                      var o = /ws[s]?:\/\/([^:]+):(\d+)/.exec(n.url);
                      if (!o)
                        throw new Error(
                          "WebSocket URL must be in the format ws(s)://address:port"
                        );
                      (r = o[1]), (t = parseInt(o[2], 10));
                    }
                  else
                    try {
                      var a =
                          Module.websocket &&
                          "object" == typeof Module.websocket,
                        i = "ws:#".replace("#", "//");
                      if (
                        (a &&
                          "string" == typeof Module.websocket.url &&
                          (i = Module.websocket.url),
                        "ws://" === i || "wss://" === i)
                      ) {
                        var s = r.split("/");
                        i = i + s[0] + ":" + t + "/" + s.slice(1).join("/");
                      }
                      var c = "binary";
                      a &&
                        "string" == typeof Module.websocket.subprotocol &&
                        (c = Module.websocket.subprotocol);
                      var u = void 0;
                      "null" !== c &&
                        (u = c = c.replace(/^ +| +$/g, "").split(/ *, */)),
                        a &&
                          null === Module.websocket.subprotocol &&
                          ((c = "null"), (u = void 0)),
                        ((n = new (
                          ENVIRONMENT_IS_NODE ? require("ws") : WebSocket
                        )(i, u)).binaryType = "arraybuffer");
                    } catch (e) {
                      throw new FS.ErrnoError(23);
                    }
                  var l = { addr: r, port: t, socket: n, dgram_send_queue: [] };
                  return (
                    SOCKFS.websocket_sock_ops.addPeer(e, l),
                    SOCKFS.websocket_sock_ops.handlePeerEvents(e, l),
                    2 === e.type &&
                      void 0 !== e.sport &&
                      l.dgram_send_queue.push(
                        new Uint8Array([
                          255,
                          255,
                          255,
                          255,
                          "p".charCodeAt(0),
                          "o".charCodeAt(0),
                          "r".charCodeAt(0),
                          "t".charCodeAt(0),
                          (65280 & e.sport) >> 8,
                          255 & e.sport,
                        ])
                      ),
                    l
                  );
                },
                getPeer: function (e, r, t) {
                  return e.peers[r + ":" + t];
                },
                addPeer: function (e, r) {
                  e.peers[r.addr + ":" + r.port] = r;
                },
                removePeer: function (e, r) {
                  delete e.peers[r.addr + ":" + r.port];
                },
                handlePeerEvents: function (e, r) {
                  var t = !0,
                    n = function () {
                      Module.websocket.emit("open", e.stream.fd);
                      try {
                        for (var t = r.dgram_send_queue.shift(); t; )
                          r.socket.send(t), (t = r.dgram_send_queue.shift());
                      } catch (e) {
                        r.socket.close();
                      }
                    };
                  function o(n) {
                    if ("string" == typeof n) n = new TextEncoder().encode(n);
                    else {
                      if ((assert(void 0 !== n.byteLength), 0 == n.byteLength))
                        return;
                      n = new Uint8Array(n);
                    }
                    var o = t;
                    if (
                      ((t = !1),
                      o &&
                        10 === n.length &&
                        255 === n[0] &&
                        255 === n[1] &&
                        255 === n[2] &&
                        255 === n[3] &&
                        n[4] === "p".charCodeAt(0) &&
                        n[5] === "o".charCodeAt(0) &&
                        n[6] === "r".charCodeAt(0) &&
                        n[7] === "t".charCodeAt(0))
                    ) {
                      var a = (n[8] << 8) | n[9];
                      return (
                        SOCKFS.websocket_sock_ops.removePeer(e, r),
                        (r.port = a),
                        void SOCKFS.websocket_sock_ops.addPeer(e, r)
                      );
                    }
                    e.recv_queue.push({ addr: r.addr, port: r.port, data: n }),
                      Module.websocket.emit("message", e.stream.fd);
                  }
                  ENVIRONMENT_IS_NODE
                    ? (r.socket.on("open", n),
                      r.socket.on("message", function (e, r) {
                        r && o(new Uint8Array(e).buffer);
                      }),
                      r.socket.on("close", function () {
                        Module.websocket.emit("close", e.stream.fd);
                      }),
                      r.socket.on("error", function (r) {
                        (e.error = 14),
                          Module.websocket.emit("error", [
                            e.stream.fd,
                            e.error,
                            "ECONNREFUSED: Connection refused",
                          ]);
                      }))
                    : ((r.socket.onopen = n),
                      (r.socket.onclose = function () {
                        Module.websocket.emit("close", e.stream.fd);
                      }),
                      (r.socket.onmessage = function (e) {
                        o(e.data);
                      }),
                      (r.socket.onerror = function (r) {
                        (e.error = 14),
                          Module.websocket.emit("error", [
                            e.stream.fd,
                            e.error,
                            "ECONNREFUSED: Connection refused",
                          ]);
                      }));
                },
                poll: function (e) {
                  if (1 === e.type && e.server)
                    return e.pending.length ? 65 : 0;
                  var r = 0,
                    t =
                      1 === e.type
                        ? SOCKFS.websocket_sock_ops.getPeer(e, e.daddr, e.dport)
                        : null;
                  return (
                    (e.recv_queue.length ||
                      !t ||
                      (t && t.socket.readyState === t.socket.CLOSING) ||
                      (t && t.socket.readyState === t.socket.CLOSED)) &&
                      (r |= 65),
                    (!t || (t && t.socket.readyState === t.socket.OPEN)) &&
                      (r |= 4),
                    ((t && t.socket.readyState === t.socket.CLOSING) ||
                      (t && t.socket.readyState === t.socket.CLOSED)) &&
                      (r |= 16),
                    r
                  );
                },
                ioctl: function (e, r, t) {
                  if (21531 === r) {
                    var n = 0;
                    return (
                      e.recv_queue.length && (n = e.recv_queue[0].data.length),
                      (HEAP32[t >> 2] = n),
                      0
                    );
                  }
                  return 28;
                },
                close: function (e) {
                  if (e.server) {
                    try {
                      e.server.close();
                    } catch (e) {}
                    e.server = null;
                  }
                  for (var r = Object.keys(e.peers), t = 0; t < r.length; t++) {
                    var n = e.peers[r[t]];
                    try {
                      n.socket.close();
                    } catch (e) {}
                    SOCKFS.websocket_sock_ops.removePeer(e, n);
                  }
                  return 0;
                },
                bind: function (e, r, t) {
                  if (void 0 !== e.saddr || void 0 !== e.sport)
                    throw new FS.ErrnoError(28);
                  if (((e.saddr = r), (e.sport = t), 2 === e.type)) {
                    e.server && (e.server.close(), (e.server = null));
                    try {
                      e.sock_ops.listen(e, 0);
                    } catch (e) {
                      if (!(e instanceof FS.ErrnoError)) throw e;
                      if (138 !== e.errno) throw e;
                    }
                  }
                },
                connect: function (e, r, t) {
                  if (e.server) throw new FS.ErrnoError(138);
                  if (void 0 !== e.daddr && void 0 !== e.dport) {
                    var n = SOCKFS.websocket_sock_ops.getPeer(
                      e,
                      e.daddr,
                      e.dport
                    );
                    if (n)
                      throw n.socket.readyState === n.socket.CONNECTING
                        ? new FS.ErrnoError(7)
                        : new FS.ErrnoError(30);
                  }
                  var o = SOCKFS.websocket_sock_ops.createPeer(e, r, t);
                  throw (
                    ((e.daddr = o.addr),
                    (e.dport = o.port),
                    new FS.ErrnoError(26))
                  );
                },
                listen: function (e, r) {
                  if (!ENVIRONMENT_IS_NODE) throw new FS.ErrnoError(138);
                  if (e.server) throw new FS.ErrnoError(28);
                  var t = require("ws").Server,
                    n = e.saddr;
                  (e.server = new t({ host: n, port: e.sport })),
                    Module.websocket.emit("listen", e.stream.fd),
                    e.server.on("connection", function (r) {
                      if (1 === e.type) {
                        var t = SOCKFS.createSocket(
                            e.family,
                            e.type,
                            e.protocol
                          ),
                          n = SOCKFS.websocket_sock_ops.createPeer(t, r);
                        (t.daddr = n.addr),
                          (t.dport = n.port),
                          e.pending.push(t),
                          Module.websocket.emit("connection", t.stream.fd);
                      } else SOCKFS.websocket_sock_ops.createPeer(e, r), Module.websocket.emit("connection", e.stream.fd);
                    }),
                    e.server.on("close", function () {
                      Module.websocket.emit("close", e.stream.fd),
                        (e.server = null);
                    }),
                    e.server.on("error", function (r) {
                      (e.error = 23),
                        Module.websocket.emit("error", [
                          e.stream.fd,
                          e.error,
                          "EHOSTUNREACH: Host is unreachable",
                        ]);
                    });
                },
                accept: function (e) {
                  if (!e.server || !e.pending.length)
                    throw new FS.ErrnoError(28);
                  var r = e.pending.shift();
                  return (r.stream.flags = e.stream.flags), r;
                },
                getname: function (e, r) {
                  var t, n;
                  if (r) {
                    if (void 0 === e.daddr || void 0 === e.dport)
                      throw new FS.ErrnoError(53);
                    (t = e.daddr), (n = e.dport);
                  } else (t = e.saddr || 0), (n = e.sport || 0);
                  return { addr: t, port: n };
                },
                sendmsg: function (e, r, t, n, o, a) {
                  if (2 === e.type) {
                    if (
                      ((void 0 !== o && void 0 !== a) ||
                        ((o = e.daddr), (a = e.dport)),
                      void 0 === o || void 0 === a)
                    )
                      throw new FS.ErrnoError(17);
                  } else (o = e.daddr), (a = e.dport);
                  var i,
                    s = SOCKFS.websocket_sock_ops.getPeer(e, o, a);
                  if (1 === e.type) {
                    if (
                      !s ||
                      s.socket.readyState === s.socket.CLOSING ||
                      s.socket.readyState === s.socket.CLOSED
                    )
                      throw new FS.ErrnoError(53);
                    if (s.socket.readyState === s.socket.CONNECTING)
                      throw new FS.ErrnoError(6);
                  }
                  if (
                    (ArrayBuffer.isView(r) &&
                      ((t += r.byteOffset), (r = r.buffer)),
                    (i = r.slice(t, t + n)),
                    2 === e.type &&
                      (!s || s.socket.readyState !== s.socket.OPEN))
                  )
                    return (
                      (s &&
                        s.socket.readyState !== s.socket.CLOSING &&
                        s.socket.readyState !== s.socket.CLOSED) ||
                        (s = SOCKFS.websocket_sock_ops.createPeer(e, o, a)),
                      s.dgram_send_queue.push(i),
                      n
                    );
                  try {
                    return s.socket.send(i), n;
                  } catch (e) {
                    throw new FS.ErrnoError(28);
                  }
                },
                recvmsg: function (e, r) {
                  if (1 === e.type && e.server) throw new FS.ErrnoError(53);
                  var t = e.recv_queue.shift();
                  if (!t) {
                    if (1 === e.type) {
                      var n = SOCKFS.websocket_sock_ops.getPeer(
                        e,
                        e.daddr,
                        e.dport
                      );
                      if (!n) throw new FS.ErrnoError(53);
                      if (
                        n.socket.readyState === n.socket.CLOSING ||
                        n.socket.readyState === n.socket.CLOSED
                      )
                        return null;
                      throw new FS.ErrnoError(6);
                    }
                    throw new FS.ErrnoError(6);
                  }
                  var o = t.data.byteLength || t.data.length,
                    a = t.data.byteOffset || 0,
                    i = t.data.buffer || t.data,
                    s = Math.min(r, o),
                    c = {
                      buffer: new Uint8Array(i, a, s),
                      addr: t.addr,
                      port: t.port,
                    };
                  if (1 === e.type && s < o) {
                    var u = o - s;
                    (t.data = new Uint8Array(i, a + s, u)),
                      e.recv_queue.unshift(t);
                  }
                  return c;
                },
              },
            };
            function getSocketFromFD(e) {
              var r = SOCKFS.getSocket(e);
              if (!r) throw new FS.ErrnoError(8);
              return r;
            }
            function setErrNo(e) {
              return (HEAP32[___errno_location() >> 2] = e), e;
            }
            function inetPton4(e) {
              for (var r = e.split("."), t = 0; t < 4; t++) {
                var n = Number(r[t]);
                if (isNaN(n)) return null;
                r[t] = n;
              }
              return (r[0] | (r[1] << 8) | (r[2] << 16) | (r[3] << 24)) >>> 0;
            }
            function jstoi_q(e) {
              return parseInt(e);
            }
            function inetPton6(e) {
              var r,
                t,
                n,
                o,
                a = [];
              if (
                !/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i.test(
                  e
                )
              )
                return null;
              if ("::" === e) return [0, 0, 0, 0, 0, 0, 0, 0];
              for (
                (e = e.startsWith("::")
                  ? e.replace("::", "Z:")
                  : e.replace("::", ":Z:")).indexOf(".") > 0
                  ? (((r = (e = e.replace(new RegExp("[.]", "g"), ":")).split(
                      ":"
                    ))[r.length - 4] =
                      jstoi_q(r[r.length - 4]) +
                      256 * jstoi_q(r[r.length - 3])),
                    (r[r.length - 3] =
                      jstoi_q(r[r.length - 2]) +
                      256 * jstoi_q(r[r.length - 1])),
                    (r = r.slice(0, r.length - 2)))
                  : (r = e.split(":")),
                  n = 0,
                  o = 0,
                  t = 0;
                t < r.length;
                t++
              )
                if ("string" == typeof r[t])
                  if ("Z" === r[t]) {
                    for (o = 0; o < 8 - r.length + 1; o++) a[t + o] = 0;
                    n = o - 1;
                  } else a[t + n] = _htons(parseInt(r[t], 16));
                else a[t + n] = r[t];
              return [
                (a[1] << 16) | a[0],
                (a[3] << 16) | a[2],
                (a[5] << 16) | a[4],
                (a[7] << 16) | a[6],
              ];
            }
            function writeSockaddr(e, r, t, n, o) {
              switch (r) {
                case 2:
                  (t = inetPton4(t)),
                    zeroMemory(e, 16),
                    o && (HEAP32[o >> 2] = 16),
                    (HEAP16[e >> 1] = r),
                    (HEAP32[(e + 4) >> 2] = t),
                    (HEAP16[(e + 2) >> 1] = _htons(n));
                  break;
                case 10:
                  (t = inetPton6(t)),
                    zeroMemory(e, 28),
                    o && (HEAP32[o >> 2] = 28),
                    (HEAP32[e >> 2] = r),
                    (HEAP32[(e + 8) >> 2] = t[0]),
                    (HEAP32[(e + 12) >> 2] = t[1]),
                    (HEAP32[(e + 16) >> 2] = t[2]),
                    (HEAP32[(e + 20) >> 2] = t[3]),
                    (HEAP16[(e + 2) >> 1] = _htons(n));
                  break;
                default:
                  return 5;
              }
              return 0;
            }
            var DNS = {
              address_map: { id: 1, addrs: {}, names: {} },
              lookup_name: function (e) {
                var r,
                  t = inetPton4(e);
                if (null !== t) return e;
                if (null !== (t = inetPton6(e))) return e;
                if (DNS.address_map.addrs[e]) r = DNS.address_map.addrs[e];
                else {
                  var n = DNS.address_map.id++;
                  assert(n < 65535, "exceeded max address mappings of 65535"),
                    (r = "172.29." + (255 & n) + "." + (65280 & n)),
                    (DNS.address_map.names[r] = e),
                    (DNS.address_map.addrs[e] = r);
                }
                return r;
              },
              lookup_addr: function (e) {
                return DNS.address_map.names[e]
                  ? DNS.address_map.names[e]
                  : null;
              },
            };
            function ___syscall_accept4(e, r, t, n) {
              try {
                var o = getSocketFromFD(e),
                  a = o.sock_ops.accept(o);
                return (
                  r &&
                    writeSockaddr(
                      r,
                      a.family,
                      DNS.lookup_name(a.daddr),
                      a.dport,
                      t
                    ),
                  a.stream.fd
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function inetNtop4(e) {
              return (
                (255 & e) +
                "." +
                ((e >> 8) & 255) +
                "." +
                ((e >> 16) & 255) +
                "." +
                ((e >> 24) & 255)
              );
            }
            function inetNtop6(e) {
              var r = "",
                t = 0,
                n = 0,
                o = 0,
                a = 0,
                i = 0,
                s = 0,
                c = [
                  65535 & e[0],
                  e[0] >> 16,
                  65535 & e[1],
                  e[1] >> 16,
                  65535 & e[2],
                  e[2] >> 16,
                  65535 & e[3],
                  e[3] >> 16,
                ],
                u = !0,
                l = "";
              for (s = 0; s < 5; s++)
                if (0 !== c[s]) {
                  u = !1;
                  break;
                }
              if (u) {
                if (((l = inetNtop4(c[6] | (c[7] << 16))), -1 === c[5]))
                  return (r = "::ffff:") + l;
                if (0 === c[5])
                  return (
                    "0.0.0.0" === l && (l = ""),
                    "0.0.0.1" === l && (l = "1"),
                    (r = "::") + l
                  );
              }
              for (t = 0; t < 8; t++)
                0 === c[t] && (t - o > 1 && (i = 0), (o = t), i++),
                  i > n && (a = t - (n = i) + 1);
              for (t = 0; t < 8; t++)
                n > 1 && 0 === c[t] && t >= a && t < a + n
                  ? t === a && ((r += ":"), 0 === a && (r += ":"))
                  : ((r += Number(_ntohs(65535 & c[t])).toString(16)),
                    (r += t < 7 ? ":" : ""));
              return r;
            }
            function readSockaddr(e, r) {
              var t,
                n = HEAP16[e >> 1],
                o = _ntohs(HEAPU16[(e + 2) >> 1]);
              switch (n) {
                case 2:
                  if (16 !== r) return { errno: 28 };
                  t = inetNtop4((t = HEAP32[(e + 4) >> 2]));
                  break;
                case 10:
                  if (28 !== r) return { errno: 28 };
                  t = inetNtop6(
                    (t = [
                      HEAP32[(e + 8) >> 2],
                      HEAP32[(e + 12) >> 2],
                      HEAP32[(e + 16) >> 2],
                      HEAP32[(e + 20) >> 2],
                    ])
                  );
                  break;
                default:
                  return { errno: 5 };
              }
              return { family: n, addr: t, port: o };
            }
            function getSocketAddress(e, r, t) {
              if (t && 0 === e) return null;
              var n = readSockaddr(e, r);
              if (n.errno) throw new FS.ErrnoError(n.errno);
              return (n.addr = DNS.lookup_addr(n.addr) || n.addr), n;
            }
            function ___syscall_bind(e, r, t) {
              try {
                var n = getSocketFromFD(e),
                  o = getSocketAddress(r, t);
                return n.sock_ops.bind(n, o.addr, o.port), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_chdir(e) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.chdir(e), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_chmod(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.chmod(e, r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_connect(e, r, t) {
              try {
                var n = getSocketFromFD(e),
                  o = getSocketAddress(r, t);
                return n.sock_ops.connect(n, o.addr, o.port), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_dup3(e, r, t) {
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                if (n.fd === r) return -28;
                var o = FS.getStream(r);
                return o && FS.close(o), FS.createStream(n, r, r + 1).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_faccessat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  -8 & t)
                )
                  return -28;
                var o = FS.lookupPath(r, { follow: !0 }).node;
                if (!o) return -44;
                var a = "";
                return (
                  4 & t && (a += "r"),
                  2 & t && (a += "w"),
                  1 & t && (a += "x"),
                  a && FS.nodePermissions(o, a) ? -2 : 0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fadvise64(e, r, t, n) {
              return 0;
            }
            function ___syscall_fchdir(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return FS.chdir(r.path), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fchmod(e, r) {
              try {
                return FS.fchmod(e, r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fchmodat(e, r, t, n) {
              SYSCALLS.varargs = n;
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  FS.chmod(r, t),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fchown32(e, r, t) {
              try {
                return FS.fchown(e, r, t), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fchownat(e, r, t, n, o) {
              try {
                r = SYSCALLS.getStr(r);
                var a = 256 & o;
                return (
                  (o &= -257),
                  (r = SYSCALLS.calculateAt(e, r)),
                  (a ? FS.lchown : FS.chown)(r, t, n),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fcntl64(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 0:
                    return (o = SYSCALLS.get()) < 0
                      ? -28
                      : FS.createStream(n, o).fd;
                  case 1:
                  case 2:
                  case 6:
                  case 7:
                    return 0;
                  case 3:
                    return n.flags;
                  case 4:
                    var o = SYSCALLS.get();
                    return (n.flags |= o), 0;
                  case 5:
                    return (o = SYSCALLS.get()), (HEAP16[(o + 0) >> 1] = 2), 0;
                  case 16:
                  case 8:
                  default:
                    return -28;
                  case 9:
                    return setErrNo(28), -1;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fdatasync(e) {
              try {
                return SYSCALLS.getStreamFromFD(e), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fstat64(e, r) {
              try {
                var t = SYSCALLS.getStreamFromFD(e);
                return SYSCALLS.doStat(FS.stat, t.path, r);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_statfs64(e, r, t) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)),
                  (HEAP32[(t + 4) >> 2] = 4096),
                  (HEAP32[(t + 40) >> 2] = 4096),
                  (HEAP32[(t + 8) >> 2] = 1e6),
                  (HEAP32[(t + 12) >> 2] = 5e5),
                  (HEAP32[(t + 16) >> 2] = 5e5),
                  (HEAP32[(t + 20) >> 2] = FS.nextInode),
                  (HEAP32[(t + 24) >> 2] = 1e6),
                  (HEAP32[(t + 28) >> 2] = 42),
                  (HEAP32[(t + 44) >> 2] = 2),
                  (HEAP32[(t + 36) >> 2] = 255),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fstatfs64(e, r, t) {
              try {
                return (
                  SYSCALLS.getStreamFromFD(e), ___syscall_statfs64(0, r, t)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            var MAX_INT53 = 9007199254740992,
              MIN_INT53 = -9007199254740992;
            function bigintToI53Checked(e) {
              return e < MIN_INT53 || e > MAX_INT53 ? NaN : Number(e);
            }
            function ___syscall_ftruncate64(e, r) {
              try {
                return (
                  (r = bigintToI53Checked(r)),
                  isNaN(r) ? -61 : (FS.ftruncate(e, r), 0)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getcwd(e, r) {
              try {
                if (0 === r) return -28;
                var t = FS.cwd(),
                  n = lengthBytesUTF8(t) + 1;
                return r < n ? -68 : (stringToUTF8(t, e, r), n);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getdents64(e, r, t) {
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                n.getdents || (n.getdents = FS.readdir(n.path));
                for (
                  var o = 280,
                    a = 0,
                    i = FS.llseek(n, 0, 1),
                    s = Math.floor(i / o);
                  s < n.getdents.length && a + o <= t;

                ) {
                  var c,
                    u,
                    l = n.getdents[s];
                  if ("." === l) (c = n.node.id), (u = 4);
                  else if (".." === l)
                    (c = FS.lookupPath(n.path, { parent: !0 }).node.id),
                      (u = 4);
                  else {
                    var d = FS.lookupNode(n.node, l);
                    (c = d.id),
                      (u = FS.isChrdev(d.mode)
                        ? 2
                        : FS.isDir(d.mode)
                        ? 4
                        : FS.isLink(d.mode)
                        ? 10
                        : 8);
                  }
                  (tempI64 = [
                    c >>> 0,
                    ((tempDouble = c),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                    (HEAP32[(r + a) >> 2] = tempI64[0]),
                    (HEAP32[(r + a + 4) >> 2] = tempI64[1]),
                    (tempI64 = [
                      ((s + 1) * o) >>> 0,
                      ((tempDouble = (s + 1) * o),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(r + a + 8) >> 2] = tempI64[0]),
                    (HEAP32[(r + a + 12) >> 2] = tempI64[1]),
                    (HEAP16[(r + a + 16) >> 1] = 280),
                    (HEAP8[(r + a + 18) >> 0] = u),
                    stringToUTF8(l, r + a + 19, 256),
                    (a += o),
                    (s += 1);
                }
                return FS.llseek(n, s * o, 0), a;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getpeername(e, r, t) {
              try {
                var n = getSocketFromFD(e);
                return n.daddr
                  ? (writeSockaddr(
                      r,
                      n.family,
                      DNS.lookup_name(n.daddr),
                      n.dport,
                      t
                    ),
                    0)
                  : -53;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getsockname(e, r, t) {
              try {
                err("__syscall_getsockname " + e);
                var n = getSocketFromFD(e);
                return (
                  writeSockaddr(
                    r,
                    n.family,
                    DNS.lookup_name(n.saddr || "0.0.0.0"),
                    n.sport,
                    t
                  ),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getsockopt(e, r, t, n, o) {
              try {
                var a = getSocketFromFD(e);
                return 1 === r && 4 === t
                  ? ((HEAP32[n >> 2] = a.error),
                    (HEAP32[o >> 2] = 4),
                    (a.error = null),
                    0)
                  : -50;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_ioctl(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 21509:
                  case 21505:
                  case 21510:
                  case 21511:
                  case 21512:
                  case 21506:
                  case 21507:
                  case 21508:
                  case 21523:
                  case 21524:
                    return n.tty ? 0 : -59;
                  case 21519:
                    if (!n.tty) return -59;
                    var o = SYSCALLS.get();
                    return (HEAP32[o >> 2] = 0), 0;
                  case 21520:
                    return n.tty ? -28 : -59;
                  case 21531:
                    return (o = SYSCALLS.get()), FS.ioctl(n, r, o);
                  default:
                    return -28;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_listen(e, r) {
              try {
                var t = getSocketFromFD(e);
                return t.sock_ops.listen(t, r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_lstat64(e, r) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.lstat, e, r)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_mkdirat(e, r, t) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  "/" === (r = PATH.normalize(r))[r.length - 1] &&
                    (r = r.substr(0, r.length - 1)),
                  FS.mkdir(r, t, 0),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_newfstatat(e, r, t, n) {
              try {
                r = SYSCALLS.getStr(r);
                var o = 256 & n,
                  a = 4096 & n;
                return (
                  (n &= -4353),
                  (r = SYSCALLS.calculateAt(e, r, a)),
                  SYSCALLS.doStat(o ? FS.lstat : FS.stat, r, t)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_openat(e, r, t, n) {
              SYSCALLS.varargs = n;
              try {
                (r = SYSCALLS.getStr(r)), (r = SYSCALLS.calculateAt(e, r));
                var o = n ? SYSCALLS.get() : 0;
                return FS.open(r, t, o).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            var PIPEFS = {
              BUCKET_BUFFER_SIZE: 8192,
              mount: function (e) {
                return FS.createNode(null, "/", 16895, 0);
              },
              createPipe: function () {
                var e = { buckets: [], refcnt: 2 };
                e.buckets.push({
                  buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                  offset: 0,
                  roffset: 0,
                });
                var r = PIPEFS.nextname(),
                  t = PIPEFS.nextname(),
                  n = FS.createNode(PIPEFS.root, r, 4096, 0),
                  o = FS.createNode(PIPEFS.root, t, 4096, 0);
                (n.pipe = e), (o.pipe = e);
                var a = FS.createStream({
                  path: r,
                  node: n,
                  flags: 0,
                  seekable: !1,
                  stream_ops: PIPEFS.stream_ops,
                });
                n.stream = a;
                var i = FS.createStream({
                  path: t,
                  node: o,
                  flags: 1,
                  seekable: !1,
                  stream_ops: PIPEFS.stream_ops,
                });
                return (o.stream = i), { readable_fd: a.fd, writable_fd: i.fd };
              },
              stream_ops: {
                poll: function (e) {
                  var r = e.node.pipe;
                  if (1 == (2097155 & e.flags)) return 260;
                  if (r.buckets.length > 0)
                    for (var t = 0; t < r.buckets.length; t++) {
                      var n = r.buckets[t];
                      if (n.offset - n.roffset > 0) return 65;
                    }
                  return 0;
                },
                ioctl: function (e, r, t) {
                  return 28;
                },
                fsync: function (e) {
                  return 28;
                },
                read: function (e, r, t, n, o) {
                  for (
                    var a = e.node.pipe, i = 0, s = 0;
                    s < a.buckets.length;
                    s++
                  ) {
                    var c = a.buckets[s];
                    i += c.offset - c.roffset;
                  }
                  assert(r instanceof ArrayBuffer || ArrayBuffer.isView(r));
                  var u = r.subarray(t, t + n);
                  if (n <= 0) return 0;
                  if (0 == i) throw new FS.ErrnoError(6);
                  var l = Math.min(i, n),
                    d = l,
                    f = 0;
                  for (s = 0; s < a.buckets.length; s++) {
                    var _ = a.buckets[s],
                      m = _.offset - _.roffset;
                    if (l <= m) {
                      var p = _.buffer.subarray(_.roffset, _.offset);
                      l < m ? ((p = p.subarray(0, l)), (_.roffset += l)) : f++,
                        u.set(p);
                      break;
                    }
                    (p = _.buffer.subarray(_.roffset, _.offset)),
                      u.set(p),
                      (u = u.subarray(p.byteLength)),
                      (l -= p.byteLength),
                      f++;
                  }
                  return (
                    f &&
                      f == a.buckets.length &&
                      (f--,
                      (a.buckets[f].offset = 0),
                      (a.buckets[f].roffset = 0)),
                    a.buckets.splice(0, f),
                    d
                  );
                },
                write: function (e, r, t, n, o) {
                  var a = e.node.pipe;
                  assert(r instanceof ArrayBuffer || ArrayBuffer.isView(r));
                  var i = r.subarray(t, t + n),
                    s = i.byteLength;
                  if (s <= 0) return 0;
                  var c = null;
                  0 == a.buckets.length
                    ? ((c = {
                        buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                        offset: 0,
                        roffset: 0,
                      }),
                      a.buckets.push(c))
                    : (c = a.buckets[a.buckets.length - 1]),
                    assert(c.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
                  var u = PIPEFS.BUCKET_BUFFER_SIZE - c.offset;
                  if (u >= s)
                    return c.buffer.set(i, c.offset), (c.offset += s), s;
                  u > 0 &&
                    (c.buffer.set(i.subarray(0, u), c.offset),
                    (c.offset += u),
                    (i = i.subarray(u, i.byteLength)));
                  for (
                    var l = (i.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0,
                      d = i.byteLength % PIPEFS.BUCKET_BUFFER_SIZE,
                      f = 0;
                    f < l;
                    f++
                  ) {
                    var _ = {
                      buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                      offset: PIPEFS.BUCKET_BUFFER_SIZE,
                      roffset: 0,
                    };
                    a.buckets.push(_),
                      _.buffer.set(i.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE)),
                      (i = i.subarray(PIPEFS.BUCKET_BUFFER_SIZE, i.byteLength));
                  }
                  return (
                    d > 0 &&
                      ((_ = {
                        buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
                        offset: i.byteLength,
                        roffset: 0,
                      }),
                      a.buckets.push(_),
                      _.buffer.set(i)),
                    s
                  );
                },
                close: function (e) {
                  var r = e.node.pipe;
                  r.refcnt--, 0 === r.refcnt && (r.buckets = null);
                },
              },
              nextname: function () {
                return (
                  PIPEFS.nextname.current || (PIPEFS.nextname.current = 0),
                  "pipe[" + PIPEFS.nextname.current++ + "]"
                );
              },
            };
            function ___syscall_pipe(e) {
              try {
                if (0 == e) throw new FS.ErrnoError(21);
                var r = PIPEFS.createPipe();
                return (
                  (HEAP32[e >> 2] = r.readable_fd),
                  (HEAP32[(e + 4) >> 2] = r.writable_fd),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_poll(e, r, t) {
              try {
                for (var n = 0, o = 0; o < r; o++) {
                  var a = e + 8 * o,
                    i = HEAP32[a >> 2],
                    s = HEAP16[(a + 4) >> 1],
                    c = 32,
                    u = FS.getStream(i);
                  u &&
                    ((c = SYSCALLS.DEFAULT_POLLMASK),
                    u.stream_ops.poll && (c = u.stream_ops.poll(u))),
                    (c &= 24 | s) && n++,
                    (HEAP16[(a + 6) >> 1] = c);
                }
                return n;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_readlinkat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  n <= 0)
                )
                  return -28;
                var o = FS.readlink(r),
                  a = Math.min(n, lengthBytesUTF8(o)),
                  i = HEAP8[t + a];
                return stringToUTF8(o, t, n + 1), (HEAP8[t + a] = i), a;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_recvfrom(e, r, t, n, o, a) {
              try {
                var i = getSocketFromFD(e),
                  s = i.sock_ops.recvmsg(i, t);
                return s
                  ? (o &&
                      writeSockaddr(
                        o,
                        i.family,
                        DNS.lookup_name(s.addr),
                        s.port,
                        a
                      ),
                    HEAPU8.set(s.buffer, r),
                    s.buffer.byteLength)
                  : 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_recvmsg(e, r, t) {
              try {
                for (
                  var n = getSocketFromFD(e),
                    o = HEAPU32[(r + 8) >> 2],
                    a = HEAP32[(r + 12) >> 2],
                    i = 0,
                    s = 0;
                  s < a;
                  s++
                )
                  i += HEAP32[(o + (8 * s + 4)) >> 2];
                var c = n.sock_ops.recvmsg(n, i);
                if (!c) return 0;
                var u = HEAPU32[r >> 2];
                u &&
                  writeSockaddr(u, n.family, DNS.lookup_name(c.addr), c.port);
                var l = 0,
                  d = c.buffer.byteLength;
                for (s = 0; d > 0 && s < a; s++) {
                  var f = HEAPU32[(o + (8 * s + 0)) >> 2],
                    _ = HEAP32[(o + (8 * s + 4)) >> 2];
                  if (_) {
                    var m = Math.min(_, d),
                      p = c.buffer.subarray(l, l + m);
                    HEAPU8.set(p, f + l), (l += m), (d -= m);
                  }
                }
                return l;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_renameat(e, r, t, n) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (n = SYSCALLS.getStr(n)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  (n = SYSCALLS.calculateAt(t, n)),
                  FS.rename(r, n),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_rmdir(e) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.rmdir(e), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_sendmsg(e, r, t) {
              try {
                var n,
                  o,
                  a = getSocketFromFD(e),
                  i = HEAPU32[(r + 8) >> 2],
                  s = HEAP32[(r + 12) >> 2],
                  c = HEAPU32[r >> 2],
                  u = HEAP32[(r + 4) >> 2];
                if (c) {
                  var l = readSockaddr(c, u);
                  if (l.errno) return -l.errno;
                  (o = l.port), (n = DNS.lookup_addr(l.addr) || l.addr);
                }
                for (var d = 0, f = 0; f < s; f++)
                  d += HEAP32[(i + (8 * f + 4)) >> 2];
                var _ = new Uint8Array(d),
                  m = 0;
                for (f = 0; f < s; f++)
                  for (
                    var p = HEAPU32[(i + (8 * f + 0)) >> 2],
                      S = HEAP32[(i + (8 * f + 4)) >> 2],
                      E = 0;
                    E < S;
                    E++
                  )
                    _[m++] = HEAP8[(p + E) >> 0];
                return a.sock_ops.sendmsg(a, _, 0, d, n, o);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_sendto(e, r, t, n, o, a) {
              try {
                var i = getSocketFromFD(e),
                  s = getSocketAddress(o, a, !0);
                return s
                  ? i.sock_ops.sendmsg(i, HEAP8, r, t, s.addr, s.port)
                  : FS.write(i.stream, HEAP8, r, t);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_socket(e, r, t) {
              try {
                return SOCKFS.createSocket(e, r, t).stream.fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_stat64(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.stat, e, r);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_symlink(e, r) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)),
                  (r = SYSCALLS.getStr(r)),
                  FS.symlink(e, r),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_truncate64(e, r) {
              try {
                return (
                  (r = bigintToI53Checked(r)),
                  isNaN(r)
                    ? -61
                    : ((e = SYSCALLS.getStr(e)), FS.truncate(e, r), 0)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_unlinkat(e, r, t) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  0 === t
                    ? FS.unlink(r)
                    : 512 === t
                    ? FS.rmdir(r)
                    : abort("Invalid flags passed to unlinkat"),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function readI53FromI64(e) {
              return HEAPU32[e >> 2] + 4294967296 * HEAP32[(e + 4) >> 2];
            }
            function ___syscall_utimensat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r, !0)),
                  t)
                ) {
                  var o = readI53FromI64(t),
                    a = HEAP32[(t + 8) >> 2];
                  (i = 1e3 * o + a / 1e6),
                    (s =
                      1e3 * (o = readI53FromI64((t += 16))) +
                      (a = HEAP32[(t + 8) >> 2]) / 1e6);
                } else
                  var i = Date.now(),
                    s = i;
                return FS.utime(r, i, s), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            var nowIsMonotonic = !0,
              _emscripten_get_now;
            function __emscripten_get_now_is_monotonic() {
              return nowIsMonotonic;
            }
            function __gmtime_js(e, r) {
              var t = new Date(1e3 * readI53FromI64(e));
              (HEAP32[r >> 2] = t.getUTCSeconds()),
                (HEAP32[(r + 4) >> 2] = t.getUTCMinutes()),
                (HEAP32[(r + 8) >> 2] = t.getUTCHours()),
                (HEAP32[(r + 12) >> 2] = t.getUTCDate()),
                (HEAP32[(r + 16) >> 2] = t.getUTCMonth()),
                (HEAP32[(r + 20) >> 2] = t.getUTCFullYear() - 1900),
                (HEAP32[(r + 24) >> 2] = t.getUTCDay());
              var n = Date.UTC(t.getUTCFullYear(), 0, 1, 0, 0, 0, 0),
                o = ((t.getTime() - n) / 864e5) | 0;
              HEAP32[(r + 28) >> 2] = o;
            }
            function __localtime_js(e, r) {
              var t = new Date(1e3 * readI53FromI64(e));
              (HEAP32[r >> 2] = t.getSeconds()),
                (HEAP32[(r + 4) >> 2] = t.getMinutes()),
                (HEAP32[(r + 8) >> 2] = t.getHours()),
                (HEAP32[(r + 12) >> 2] = t.getDate()),
                (HEAP32[(r + 16) >> 2] = t.getMonth()),
                (HEAP32[(r + 20) >> 2] = t.getFullYear() - 1900),
                (HEAP32[(r + 24) >> 2] = t.getDay());
              var n = new Date(t.getFullYear(), 0, 1),
                o = ((t.getTime() - n.getTime()) / 864e5) | 0;
              (HEAP32[(r + 28) >> 2] = o),
                (HEAP32[(r + 36) >> 2] = -60 * t.getTimezoneOffset());
              var a = new Date(t.getFullYear(), 6, 1).getTimezoneOffset(),
                i = n.getTimezoneOffset(),
                s = 0 | (a != i && t.getTimezoneOffset() == Math.min(i, a));
              HEAP32[(r + 32) >> 2] = s;
            }
            function __mktime_js(e) {
              var r = new Date(
                  HEAP32[(e + 20) >> 2] + 1900,
                  HEAP32[(e + 16) >> 2],
                  HEAP32[(e + 12) >> 2],
                  HEAP32[(e + 8) >> 2],
                  HEAP32[(e + 4) >> 2],
                  HEAP32[e >> 2],
                  0
                ),
                t = HEAP32[(e + 32) >> 2],
                n = r.getTimezoneOffset(),
                o = new Date(r.getFullYear(), 0, 1),
                a = new Date(r.getFullYear(), 6, 1).getTimezoneOffset(),
                i = o.getTimezoneOffset(),
                s = Math.min(i, a);
              if (t < 0) HEAP32[(e + 32) >> 2] = Number(a != i && s == n);
              else if (t > 0 != (s == n)) {
                var c = Math.max(i, a),
                  u = t > 0 ? s : c;
                r.setTime(r.getTime() + 6e4 * (u - n));
              }
              HEAP32[(e + 24) >> 2] = r.getDay();
              var l = ((r.getTime() - o.getTime()) / 864e5) | 0;
              return (
                (HEAP32[(e + 28) >> 2] = l),
                (HEAP32[e >> 2] = r.getSeconds()),
                (HEAP32[(e + 4) >> 2] = r.getMinutes()),
                (HEAP32[(e + 8) >> 2] = r.getHours()),
                (HEAP32[(e + 12) >> 2] = r.getDate()),
                (HEAP32[(e + 16) >> 2] = r.getMonth()),
                (HEAP32[(e + 20) >> 2] = r.getYear()),
                (r.getTime() / 1e3) | 0
              );
            }
            function __mmap_js(e, r, t, n, o, a, i) {
              try {
                var s = SYSCALLS.getStreamFromFD(n),
                  c = FS.mmap(s, e, o, r, t),
                  u = c.ptr;
                return (HEAP32[a >> 2] = c.allocated), (HEAPU32[i >> 2] = u), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function __msync_js(e, r, t, n, o, a) {
              try {
                return (
                  SYSCALLS.doMsync(e, SYSCALLS.getStreamFromFD(o), r, n, 0), 0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function __munmap_js(e, r, t, n, o, a) {
              try {
                var i = SYSCALLS.getStreamFromFD(o);
                2 & t && SYSCALLS.doMsync(e, i, r, n, a), FS.munmap(i);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function allocateUTF8(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = _malloc(r);
              return t && stringToUTF8Array(e, HEAP8, t, r), t;
            }
            function _tzset_impl(e, r, t) {
              var n = new Date().getFullYear(),
                o = new Date(n, 0, 1),
                a = new Date(n, 6, 1),
                i = o.getTimezoneOffset(),
                s = a.getTimezoneOffset(),
                c = Math.max(i, s);
              function u(e) {
                var r = e.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                return r ? r[1] : "GMT";
              }
              (HEAP32[e >> 2] = 60 * c), (HEAP32[r >> 2] = Number(i != s));
              var l = u(o),
                d = u(a),
                f = allocateUTF8(l),
                _ = allocateUTF8(d);
              s < i
                ? ((HEAPU32[t >> 2] = f), (HEAPU32[(t + 4) >> 2] = _))
                : ((HEAPU32[t >> 2] = _), (HEAPU32[(t + 4) >> 2] = f));
            }
            function __tzset_js(e, r, t) {
              __tzset_js.called ||
                ((__tzset_js.called = !0), _tzset_impl(e, r, t));
            }
            function _abort() {
              abort("");
            }
            function _emscripten_date_now() {
              return Date.now();
            }
            function getHeapMax() {
              return 2147483648;
            }
            function _emscripten_get_heap_max() {
              return getHeapMax();
            }
            function _emscripten_get_now_res() {
              return ENVIRONMENT_IS_NODE ? 1 : 1e3;
            }
            function _emscripten_memcpy_big(e, r, t) {
              HEAPU8.copyWithin(e, r, r + t);
            }
            function emscripten_realloc_buffer(e) {
              try {
                return (
                  wasmMemory.grow((e - buffer.byteLength + 65535) >>> 16),
                  updateGlobalBufferAndViews(wasmMemory.buffer),
                  1
                );
              } catch (e) {}
            }
            function _emscripten_resize_heap(e) {
              var r = HEAPU8.length;
              e >>>= 0;
              var t,
                n = getHeapMax();
              if (e > n) return !1;
              for (var o = 1; o <= 4; o *= 2) {
                var a = r * (1 + 0.2 / o);
                if (
                  ((a = Math.min(a, e + 100663296)),
                  emscripten_realloc_buffer(
                    Math.min(
                      n,
                      (t = Math.max(e, a)) + ((65536 - (t % 65536)) % 65536)
                    )
                  ))
                )
                  return !0;
              }
              return !1;
            }
            _emscripten_get_now = ENVIRONMENT_IS_NODE
              ? () => {
                  var e = process.hrtime();
                  return 1e3 * e[0] + e[1] / 1e6;
                }
              : () => performance.now();
            var ENV = {};
            function getExecutableName() {
              return thisProgram || "./this.program";
            }
            function getEnvStrings() {
              if (!getEnvStrings.strings) {
                var e = {
                  USER: "web_user",
                  LOGNAME: "web_user",
                  PATH: "/",
                  PWD: "/",
                  HOME: "/home/web_user",
                  LANG:
                    (
                      ("object" == typeof navigator &&
                        navigator.languages &&
                        navigator.languages[0]) ||
                      "C"
                    ).replace("-", "_") + ".UTF-8",
                  _: getExecutableName(),
                };
                for (var r in ENV)
                  void 0 === ENV[r] ? delete e[r] : (e[r] = ENV[r]);
                var t = [];
                for (var r in e) t.push(r + "=" + e[r]);
                getEnvStrings.strings = t;
              }
              return getEnvStrings.strings;
            }
            function writeAsciiToMemory(e, r, t) {
              for (var n = 0; n < e.length; ++n)
                HEAP8[r++ >> 0] = e.charCodeAt(n);
              t || (HEAP8[r >> 0] = 0);
            }
            function _environ_get(e, r) {
              var t = 0;
              return (
                getEnvStrings().forEach(function (n, o) {
                  var a = r + t;
                  (HEAPU32[(e + 4 * o) >> 2] = a),
                    writeAsciiToMemory(n, a),
                    (t += n.length + 1);
                }),
                0
              );
            }
            function _environ_sizes_get(e, r) {
              var t = getEnvStrings();
              HEAPU32[e >> 2] = t.length;
              var n = 0;
              return (
                t.forEach(function (e) {
                  n += e.length + 1;
                }),
                (HEAPU32[r >> 2] = n),
                0
              );
            }
            function _proc_exit(e) {
              (EXITSTATUS = e),
                keepRuntimeAlive() ||
                  (Module.onExit && Module.onExit(e), (ABORT = !0)),
                quit_(e, new ExitStatus(e));
            }
            function exitJS(e, r) {
              (EXITSTATUS = e), _proc_exit(e);
            }
            var _exit = exitJS;
            function _fd_close(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return FS.close(r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_fdstat_get(e, r) {
              try {
                var t = SYSCALLS.getStreamFromFD(e),
                  n = t.tty
                    ? 2
                    : FS.isDir(t.mode)
                    ? 3
                    : FS.isLink(t.mode)
                    ? 7
                    : 4;
                return (HEAP8[r >> 0] = n), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doReadv(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.read(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                if (((o += c), c < s)) break;
              }
              return o;
            }
            function _fd_pread(e, r, t, n, o) {
              try {
                if (((n = bigintToI53Checked(n)), isNaN(n))) return 61;
                var a = doReadv(SYSCALLS.getStreamFromFD(e), r, t, n);
                return (HEAPU32[o >> 2] = a), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doWritev(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.write(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                o += c;
              }
              return o;
            }
            function _fd_pwrite(e, r, t, n, o) {
              try {
                if (((n = bigintToI53Checked(n)), isNaN(n))) return 61;
                var a = doWritev(SYSCALLS.getStreamFromFD(e), r, t, n);
                return (HEAPU32[o >> 2] = a), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_read(e, r, t, n) {
              try {
                var o = doReadv(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_seek(e, r, t, n) {
              try {
                if (((r = bigintToI53Checked(r)), isNaN(r))) return 61;
                var o = SYSCALLS.getStreamFromFD(e);
                return (
                  FS.llseek(o, r, t),
                  (tempI64 = [
                    o.position >>> 0,
                    ((tempDouble = o.position),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                  (HEAP32[n >> 2] = tempI64[0]),
                  (HEAP32[(n + 4) >> 2] = tempI64[1]),
                  o.getdents && 0 === r && 0 === t && (o.getdents = null),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_sync(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return r.stream_ops && r.stream_ops.fsync
                  ? r.stream_ops.fsync(r)
                  : 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_write(e, r, t, n) {
              try {
                var o = doWritev(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _getaddrinfo(e, r, t, n) {
              var o,
                a = 0,
                i = 0,
                s = 0,
                c = 0,
                u = 0,
                l = 0;
              function d(e, r, t, n, o, a) {
                var i, s, c;
                return (
                  (s = 10 === e ? 28 : 16),
                  (o = 10 === e ? inetNtop6(o) : inetNtop4(o)),
                  assert(!writeSockaddr((i = _malloc(s)), e, o, a)),
                  (c = _malloc(32)),
                  (HEAP32[(c + 4) >> 2] = e),
                  (HEAP32[(c + 8) >> 2] = r),
                  (HEAP32[(c + 12) >> 2] = t),
                  (HEAP32[(c + 24) >> 2] = n),
                  (HEAPU32[(c + 20) >> 2] = i),
                  (HEAP32[(c + 16) >> 2] = 10 === e ? 28 : 16),
                  (HEAP32[(c + 28) >> 2] = 0),
                  c
                );
              }
              if (
                (t &&
                  ((s = HEAP32[t >> 2]),
                  (c = HEAP32[(t + 4) >> 2]),
                  (u = HEAP32[(t + 8) >> 2]),
                  (l = HEAP32[(t + 12) >> 2])),
                u && !l && (l = 2 === u ? 17 : 6),
                !u && l && (u = 17 === l ? 2 : 1),
                0 === l && (l = 6),
                0 === u && (u = 1),
                !e && !r)
              )
                return -2;
              if (-1088 & s) return -1;
              if (0 !== t && 2 & HEAP32[t >> 2] && !e) return -1;
              if (32 & s) return -2;
              if (0 !== u && 1 !== u && 2 !== u) return -7;
              if (0 !== c && 2 !== c && 10 !== c) return -6;
              if (r && ((r = UTF8ToString(r)), (i = parseInt(r, 10)), isNaN(i)))
                return 1024 & s ? -2 : -8;
              if (!e)
                return (
                  0 === c && (c = 2),
                  0 == (1 & s) &&
                    (a = 2 === c ? _htonl(2130706433) : [0, 0, 0, 1]),
                  (o = d(c, u, l, null, a, i)),
                  (HEAPU32[n >> 2] = o),
                  0
                );
              if (null !== (a = inetPton4((e = UTF8ToString(e)))))
                if (0 === c || 2 === c) c = 2;
                else {
                  if (!(10 === c && 8 & s)) return -2;
                  (a = [0, 0, _htonl(65535), a]), (c = 10);
                }
              else if (null !== (a = inetPton6(e))) {
                if (0 !== c && 10 !== c) return -2;
                c = 10;
              }
              return null != a
                ? ((o = d(c, u, l, e, a, i)), (HEAPU32[n >> 2] = o), 0)
                : 4 & s
                ? -2
                : ((a = inetPton4((e = DNS.lookup_name(e)))),
                  0 === c
                    ? (c = 2)
                    : 10 === c && (a = [0, 0, _htonl(65535), a]),
                  (o = d(c, u, l, null, a, i)),
                  (HEAPU32[n >> 2] = o),
                  0);
            }
            function _getentropy(e, r) {
              _getentropy.randomDevice ||
                (_getentropy.randomDevice = getRandomDevice());
              for (var t = 0; t < r; t++)
                HEAP8[(e + t) >> 0] = _getentropy.randomDevice();
              return 0;
            }
            function getHostByName(e) {
              var r = _malloc(20),
                t = _malloc(e.length + 1);
              stringToUTF8(e, t, e.length + 1), (HEAPU32[r >> 2] = t);
              var n = _malloc(4);
              (HEAPU32[n >> 2] = 0),
                (HEAPU32[(r + 4) >> 2] = n),
                (HEAP32[(r + 8) >> 2] = 2),
                (HEAP32[(r + 12) >> 2] = 4);
              var o = _malloc(12);
              return (
                (HEAPU32[o >> 2] = o + 8),
                (HEAPU32[(o + 4) >> 2] = 0),
                (HEAP32[(o + 8) >> 2] = inetPton4(DNS.lookup_name(e))),
                (HEAPU32[(r + 16) >> 2] = o),
                r
              );
            }
            function _gethostbyaddr(e, r, t) {
              if (2 !== t) return setErrNo(5), null;
              var n = inetNtop4((e = HEAP32[e >> 2])),
                o = DNS.lookup_addr(n);
              return o && (n = o), getHostByName(n);
            }
            function _gethostbyname(e) {
              return getHostByName(UTF8ToString(e));
            }
            function _getloadavg(e, r) {
              for (var t = Math.min(r, 3), n = 0; n < t; n++)
                HEAPF64[(e + 8 * n) >> 3] = 0.1;
              return t;
            }
            function _getnameinfo(e, r, t, n, o, a, i) {
              var s = readSockaddr(e, r);
              if (s.errno) return -6;
              var c = s.port,
                u = s.addr,
                l = !1;
              if (t && n) {
                var d;
                if (1 & i || !(d = DNS.lookup_addr(u))) {
                  if (8 & i) return -2;
                } else u = d;
                stringToUTF8(u, t, n) + 1 >= n && (l = !0);
              }
              return (
                o && a && stringToUTF8((c = "" + c), o, a) + 1 >= a && (l = !0),
                l ? -12 : 0
              );
            }
            var Protocols = { list: [], map: {} };
            function _setprotoent(e) {
              function r(e, r, t) {
                var n = _malloc(e.length + 1);
                writeAsciiToMemory(e, n);
                for (
                  var o = 0, a = t.length, i = _malloc(4 * (a + 1)), s = 0;
                  s < a;
                  s++, o += 4
                ) {
                  var c = t[s],
                    u = _malloc(c.length + 1);
                  writeAsciiToMemory(c, u), (HEAPU32[(i + o) >> 2] = u);
                }
                HEAPU32[(i + o) >> 2] = 0;
                var l = _malloc(12);
                return (
                  (HEAPU32[l >> 2] = n),
                  (HEAPU32[(l + 4) >> 2] = i),
                  (HEAP32[(l + 8) >> 2] = r),
                  l
                );
              }
              var t = Protocols.list,
                n = Protocols.map;
              if (0 === t.length) {
                var o = r("tcp", 6, ["TCP"]);
                t.push(o),
                  (n.tcp = n[6] = o),
                  (o = r("udp", 17, ["UDP"])),
                  t.push(o),
                  (n.udp = n[17] = o);
              }
              _setprotoent.index = 0;
            }
            function _getprotobyname(e) {
              return (e = UTF8ToString(e)), _setprotoent(!0), Protocols.map[e];
            }
            function __isLeapYear(e) {
              return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
            }
            function __arraySum(e, r) {
              for (var t = 0, n = 0; n <= r; t += e[n++]);
              return t;
            }
            var __MONTH_DAYS_LEAP = [
                31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ],
              __MONTH_DAYS_REGULAR = [
                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ];
            function __addDays(e, r) {
              for (var t = new Date(e.getTime()); r > 0; ) {
                var n = __isLeapYear(t.getFullYear()),
                  o = t.getMonth(),
                  a = (n ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[o];
                if (!(r > a - t.getDate()))
                  return t.setDate(t.getDate() + r), t;
                (r -= a - t.getDate() + 1),
                  t.setDate(1),
                  o < 11
                    ? t.setMonth(o + 1)
                    : (t.setMonth(0), t.setFullYear(t.getFullYear() + 1));
              }
              return t;
            }
            function writeArrayToMemory(e, r) {
              HEAP8.set(e, r);
            }
            function _strftime(e, r, t, n) {
              var o = HEAP32[(n + 40) >> 2],
                a = {
                  tm_sec: HEAP32[n >> 2],
                  tm_min: HEAP32[(n + 4) >> 2],
                  tm_hour: HEAP32[(n + 8) >> 2],
                  tm_mday: HEAP32[(n + 12) >> 2],
                  tm_mon: HEAP32[(n + 16) >> 2],
                  tm_year: HEAP32[(n + 20) >> 2],
                  tm_wday: HEAP32[(n + 24) >> 2],
                  tm_yday: HEAP32[(n + 28) >> 2],
                  tm_isdst: HEAP32[(n + 32) >> 2],
                  tm_gmtoff: HEAP32[(n + 36) >> 2],
                  tm_zone: o ? UTF8ToString(o) : "",
                },
                i = UTF8ToString(t),
                s = {
                  "%c": "%a %b %d %H:%M:%S %Y",
                  "%D": "%m/%d/%y",
                  "%F": "%Y-%m-%d",
                  "%h": "%b",
                  "%r": "%I:%M:%S %p",
                  "%R": "%H:%M",
                  "%T": "%H:%M:%S",
                  "%x": "%m/%d/%y",
                  "%X": "%H:%M:%S",
                  "%Ec": "%c",
                  "%EC": "%C",
                  "%Ex": "%m/%d/%y",
                  "%EX": "%H:%M:%S",
                  "%Ey": "%y",
                  "%EY": "%Y",
                  "%Od": "%d",
                  "%Oe": "%e",
                  "%OH": "%H",
                  "%OI": "%I",
                  "%Om": "%m",
                  "%OM": "%M",
                  "%OS": "%S",
                  "%Ou": "%u",
                  "%OU": "%U",
                  "%OV": "%V",
                  "%Ow": "%w",
                  "%OW": "%W",
                  "%Oy": "%y",
                };
              for (var c in s) i = i.replace(new RegExp(c, "g"), s[c]);
              var u = [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ],
                l = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
              function d(e, r, t) {
                for (
                  var n = "number" == typeof e ? e.toString() : e || "";
                  n.length < r;

                )
                  n = t[0] + n;
                return n;
              }
              function f(e, r) {
                return d(e, r, "0");
              }
              function _(e, r) {
                function t(e) {
                  return e < 0 ? -1 : e > 0 ? 1 : 0;
                }
                var n;
                return (
                  0 === (n = t(e.getFullYear() - r.getFullYear())) &&
                    0 === (n = t(e.getMonth() - r.getMonth())) &&
                    (n = t(e.getDate() - r.getDate())),
                  n
                );
              }
              function m(e) {
                switch (e.getDay()) {
                  case 0:
                    return new Date(e.getFullYear() - 1, 11, 29);
                  case 1:
                    return e;
                  case 2:
                    return new Date(e.getFullYear(), 0, 3);
                  case 3:
                    return new Date(e.getFullYear(), 0, 2);
                  case 4:
                    return new Date(e.getFullYear(), 0, 1);
                  case 5:
                    return new Date(e.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(e.getFullYear() - 1, 11, 30);
                }
              }
              function p(e) {
                var r = __addDays(new Date(e.tm_year + 1900, 0, 1), e.tm_yday),
                  t = new Date(r.getFullYear(), 0, 4),
                  n = new Date(r.getFullYear() + 1, 0, 4),
                  o = m(t),
                  a = m(n);
                return _(o, r) <= 0
                  ? _(a, r) <= 0
                    ? r.getFullYear() + 1
                    : r.getFullYear()
                  : r.getFullYear() - 1;
              }
              var S = {
                "%a": function (e) {
                  return u[e.tm_wday].substring(0, 3);
                },
                "%A": function (e) {
                  return u[e.tm_wday];
                },
                "%b": function (e) {
                  return l[e.tm_mon].substring(0, 3);
                },
                "%B": function (e) {
                  return l[e.tm_mon];
                },
                "%C": function (e) {
                  return f(((e.tm_year + 1900) / 100) | 0, 2);
                },
                "%d": function (e) {
                  return f(e.tm_mday, 2);
                },
                "%e": function (e) {
                  return d(e.tm_mday, 2, " ");
                },
                "%g": function (e) {
                  return p(e).toString().substring(2);
                },
                "%G": function (e) {
                  return p(e);
                },
                "%H": function (e) {
                  return f(e.tm_hour, 2);
                },
                "%I": function (e) {
                  var r = e.tm_hour;
                  return 0 == r ? (r = 12) : r > 12 && (r -= 12), f(r, 2);
                },
                "%j": function (e) {
                  return f(
                    e.tm_mday +
                      __arraySum(
                        __isLeapYear(e.tm_year + 1900)
                          ? __MONTH_DAYS_LEAP
                          : __MONTH_DAYS_REGULAR,
                        e.tm_mon - 1
                      ),
                    3
                  );
                },
                "%m": function (e) {
                  return f(e.tm_mon + 1, 2);
                },
                "%M": function (e) {
                  return f(e.tm_min, 2);
                },
                "%n": function () {
                  return "\n";
                },
                "%p": function (e) {
                  return e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM";
                },
                "%S": function (e) {
                  return f(e.tm_sec, 2);
                },
                "%t": function () {
                  return "\t";
                },
                "%u": function (e) {
                  return e.tm_wday || 7;
                },
                "%U": function (e) {
                  var r = e.tm_yday + 7 - e.tm_wday;
                  return f(Math.floor(r / 7), 2);
                },
                "%V": function (e) {
                  var r = Math.floor(
                    (e.tm_yday + 7 - ((e.tm_wday + 6) % 7)) / 7
                  );
                  if (((e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && r++, r)) {
                    if (53 == r) {
                      var t = (e.tm_wday + 371 - e.tm_yday) % 7;
                      4 == t || (3 == t && __isLeapYear(e.tm_year)) || (r = 1);
                    }
                  } else {
                    r = 52;
                    var n = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                    (4 == n ||
                      (5 == n && __isLeapYear((e.tm_year % 400) - 1))) &&
                      r++;
                  }
                  return f(r, 2);
                },
                "%w": function (e) {
                  return e.tm_wday;
                },
                "%W": function (e) {
                  var r = e.tm_yday + 7 - ((e.tm_wday + 6) % 7);
                  return f(Math.floor(r / 7), 2);
                },
                "%y": function (e) {
                  return (e.tm_year + 1900).toString().substring(2);
                },
                "%Y": function (e) {
                  return e.tm_year + 1900;
                },
                "%z": function (e) {
                  var r = e.tm_gmtoff,
                    t = r >= 0;
                  return (
                    (r = ((r = Math.abs(r) / 60) / 60) * 100 + (r % 60)),
                    (t ? "+" : "-") + String("0000" + r).slice(-4)
                  );
                },
                "%Z": function (e) {
                  return e.tm_zone;
                },
                "%%": function () {
                  return "%";
                },
              };
              for (var c in ((i = i.replace(/%%/g, "\0\0")), S))
                i.includes(c) && (i = i.replace(new RegExp(c, "g"), S[c](a)));
              var E = intArrayFromString((i = i.replace(/\0\0/g, "%")), !1);
              return E.length > r
                ? 0
                : (writeArrayToMemory(E, e), E.length - 1);
            }
            function _system(e) {
              if (ENVIRONMENT_IS_NODE) {
                if (!e) return 1;
                var r = UTF8ToString(e);
                if (!r.length) return 0;
                var t = require("child_process").spawnSync(r, [], {
                    shell: !0,
                    stdio: "inherit",
                  }),
                  n = (e, r) => (e << 8) | r;
                return null === t.status
                  ? n(
                      0,
                      ((e) => {
                        switch (e) {
                          case "SIGHUP":
                            return 1;
                          case "SIGINT":
                            return 2;
                          case "SIGQUIT":
                            return 3;
                          case "SIGFPE":
                            return 8;
                          case "SIGKILL":
                            return 9;
                          case "SIGALRM":
                            return 14;
                          case "SIGTERM":
                            return 15;
                        }
                        return 2;
                      })(t.signal)
                    )
                  : n(t.status, 0);
              }
              return e ? (setErrNo(52), -1) : 0;
            }
            function handleException(e) {
              if (e instanceof ExitStatus || "unwind" == e) return EXITSTATUS;
              quit_(1, e);
            }
            function allocateUTF8OnStack(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = stackAlloc(r);
              return stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSROOT = {
                staticInit: () => {
                  FS.root = null;
                  let opts = (Module.ROOT && Module.ROOT.opts) || {},
                    type = (Module.ROOT && Module.ROOT.type) || "MEMFS";
                  "string" == typeof type
                    ? (type = FS.filesystems[type] || eval(type))
                    : "function" == typeof type && (type = type(Module)),
                    FS.mount(type, opts, "/"),
                    FSROOT.createDefaultMountPoints();
                  const restore_mkdir = FSROOT.safeMkdir();
                  FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    restore_mkdir();
                },
                createDefaultMountPoints: () => {
                  FS.mkdirTree("/dev"),
                    FS.mount(MEMFS, {}, "/dev"),
                    FS.mkdirTree("/proc/self"),
                    FS.mount(MEMFS, {}, "/proc/self");
                },
                safeMkdir: () => {
                  const e = FS.mkdir;
                  return (
                    (FS.mkdir = (r, t) => {
                      try {
                        return e(r, t);
                      } catch {
                        return FS.lookupPath(r, { follow: !0 }).node;
                      }
                    }),
                    () => {
                      FS.mkdir = e;
                    }
                  );
                },
              },
              FSNode = function (e, r, t, n) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = FS.nextInode++),
                  (this.name = r),
                  (this.mode = t),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = n);
              },
              readMode = 365,
              writeMode = 146;
            Object.defineProperties(FSNode.prototype, {
              read: {
                get: function () {
                  return (this.mode & readMode) === readMode;
                },
                set: function (e) {
                  e ? (this.mode |= readMode) : (this.mode &= ~readMode);
                },
              },
              write: {
                get: function () {
                  return (this.mode & writeMode) === writeMode;
                },
                set: function (e) {
                  e ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
                },
              },
              isFolder: {
                get: function () {
                  return FS.isDir(this.mode);
                },
              },
              isDevice: {
                get: function () {
                  return FS.isChrdev(this.mode);
                },
              },
            }),
              (FS.FSNode = FSNode),
              FS.staticInit(),
              (Module.FS_createPath = FS.createPath),
              (Module.FS_createDataFile = FS.createDataFile),
              (Module.FS_createPreloadedFile = FS.createPreloadedFile),
              (Module.FS_unlink = FS.unlink),
              (Module.FS_createLazyFile = FS.createLazyFile),
              (Module.FS_createDevice = FS.createDevice),
              ENVIRONMENT_IS_NODE && NODEFS.staticInit(),
              (ERRNO_CODES = {
                EPERM: 63,
                ENOENT: 44,
                ESRCH: 71,
                EINTR: 27,
                EIO: 29,
                ENXIO: 60,
                E2BIG: 1,
                ENOEXEC: 45,
                EBADF: 8,
                ECHILD: 12,
                EAGAIN: 6,
                EWOULDBLOCK: 6,
                ENOMEM: 48,
                EACCES: 2,
                EFAULT: 21,
                ENOTBLK: 105,
                EBUSY: 10,
                EEXIST: 20,
                EXDEV: 75,
                ENODEV: 43,
                ENOTDIR: 54,
                EISDIR: 31,
                EINVAL: 28,
                ENFILE: 41,
                EMFILE: 33,
                ENOTTY: 59,
                ETXTBSY: 74,
                EFBIG: 22,
                ENOSPC: 51,
                ESPIPE: 70,
                EROFS: 69,
                EMLINK: 34,
                EPIPE: 64,
                EDOM: 18,
                ERANGE: 68,
                ENOMSG: 49,
                EIDRM: 24,
                ECHRNG: 106,
                EL2NSYNC: 156,
                EL3HLT: 107,
                EL3RST: 108,
                ELNRNG: 109,
                EUNATCH: 110,
                ENOCSI: 111,
                EL2HLT: 112,
                EDEADLK: 16,
                ENOLCK: 46,
                EBADE: 113,
                EBADR: 114,
                EXFULL: 115,
                ENOANO: 104,
                EBADRQC: 103,
                EBADSLT: 102,
                EDEADLOCK: 16,
                EBFONT: 101,
                ENOSTR: 100,
                ENODATA: 116,
                ETIME: 117,
                ENOSR: 118,
                ENONET: 119,
                ENOPKG: 120,
                EREMOTE: 121,
                ENOLINK: 47,
                EADV: 122,
                ESRMNT: 123,
                ECOMM: 124,
                EPROTO: 65,
                EMULTIHOP: 36,
                EDOTDOT: 125,
                EBADMSG: 9,
                ENOTUNIQ: 126,
                EBADFD: 127,
                EREMCHG: 128,
                ELIBACC: 129,
                ELIBBAD: 130,
                ELIBSCN: 131,
                ELIBMAX: 132,
                ELIBEXEC: 133,
                ENOSYS: 52,
                ENOTEMPTY: 55,
                ENAMETOOLONG: 37,
                ELOOP: 32,
                EOPNOTSUPP: 138,
                EPFNOSUPPORT: 139,
                ECONNRESET: 15,
                ENOBUFS: 42,
                EAFNOSUPPORT: 5,
                EPROTOTYPE: 67,
                ENOTSOCK: 57,
                ENOPROTOOPT: 50,
                ESHUTDOWN: 140,
                ECONNREFUSED: 14,
                EADDRINUSE: 3,
                ECONNABORTED: 13,
                ENETUNREACH: 40,
                ENETDOWN: 38,
                ETIMEDOUT: 73,
                EHOSTDOWN: 142,
                EHOSTUNREACH: 23,
                EINPROGRESS: 26,
                EALREADY: 7,
                EDESTADDRREQ: 17,
                EMSGSIZE: 35,
                EPROTONOSUPPORT: 66,
                ESOCKTNOSUPPORT: 137,
                EADDRNOTAVAIL: 4,
                ENETRESET: 39,
                EISCONN: 30,
                ENOTCONN: 53,
                ETOOMANYREFS: 141,
                EUSERS: 136,
                EDQUOT: 19,
                ESTALE: 72,
                ENOTSUP: 138,
                ENOMEDIUM: 148,
                EILSEQ: 25,
                EOVERFLOW: 61,
                ECANCELED: 11,
                ENOTRECOVERABLE: 56,
                EOWNERDEAD: 62,
                ESTRPIPE: 135,
              }),
              FSROOT.staticInit();
            var decodeBase64 =
              "function" == typeof atob
                ? atob
                : function (e) {
                    var r,
                      t,
                      n,
                      o,
                      a,
                      i,
                      s =
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                      c = "",
                      u = 0;
                    e = e.replace(/[^A-Za-z0-9\+\/\=]/g, "");
                    do {
                      (r =
                        (s.indexOf(e.charAt(u++)) << 2) |
                        ((o = s.indexOf(e.charAt(u++))) >> 4)),
                        (t =
                          ((15 & o) << 4) |
                          ((a = s.indexOf(e.charAt(u++))) >> 2)),
                        (n = ((3 & a) << 6) | (i = s.indexOf(e.charAt(u++)))),
                        (c += String.fromCharCode(r)),
                        64 !== a && (c += String.fromCharCode(t)),
                        64 !== i && (c += String.fromCharCode(n));
                    } while (u < e.length);
                    return c;
                  };
            function intArrayFromBase64(e) {
              if (
                "boolean" == typeof ENVIRONMENT_IS_NODE &&
                ENVIRONMENT_IS_NODE
              ) {
                var r = Buffer.from(e, "base64");
                return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);
              }
              try {
                for (
                  var t = decodeBase64(e), n = new Uint8Array(t.length), o = 0;
                  o < t.length;
                  ++o
                )
                  n[o] = t.charCodeAt(o);
                return n;
              } catch (e) {
                throw new Error("Converting base64 string to bytes failed.");
              }
            }
            var asmLibraryArg = {
                _Py_CheckEmscriptenSignals_Helper,
                _Py_emscripten_runtime,
                __call_sighandler: ___call_sighandler,
                __syscall__newselect: ___syscall__newselect,
                __syscall_accept4: ___syscall_accept4,
                __syscall_bind: ___syscall_bind,
                __syscall_chdir: ___syscall_chdir,
                __syscall_chmod: ___syscall_chmod,
                __syscall_connect: ___syscall_connect,
                __syscall_dup3: ___syscall_dup3,
                __syscall_faccessat: ___syscall_faccessat,
                __syscall_fadvise64: ___syscall_fadvise64,
                __syscall_fchdir: ___syscall_fchdir,
                __syscall_fchmod: ___syscall_fchmod,
                __syscall_fchmodat: ___syscall_fchmodat,
                __syscall_fchown32: ___syscall_fchown32,
                __syscall_fchownat: ___syscall_fchownat,
                __syscall_fcntl64: ___syscall_fcntl64,
                __syscall_fdatasync: ___syscall_fdatasync,
                __syscall_fstat64: ___syscall_fstat64,
                __syscall_fstatfs64: ___syscall_fstatfs64,
                __syscall_ftruncate64: ___syscall_ftruncate64,
                __syscall_getcwd: ___syscall_getcwd,
                __syscall_getdents64: ___syscall_getdents64,
                __syscall_getpeername: ___syscall_getpeername,
                __syscall_getsockname: ___syscall_getsockname,
                __syscall_getsockopt: ___syscall_getsockopt,
                __syscall_ioctl: ___syscall_ioctl,
                __syscall_listen: ___syscall_listen,
                __syscall_lstat64: ___syscall_lstat64,
                __syscall_mkdirat: ___syscall_mkdirat,
                __syscall_newfstatat: ___syscall_newfstatat,
                __syscall_openat: ___syscall_openat,
                __syscall_pipe: ___syscall_pipe,
                __syscall_poll: ___syscall_poll,
                __syscall_readlinkat: ___syscall_readlinkat,
                __syscall_recvfrom: ___syscall_recvfrom,
                __syscall_recvmsg: ___syscall_recvmsg,
                __syscall_renameat: ___syscall_renameat,
                __syscall_rmdir: ___syscall_rmdir,
                __syscall_sendmsg: ___syscall_sendmsg,
                __syscall_sendto: ___syscall_sendto,
                __syscall_socket: ___syscall_socket,
                __syscall_stat64: ___syscall_stat64,
                __syscall_statfs64: ___syscall_statfs64,
                __syscall_symlink: ___syscall_symlink,
                __syscall_truncate64: ___syscall_truncate64,
                __syscall_unlinkat: ___syscall_unlinkat,
                __syscall_utimensat: ___syscall_utimensat,
                _emscripten_get_now_is_monotonic:
                  __emscripten_get_now_is_monotonic,
                _gmtime_js: __gmtime_js,
                _localtime_js: __localtime_js,
                _mktime_js: __mktime_js,
                _mmap_js: __mmap_js,
                _msync_js: __msync_js,
                _munmap_js: __munmap_js,
                _tzset_js: __tzset_js,
                abort: _abort,
                emception_eval_impl,
                emscripten_date_now: _emscripten_date_now,
                emscripten_get_heap_max: _emscripten_get_heap_max,
                emscripten_get_now: _emscripten_get_now,
                emscripten_get_now_res: _emscripten_get_now_res,
                emscripten_memcpy_big: _emscripten_memcpy_big,
                emscripten_resize_heap: _emscripten_resize_heap,
                environ_get: _environ_get,
                environ_sizes_get: _environ_sizes_get,
                exit: _exit,
                fd_close: _fd_close,
                fd_fdstat_get: _fd_fdstat_get,
                fd_pread: _fd_pread,
                fd_pwrite: _fd_pwrite,
                fd_read: _fd_read,
                fd_seek: _fd_seek,
                fd_sync: _fd_sync,
                fd_write: _fd_write,
                getaddrinfo: _getaddrinfo,
                getentropy: _getentropy,
                gethostbyaddr: _gethostbyaddr,
                gethostbyname: _gethostbyname,
                getloadavg: _getloadavg,
                getnameinfo: _getnameinfo,
                getprotobyname: _getprotobyname,
                proc_exit: _proc_exit,
                strftime: _strftime,
                system: _system,
              },
              asm = createWasm(),
              ___wasm_call_ctors = (Module.___wasm_call_ctors = function () {
                return (___wasm_call_ctors = Module.___wasm_call_ctors =
                  Module.asm.__wasm_call_ctors).apply(null, arguments);
              }),
              _main = (Module._main = function () {
                return (_main = Module._main =
                  Module.asm.__main_argc_argv).apply(null, arguments);
              }),
              ___errno_location = (Module.___errno_location = function () {
                return (___errno_location = Module.___errno_location =
                  Module.asm.__errno_location).apply(null, arguments);
              }),
              _malloc = (Module._malloc = function () {
                return (_malloc = Module._malloc = Module.asm.malloc).apply(
                  null,
                  arguments
                );
              }),
              _free = (Module._free = function () {
                return (_free = Module._free = Module.asm.free).apply(
                  null,
                  arguments
                );
              }),
              _ntohs = (Module._ntohs = function () {
                return (_ntohs = Module._ntohs = Module.asm.ntohs).apply(
                  null,
                  arguments
                );
              }),
              _htons = (Module._htons = function () {
                return (_htons = Module._htons = Module.asm.htons).apply(
                  null,
                  arguments
                );
              }),
              _htonl = (Module._htonl = function () {
                return (_htonl = Module._htonl = Module.asm.htonl).apply(
                  null,
                  arguments
                );
              }),
              _emscripten_builtin_memalign =
                (Module._emscripten_builtin_memalign = function () {
                  return (_emscripten_builtin_memalign =
                    Module._emscripten_builtin_memalign =
                      Module.asm.emscripten_builtin_memalign).apply(
                    null,
                    arguments
                  );
                }),
              stackSave = (Module.stackSave = function () {
                return (stackSave = Module.stackSave =
                  Module.asm.stackSave).apply(null, arguments);
              }),
              stackRestore = (Module.stackRestore = function () {
                return (stackRestore = Module.stackRestore =
                  Module.asm.stackRestore).apply(null, arguments);
              }),
              stackAlloc = (Module.stackAlloc = function () {
                return (stackAlloc = Module.stackAlloc =
                  Module.asm.stackAlloc).apply(null, arguments);
              }),
              _Py_EMSCRIPTEN_SIGNAL_HANDLING =
                (Module._Py_EMSCRIPTEN_SIGNAL_HANDLING = 3389360),
              ___start_em_js = (Module.___start_em_js = 3382944),
              ___stop_em_js = (Module.___stop_em_js = 3383556),
              calledRun;
            function callMain(e) {
              var r = Module._main;
              (e = e || []).unshift(thisProgram);
              var t = e.length,
                n = stackAlloc(4 * (t + 1)),
                o = n >> 2;
              e.forEach((e) => {
                HEAP32[o++] = allocateUTF8OnStack(e);
              }),
                (HEAP32[o] = 0);
              try {
                var a = r(t, n);
                return exitJS(a, !0), a;
              } catch (e) {
                return handleException(e);
              }
            }
            function run(e) {
              function r() {
                calledRun ||
                  ((calledRun = !0),
                  (Module.calledRun = !0),
                  ABORT ||
                    (initRuntime(),
                    preMain(),
                    readyPromiseResolve(Module),
                    Module.onRuntimeInitialized &&
                      Module.onRuntimeInitialized(),
                    shouldRunNow && callMain(e),
                    postRun()));
              }
              (e = e || arguments_),
                runDependencies > 0 ||
                  (preRun(),
                  runDependencies > 0 ||
                    (Module.setStatus
                      ? (Module.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            Module.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
            }
            if (
              ((Module.addRunDependency = addRunDependency),
              (Module.removeRunDependency = removeRunDependency),
              (Module.FS_createPath = FS.createPath),
              (Module.FS_createDataFile = FS.createDataFile),
              (Module.FS_createPreloadedFile = FS.createPreloadedFile),
              (Module.FS_createLazyFile = FS.createLazyFile),
              (Module.FS_createDevice = FS.createDevice),
              (Module.FS_unlink = FS.unlink),
              (Module.ERRNO_CODES = ERRNO_CODES),
              (Module.allocateUTF8 = allocateUTF8),
              (Module.FS = FS),
              (Module.PROXYFS = PROXYFS),
              (dependenciesFulfilled = function e() {
                calledRun || run(), calledRun || (dependenciesFulfilled = e);
              }),
              Module.preInit)
            )
              for (
                "function" == typeof Module.preInit &&
                (Module.preInit = [Module.preInit]);
                Module.preInit.length > 0;

              )
                Module.preInit.pop()();
            var shouldRunNow = !0;
            return (
              Module.noInitialRun && (shouldRunNow = !1), run(), Module.ready
            );
          };
        })();
        const __WEBPACK_DEFAULT_EXPORT__ = Module;
      },
      1193: (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
          Z: () => __WEBPACK_DEFAULT_EXPORT__,
        });
        var Module = (() => {
          var _scriptDir =
            "file:///home/jprendes/Projects/emception/build/emception/llvm/llvm-box.mjs";
          return function (Module) {
            Module = Module || {};
            var Module = void 0 !== Module ? Module : {},
              readyPromiseResolve,
              readyPromiseReject;
            Module.ready = new Promise(function (e, r) {
              (readyPromiseResolve = e), (readyPromiseReject = r);
            });
            var moduleOverrides = Object.assign({}, Module),
              arguments_ = [],
              thisProgram = "./this.program",
              quit_ = (e, r) => {
                throw r;
              },
              ENVIRONMENT_IS_WEB = "object" == typeof window,
              ENVIRONMENT_IS_WORKER = "function" == typeof importScripts,
              ENVIRONMENT_IS_NODE =
                "object" == typeof process &&
                "object" == typeof process.versions &&
                "string" == typeof process.versions.node,
              scriptDirectory = "",
              read_,
              readAsync,
              readBinary,
              setWindowTitle,
              fs,
              nodePath;
            function locateFile(e) {
              return Module.locateFile
                ? Module.locateFile(e, scriptDirectory)
                : scriptDirectory + e;
            }
            function logExceptionOnExit(e) {
              e instanceof ExitStatus || err("exiting due to exception: " + e);
            }
            ENVIRONMENT_IS_NODE
              ? ((scriptDirectory = ENVIRONMENT_IS_WORKER
                  ? require("path").dirname(scriptDirectory) + "/"
                  : __dirname + "/"),
                "function" == typeof require &&
                  ((fs = require("fs")), (nodePath = require("path"))),
                (read_ = (e, r) => (
                  (e = nodePath.normalize(e)),
                  fs.readFileSync(e, r ? void 0 : "utf8")
                )),
                (readBinary = (e) => {
                  var r = read_(e, !0);
                  return r.buffer || (r = new Uint8Array(r)), r;
                }),
                (readAsync = (e, r, t) => {
                  (e = nodePath.normalize(e)),
                    fs.readFile(e, function (e, n) {
                      e ? t(e) : r(n.buffer);
                    });
                }),
                process.argv.length > 1 &&
                  (thisProgram = process.argv[1].replace(/\\/g, "/")),
                (arguments_ = process.argv.slice(2)),
                process.on("uncaughtException", function (e) {
                  if (!(e instanceof ExitStatus)) throw e;
                }),
                process.on("unhandledRejection", function (e) {
                  throw e;
                }),
                (quit_ = (e, r) => {
                  if (keepRuntimeAlive()) throw ((process.exitCode = e), r);
                  logExceptionOnExit(r), process.exit(e);
                }),
                (Module.inspect = function () {
                  return "[Emscripten Module object]";
                }))
              : (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) &&
                (ENVIRONMENT_IS_WORKER
                  ? (scriptDirectory = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (scriptDirectory = document.currentScript.src),
                _scriptDir && (scriptDirectory = _scriptDir),
                (scriptDirectory =
                  0 !== scriptDirectory.indexOf("blob:")
                    ? scriptDirectory.substr(
                        0,
                        scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") +
                          1
                      )
                    : ""),
                (read_ = (e) => {
                  var r = new XMLHttpRequest();
                  return r.open("GET", e, !1), r.send(null), r.responseText;
                }),
                ENVIRONMENT_IS_WORKER &&
                  (readBinary = (e) => {
                    var r = new XMLHttpRequest();
                    return (
                      r.open("GET", e, !1),
                      (r.responseType = "arraybuffer"),
                      r.send(null),
                      new Uint8Array(r.response)
                    );
                  }),
                (readAsync = (e, r, t) => {
                  var n = new XMLHttpRequest();
                  n.open("GET", e, !0),
                    (n.responseType = "arraybuffer"),
                    (n.onload = () => {
                      200 == n.status || (0 == n.status && n.response)
                        ? r(n.response)
                        : t();
                    }),
                    (n.onerror = t),
                    n.send(null);
                }),
                (setWindowTitle = (e) => (document.title = e)));
            var out = Module.print || console.log.bind(console),
              err = Module.printErr || console.warn.bind(console),
              wasmBinary;
            Object.assign(Module, moduleOverrides),
              (moduleOverrides = null),
              Module.arguments && (arguments_ = Module.arguments),
              Module.thisProgram && (thisProgram = Module.thisProgram),
              Module.quit && (quit_ = Module.quit),
              Module.wasmBinary && (wasmBinary = Module.wasmBinary);
            var noExitRuntime = Module.noExitRuntime || !0,
              wasmMemory;
            "object" != typeof WebAssembly &&
              abort("no native wasm support detected");
            var ABORT = !1,
              EXITSTATUS;
            function assert(e, r) {
              e || abort(r);
            }
            var UTF8Decoder =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0,
              buffer,
              HEAP8,
              HEAPU8,
              HEAP16,
              HEAPU16,
              HEAP32,
              HEAPU32,
              HEAPF32,
              HEAPF64;
            function UTF8ArrayToString(e, r, t) {
              for (var n = r + t, o = r; e[o] && !(o >= n); ) ++o;
              if (o - r > 16 && e.buffer && UTF8Decoder)
                return UTF8Decoder.decode(e.subarray(r, o));
              for (var a = ""; r < o; ) {
                var i = e[r++];
                if (128 & i) {
                  var s = 63 & e[r++];
                  if (192 != (224 & i)) {
                    var c = 63 & e[r++];
                    if (
                      (i =
                        224 == (240 & i)
                          ? ((15 & i) << 12) | (s << 6) | c
                          : ((7 & i) << 18) |
                            (s << 12) |
                            (c << 6) |
                            (63 & e[r++])) < 65536
                    )
                      a += String.fromCharCode(i);
                    else {
                      var u = i - 65536;
                      a += String.fromCharCode(
                        55296 | (u >> 10),
                        56320 | (1023 & u)
                      );
                    }
                  } else a += String.fromCharCode(((31 & i) << 6) | s);
                } else a += String.fromCharCode(i);
              }
              return a;
            }
            function UTF8ToString(e, r) {
              return e ? UTF8ArrayToString(HEAPU8, e, r) : "";
            }
            function stringToUTF8Array(e, r, t, n) {
              if (!(n > 0)) return 0;
              for (var o = t, a = t + n - 1, i = 0; i < e.length; ++i) {
                var s = e.charCodeAt(i);
                if (
                  (s >= 55296 &&
                    s <= 57343 &&
                    (s =
                      (65536 + ((1023 & s) << 10)) |
                      (1023 & e.charCodeAt(++i))),
                  s <= 127)
                ) {
                  if (t >= a) break;
                  r[t++] = s;
                } else if (s <= 2047) {
                  if (t + 1 >= a) break;
                  (r[t++] = 192 | (s >> 6)), (r[t++] = 128 | (63 & s));
                } else if (s <= 65535) {
                  if (t + 2 >= a) break;
                  (r[t++] = 224 | (s >> 12)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                } else {
                  if (t + 3 >= a) break;
                  (r[t++] = 240 | (s >> 18)),
                    (r[t++] = 128 | ((s >> 12) & 63)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                }
              }
              return (r[t] = 0), t - o;
            }
            function stringToUTF8(e, r, t) {
              return stringToUTF8Array(e, HEAPU8, r, t);
            }
            function lengthBytesUTF8(e) {
              for (var r = 0, t = 0; t < e.length; ++t) {
                var n = e.charCodeAt(t);
                n <= 127
                  ? r++
                  : n <= 2047
                  ? (r += 2)
                  : n >= 55296 && n <= 57343
                  ? ((r += 4), ++t)
                  : (r += 3);
              }
              return r;
            }
            function updateGlobalBufferAndViews(e) {
              (buffer = e),
                (Module.HEAP8 = HEAP8 = new Int8Array(e)),
                (Module.HEAP16 = HEAP16 = new Int16Array(e)),
                (Module.HEAP32 = HEAP32 = new Int32Array(e)),
                (Module.HEAPU8 = HEAPU8 = new Uint8Array(e)),
                (Module.HEAPU16 = HEAPU16 = new Uint16Array(e)),
                (Module.HEAPU32 = HEAPU32 = new Uint32Array(e)),
                (Module.HEAPF32 = HEAPF32 = new Float32Array(e)),
                (Module.HEAPF64 = HEAPF64 = new Float64Array(e));
            }
            var INITIAL_MEMORY = Module.INITIAL_MEMORY || 16777216,
              wasmTable,
              __ATPRERUN__ = [],
              __ATINIT__ = [],
              __ATMAIN__ = [],
              __ATPOSTRUN__ = [],
              runtimeInitialized = !1;
            function keepRuntimeAlive() {
              return noExitRuntime;
            }
            function preRun() {
              if (Module.preRun)
                for (
                  "function" == typeof Module.preRun &&
                  (Module.preRun = [Module.preRun]);
                  Module.preRun.length;

                )
                  addOnPreRun(Module.preRun.shift());
              callRuntimeCallbacks(__ATPRERUN__);
            }
            function initRuntime() {
              (runtimeInitialized = !0),
                Module.noFSInit || FS.init.initialized || FS.init(),
                (FS.ignorePermissions = !1),
                TTY.init(),
                callRuntimeCallbacks(__ATINIT__);
            }
            function preMain() {
              callRuntimeCallbacks(__ATMAIN__);
            }
            function postRun() {
              if (Module.postRun)
                for (
                  "function" == typeof Module.postRun &&
                  (Module.postRun = [Module.postRun]);
                  Module.postRun.length;

                )
                  addOnPostRun(Module.postRun.shift());
              callRuntimeCallbacks(__ATPOSTRUN__);
            }
            function addOnPreRun(e) {
              __ATPRERUN__.unshift(e);
            }
            function addOnInit(e) {
              __ATINIT__.unshift(e);
            }
            function addOnPostRun(e) {
              __ATPOSTRUN__.unshift(e);
            }
            var runDependencies = 0,
              runDependencyWatcher = null,
              dependenciesFulfilled = null;
            function getUniqueRunDependency(e) {
              return e;
            }
            function addRunDependency(e) {
              runDependencies++,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies);
            }
            function removeRunDependency(e) {
              if (
                (runDependencies--,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies),
                0 == runDependencies &&
                  (null !== runDependencyWatcher &&
                    (clearInterval(runDependencyWatcher),
                    (runDependencyWatcher = null)),
                  dependenciesFulfilled))
              ) {
                var r = dependenciesFulfilled;
                (dependenciesFulfilled = null), r();
              }
            }
            function abort(e) {
              Module.onAbort && Module.onAbort(e),
                err((e = "Aborted(" + e + ")")),
                (ABORT = !0),
                (EXITSTATUS = 1),
                (e += ". Build with -sASSERTIONS for more info.");
              var r = new WebAssembly.RuntimeError(e);
              throw (readyPromiseReject(r), r);
            }
            var dataURIPrefix = "data:application/octet-stream;base64,",
              wasmBinaryFile,
              tempDouble,
              tempI64;
            function isDataURI(e) {
              return e.startsWith(dataURIPrefix);
            }
            function isFileURI(e) {
              return e.startsWith("file://");
            }
            function getBinary(e) {
              try {
                if (e == wasmBinaryFile && wasmBinary)
                  return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(e);
                throw "both async and sync fetching of the wasm failed";
              } catch (e) {
                abort(e);
              }
            }
            function getBinaryPromise() {
              if (
                !wasmBinary &&
                (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)
              ) {
                if ("function" == typeof fetch && !isFileURI(wasmBinaryFile))
                  return fetch(wasmBinaryFile, { credentials: "same-origin" })
                    .then(function (e) {
                      if (!e.ok)
                        throw (
                          "failed to load wasm binary file at '" +
                          wasmBinaryFile +
                          "'"
                        );
                      return e.arrayBuffer();
                    })
                    .catch(function () {
                      return getBinary(wasmBinaryFile);
                    });
                if (readAsync)
                  return new Promise(function (e, r) {
                    readAsync(
                      wasmBinaryFile,
                      function (r) {
                        e(new Uint8Array(r));
                      },
                      r
                    );
                  });
              }
              return Promise.resolve().then(function () {
                return getBinary(wasmBinaryFile);
              });
            }
            function createWasm() {
              var e = { a: asmLibraryArg };
              function r(e, r) {
                var t = e.exports;
                (Module.asm = t),
                  updateGlobalBufferAndViews(
                    (wasmMemory = Module.asm.ea).buffer
                  ),
                  (wasmTable = Module.asm.ia),
                  addOnInit(Module.asm.fa),
                  removeRunDependency("wasm-instantiate");
              }
              function t(e) {
                r(e.instance);
              }
              function n(r) {
                return getBinaryPromise()
                  .then(function (r) {
                    return WebAssembly.instantiate(r, e);
                  })
                  .then(function (e) {
                    return e;
                  })
                  .then(r, function (e) {
                    err("failed to asynchronously prepare wasm: " + e),
                      abort(e);
                  });
              }
              if (
                (addRunDependency("wasm-instantiate"), Module.instantiateWasm)
              )
                try {
                  return Module.instantiateWasm(e, r);
                } catch (e) {
                  err(
                    "Module.instantiateWasm callback failed with error: " + e
                  ),
                    readyPromiseReject(e);
                }
              return (
                (wasmBinary ||
                "function" != typeof WebAssembly.instantiateStreaming ||
                isDataURI(wasmBinaryFile) ||
                isFileURI(wasmBinaryFile) ||
                ENVIRONMENT_IS_NODE ||
                "function" != typeof fetch
                  ? n(t)
                  : fetch(wasmBinaryFile, { credentials: "same-origin" }).then(
                      function (r) {
                        return WebAssembly.instantiateStreaming(r, e).then(
                          t,
                          function (e) {
                            return (
                              err("wasm streaming compile failed: " + e),
                              err("falling back to ArrayBuffer instantiation"),
                              n(t)
                            );
                          }
                        );
                      }
                    )
                ).catch(readyPromiseReject),
                {}
              );
            }
            function ExitStatus(e) {
              (this.name = "ExitStatus"),
                (this.message = "Program terminated with exit(" + e + ")"),
                (this.status = e);
            }
            function callRuntimeCallbacks(e) {
              for (; e.length > 0; ) e.shift()(Module);
            }
            Module.locateFile
              ? ((wasmBinaryFile = "llvm-box.wasm"),
                isDataURI(wasmBinaryFile) ||
                  (wasmBinaryFile = locateFile(wasmBinaryFile)))
              : (wasmBinaryFile = new URL(
                  __webpack_require__(9025),
                  __webpack_require__.b
                ).toString());
            var wasmTableMirror = [];
            function getWasmTableEntry(e) {
              var r = wasmTableMirror[e];
              return (
                r ||
                  (e >= wasmTableMirror.length &&
                    (wasmTableMirror.length = e + 1),
                  (wasmTableMirror[e] = r = wasmTable.get(e))),
                r
              );
            }
            function ___call_sighandler(e, r) {
              getWasmTableEntry(e)(r);
            }
            var PATH = {
              isAbs: (e) => "/" === e.charAt(0),
              splitPath: (e) =>
                /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                  .exec(e)
                  .slice(1),
              normalizeArray: (e, r) => {
                for (var t = 0, n = e.length - 1; n >= 0; n--) {
                  var o = e[n];
                  "." === o
                    ? e.splice(n, 1)
                    : ".." === o
                    ? (e.splice(n, 1), t++)
                    : t && (e.splice(n, 1), t--);
                }
                if (r) for (; t; t--) e.unshift("..");
                return e;
              },
              normalize: (e) => {
                var r = PATH.isAbs(e),
                  t = "/" === e.substr(-1);
                return (
                  (e = PATH.normalizeArray(
                    e.split("/").filter((e) => !!e),
                    !r
                  ).join("/")) ||
                    r ||
                    (e = "."),
                  e && t && (e += "/"),
                  (r ? "/" : "") + e
                );
              },
              dirname: (e) => {
                var r = PATH.splitPath(e),
                  t = r[0],
                  n = r[1];
                return t || n
                  ? (n && (n = n.substr(0, n.length - 1)), t + n)
                  : ".";
              },
              basename: (e) => {
                if ("/" === e) return "/";
                var r = (e = (e = PATH.normalize(e)).replace(
                  /\/$/,
                  ""
                )).lastIndexOf("/");
                return -1 === r ? e : e.substr(r + 1);
              },
              join: function () {
                var e = Array.prototype.slice.call(arguments);
                return PATH.normalize(e.join("/"));
              },
              join2: (e, r) => PATH.normalize(e + "/" + r),
            };
            function getRandomDevice() {
              if (
                "object" == typeof crypto &&
                "function" == typeof crypto.getRandomValues
              ) {
                var e = new Uint8Array(1);
                return () => (crypto.getRandomValues(e), e[0]);
              }
              if (ENVIRONMENT_IS_NODE)
                try {
                  var r = require("crypto");
                  return () => r.randomBytes(1)[0];
                } catch (e) {}
              return () => abort("randomDevice");
            }
            var PATH_FS = {
              resolve: function () {
                for (
                  var e = "", r = !1, t = arguments.length - 1;
                  t >= -1 && !r;
                  t--
                ) {
                  var n = t >= 0 ? arguments[t] : FS.cwd();
                  if ("string" != typeof n)
                    throw new TypeError(
                      "Arguments to path.resolve must be strings"
                    );
                  if (!n) return "";
                  (e = n + "/" + e), (r = PATH.isAbs(n));
                }
                return (
                  (r ? "/" : "") +
                    (e = PATH.normalizeArray(
                      e.split("/").filter((e) => !!e),
                      !r
                    ).join("/")) || "."
                );
              },
              relative: (e, r) => {
                function t(e) {
                  for (var r = 0; r < e.length && "" === e[r]; r++);
                  for (var t = e.length - 1; t >= 0 && "" === e[t]; t--);
                  return r > t ? [] : e.slice(r, t - r + 1);
                }
                (e = PATH_FS.resolve(e).substr(1)),
                  (r = PATH_FS.resolve(r).substr(1));
                for (
                  var n = t(e.split("/")),
                    o = t(r.split("/")),
                    a = Math.min(n.length, o.length),
                    i = a,
                    s = 0;
                  s < a;
                  s++
                )
                  if (n[s] !== o[s]) {
                    i = s;
                    break;
                  }
                var c = [];
                for (s = i; s < n.length; s++) c.push("..");
                return (c = c.concat(o.slice(i))).join("/");
              },
            };
            function intArrayFromString(e, r, t) {
              var n = t > 0 ? t : lengthBytesUTF8(e) + 1,
                o = new Array(n),
                a = stringToUTF8Array(e, o, 0, o.length);
              return r && (o.length = a), o;
            }
            var TTY = {
              ttys: [],
              init: function () {},
              shutdown: function () {},
              register: function (e, r) {
                (TTY.ttys[e] = { input: [], output: [], ops: r }),
                  FS.registerDevice(e, TTY.stream_ops);
              },
              stream_ops: {
                open: function (e) {
                  var r = TTY.ttys[e.node.rdev];
                  if (!r) throw new FS.ErrnoError(43);
                  (e.tty = r), (e.seekable = !1);
                },
                close: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                fsync: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                read: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.get_char)
                    throw new FS.ErrnoError(60);
                  for (var a = 0, i = 0; i < n; i++) {
                    var s;
                    try {
                      s = e.tty.ops.get_char(e.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (void 0 === s && 0 === a) throw new FS.ErrnoError(6);
                    if (null == s) break;
                    a++, (r[t + i] = s);
                  }
                  return a && (e.node.timestamp = Date.now()), a;
                },
                write: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.put_char)
                    throw new FS.ErrnoError(60);
                  try {
                    for (var a = 0; a < n; a++)
                      e.tty.ops.put_char(e.tty, r[t + a]);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  return n && (e.node.timestamp = Date.now()), a;
                },
              },
              default_tty_ops: {
                get_char: function (e) {
                  if (!e.input.length) {
                    var r = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var t = Buffer.alloc(256),
                        n = 0;
                      try {
                        n = fs.readSync(process.stdin.fd, t, 0, 256, -1);
                      } catch (e) {
                        if (!e.toString().includes("EOF")) throw e;
                        n = 0;
                      }
                      r = n > 0 ? t.slice(0, n).toString("utf-8") : null;
                    } else
                      "undefined" != typeof window &&
                      "function" == typeof window.prompt
                        ? null !== (r = window.prompt("Input: ")) && (r += "\n")
                        : "function" == typeof readline &&
                          null !== (r = readline()) &&
                          (r += "\n");
                    if (!r) return null;
                    e.input = intArrayFromString(r, !0);
                  }
                  return e.input.shift();
                },
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (out(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (out(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
              default_tty1_ops: {
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (err(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (err(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
            };
            function zeroMemory(e, r) {
              return HEAPU8.fill(0, e, e + r), e;
            }
            function alignMemory(e, r) {
              return Math.ceil(e / r) * r;
            }
            function mmapAlloc(e) {
              e = alignMemory(e, 65536);
              var r = _emscripten_builtin_memalign(65536, e);
              return r ? zeroMemory(r, e) : 0;
            }
            var MEMFS = {
              ops_table: null,
              mount: function (e) {
                return MEMFS.createNode(null, "/", 16895, 0);
              },
              createNode: function (e, r, t, n) {
                if (FS.isBlkdev(t) || FS.isFIFO(t)) throw new FS.ErrnoError(63);
                MEMFS.ops_table ||
                  (MEMFS.ops_table = {
                    dir: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink,
                      },
                      stream: { llseek: MEMFS.stream_ops.llseek },
                    },
                    file: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync,
                      },
                    },
                    link: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink,
                      },
                      stream: {},
                    },
                    chrdev: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: FS.chrdev_stream_ops,
                    },
                  });
                var o = FS.createNode(e, r, t, n);
                return (
                  FS.isDir(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.dir.node),
                      (o.stream_ops = MEMFS.ops_table.dir.stream),
                      (o.contents = {}))
                    : FS.isFile(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.file.node),
                      (o.stream_ops = MEMFS.ops_table.file.stream),
                      (o.usedBytes = 0),
                      (o.contents = null))
                    : FS.isLink(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.link.node),
                      (o.stream_ops = MEMFS.ops_table.link.stream))
                    : FS.isChrdev(o.mode) &&
                      ((o.node_ops = MEMFS.ops_table.chrdev.node),
                      (o.stream_ops = MEMFS.ops_table.chrdev.stream)),
                  (o.timestamp = Date.now()),
                  e && ((e.contents[r] = o), (e.timestamp = o.timestamp)),
                  o
                );
              },
              getFileDataAsTypedArray: function (e) {
                return e.contents
                  ? e.contents.subarray
                    ? e.contents.subarray(0, e.usedBytes)
                    : new Uint8Array(e.contents)
                  : new Uint8Array(0);
              },
              expandFileStorage: function (e, r) {
                var t = e.contents ? e.contents.length : 0;
                if (!(t >= r)) {
                  (r = Math.max(r, (t * (t < 1048576 ? 2 : 1.125)) >>> 0)),
                    0 != t && (r = Math.max(r, 256));
                  var n = e.contents;
                  (e.contents = new Uint8Array(r)),
                    e.usedBytes > 0 &&
                      e.contents.set(n.subarray(0, e.usedBytes), 0);
                }
              },
              resizeFileStorage: function (e, r) {
                if (e.usedBytes != r)
                  if (0 == r) (e.contents = null), (e.usedBytes = 0);
                  else {
                    var t = e.contents;
                    (e.contents = new Uint8Array(r)),
                      t &&
                        e.contents.set(t.subarray(0, Math.min(r, e.usedBytes))),
                      (e.usedBytes = r);
                  }
              },
              node_ops: {
                getattr: function (e) {
                  var r = {};
                  return (
                    (r.dev = FS.isChrdev(e.mode) ? e.id : 1),
                    (r.ino = e.id),
                    (r.mode = e.mode),
                    (r.nlink = 1),
                    (r.uid = 0),
                    (r.gid = 0),
                    (r.rdev = e.rdev),
                    FS.isDir(e.mode)
                      ? (r.size = 4096)
                      : FS.isFile(e.mode)
                      ? (r.size = e.usedBytes)
                      : FS.isLink(e.mode)
                      ? (r.size = e.link.length)
                      : (r.size = 0),
                    (r.atime = new Date(e.timestamp)),
                    (r.mtime = new Date(e.timestamp)),
                    (r.ctime = new Date(e.timestamp)),
                    (r.blksize = 4096),
                    (r.blocks = Math.ceil(r.size / r.blksize)),
                    r
                  );
                },
                setattr: function (e, r) {
                  void 0 !== r.mode && (e.mode = r.mode),
                    void 0 !== r.timestamp && (e.timestamp = r.timestamp),
                    void 0 !== r.size && MEMFS.resizeFileStorage(e, r.size);
                },
                lookup: function (e, r) {
                  throw FS.genericErrors[44];
                },
                mknod: function (e, r, t, n) {
                  return MEMFS.createNode(e, r, t, n);
                },
                rename: function (e, r, t) {
                  if (FS.isDir(e.mode)) {
                    var n;
                    try {
                      n = FS.lookupNode(r, t);
                    } catch (e) {}
                    if (n)
                      for (var o in n.contents) throw new FS.ErrnoError(55);
                  }
                  delete e.parent.contents[e.name],
                    (e.parent.timestamp = Date.now()),
                    (e.name = t),
                    (r.contents[t] = e),
                    (r.timestamp = e.parent.timestamp),
                    (e.parent = r);
                },
                unlink: function (e, r) {
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                rmdir: function (e, r) {
                  var t = FS.lookupNode(e, r);
                  for (var n in t.contents) throw new FS.ErrnoError(55);
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                readdir: function (e) {
                  var r = [".", ".."];
                  for (var t in e.contents)
                    e.contents.hasOwnProperty(t) && r.push(t);
                  return r;
                },
                symlink: function (e, r, t) {
                  var n = MEMFS.createNode(e, r, 41471, 0);
                  return (n.link = t), n;
                },
                readlink: function (e) {
                  if (!FS.isLink(e.mode)) throw new FS.ErrnoError(28);
                  return e.link;
                },
              },
              stream_ops: {
                read: function (e, r, t, n, o) {
                  var a = e.node.contents;
                  if (o >= e.node.usedBytes) return 0;
                  var i = Math.min(e.node.usedBytes - o, n);
                  if (i > 8 && a.subarray) r.set(a.subarray(o, o + i), t);
                  else for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                  return i;
                },
                write: function (e, r, t, n, o, a) {
                  if ((r.buffer === HEAP8.buffer && (a = !1), !n)) return 0;
                  var i = e.node;
                  if (
                    ((i.timestamp = Date.now()),
                    r.subarray && (!i.contents || i.contents.subarray))
                  ) {
                    if (a)
                      return (
                        (i.contents = r.subarray(t, t + n)),
                        (i.usedBytes = n),
                        n
                      );
                    if (0 === i.usedBytes && 0 === o)
                      return (
                        (i.contents = r.slice(t, t + n)), (i.usedBytes = n), n
                      );
                    if (o + n <= i.usedBytes)
                      return i.contents.set(r.subarray(t, t + n), o), n;
                  }
                  if (
                    (MEMFS.expandFileStorage(i, o + n),
                    i.contents.subarray && r.subarray)
                  )
                    i.contents.set(r.subarray(t, t + n), o);
                  else for (var s = 0; s < n; s++) i.contents[o + s] = r[t + s];
                  return (i.usedBytes = Math.max(i.usedBytes, o + n)), n;
                },
                llseek: function (e, r, t) {
                  var n = r;
                  if (
                    (1 === t
                      ? (n += e.position)
                      : 2 === t &&
                        FS.isFile(e.node.mode) &&
                        (n += e.node.usedBytes),
                    n < 0)
                  )
                    throw new FS.ErrnoError(28);
                  return n;
                },
                allocate: function (e, r, t) {
                  MEMFS.expandFileStorage(e.node, r + t),
                    (e.node.usedBytes = Math.max(e.node.usedBytes, r + t));
                },
                mmap: function (e, r, t, n, o) {
                  if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);
                  var a,
                    i,
                    s = e.node.contents;
                  if (2 & o || s.buffer !== buffer) {
                    if (
                      ((t > 0 || t + r < s.length) &&
                        (s = s.subarray
                          ? s.subarray(t, t + r)
                          : Array.prototype.slice.call(s, t, t + r)),
                      (i = !0),
                      !(a = mmapAlloc(r)))
                    )
                      throw new FS.ErrnoError(48);
                    HEAP8.set(s, a);
                  } else (i = !1), (a = s.byteOffset);
                  return { ptr: a, allocated: i };
                },
                msync: function (e, r, t, n, o) {
                  return MEMFS.stream_ops.write(e, r, 0, n, t, !1), 0;
                },
              },
            };
            function asyncLoad(e, r, t, n) {
              var o = n ? "" : getUniqueRunDependency("al " + e);
              readAsync(
                e,
                (t) => {
                  assert(
                    t,
                    'Loading data file "' + e + '" failed (no arrayBuffer).'
                  ),
                    r(new Uint8Array(t)),
                    o && removeRunDependency(o);
                },
                (r) => {
                  if (!t) throw 'Loading data file "' + e + '" failed.';
                  t();
                }
              ),
                o && addRunDependency(o);
            }
            var ERRNO_CODES = {},
              PROXYFS = {
                mount: function (e) {
                  return PROXYFS.createNode(
                    null,
                    "/",
                    e.opts.fs.lstat(e.opts.root).mode,
                    0
                  );
                },
                createNode: function (e, r, t, n) {
                  if (!FS.isDir(t) && !FS.isFile(t) && !FS.isLink(t))
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                  var o = FS.createNode(e, r, t);
                  return (
                    (o.node_ops = PROXYFS.node_ops),
                    (o.stream_ops = PROXYFS.stream_ops),
                    o
                  );
                },
                realPath: function (e) {
                  for (var r = []; e.parent !== e; )
                    r.push(e.name), (e = e.parent);
                  return (
                    r.push(e.mount.opts.root),
                    r.reverse(),
                    PATH.join.apply(null, r)
                  );
                },
                node_ops: {
                  getattr: function (e) {
                    var r,
                      t = PROXYFS.realPath(e);
                    try {
                      r = e.mount.opts.fs.lstat(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return {
                      dev: r.dev,
                      ino: r.ino,
                      mode: r.mode,
                      nlink: r.nlink,
                      uid: r.uid,
                      gid: r.gid,
                      rdev: r.rdev,
                      size: r.size,
                      atime: r.atime,
                      mtime: r.mtime,
                      ctime: r.ctime,
                      blksize: r.blksize,
                      blocks: r.blocks,
                    };
                  },
                  setattr: function (e, r) {
                    var t = PROXYFS.realPath(e);
                    try {
                      if (
                        (void 0 !== r.mode &&
                          (e.mount.opts.fs.chmod(t, r.mode), (e.mode = r.mode)),
                        void 0 !== r.timestamp)
                      ) {
                        var n = new Date(r.timestamp);
                        e.mount.opts.fs.utime(t, n, n);
                      }
                      void 0 !== r.size && e.mount.opts.fs.truncate(t, r.size);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  lookup: function (e, r) {
                    try {
                      var t = PATH.join2(PROXYFS.realPath(e), r),
                        n = e.mount.opts.fs.lstat(t).mode;
                      return PROXYFS.createNode(e, r, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  mknod: function (e, r, t, n) {
                    var o = PROXYFS.createNode(e, r, t, n),
                      a = PROXYFS.realPath(o);
                    try {
                      FS.isDir(o.mode)
                        ? o.mount.opts.fs.mkdir(a, o.mode)
                        : o.mount.opts.fs.writeFile(a, "", { mode: o.mode });
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return o;
                  },
                  rename: function (e, r, t) {
                    var n = PROXYFS.realPath(e),
                      o = PATH.join2(PROXYFS.realPath(r), t);
                    try {
                      e.mount.opts.fs.rename(n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  unlink: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.unlink(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  rmdir: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.rmdir(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readdir: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readdir(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  symlink: function (e, r, t) {
                    var n = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.symlink(t, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readlink: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readlink(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                },
                stream_ops: {
                  open: function (e) {
                    var r = PROXYFS.realPath(e.node);
                    try {
                      e.nfd = e.node.mount.opts.fs.open(r, e.flags);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  close: function (e) {
                    try {
                      e.node.mount.opts.fs.close(e.nfd);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  read: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.read(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  write: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.write(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  llseek: function (e, r, t) {
                    var n = r;
                    if (1 === t) n += e.position;
                    else if (2 === t && FS.isFile(e.node.mode))
                      try {
                        n += e.node.node_ops.getattr(e.node).size;
                      } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                      }
                    if (n < 0) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                    return n;
                  },
                },
              },
              FS = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, r = {}) => {
                  if (!(e = PATH_FS.resolve(FS.cwd(), e)))
                    return { path: "", node: null };
                  if (
                    (r = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      r
                    )).recurse_count > 8
                  )
                    throw new FS.ErrnoError(32);
                  for (
                    var t = PATH.normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !1
                      ),
                      n = FS.root,
                      o = "/",
                      a = 0;
                    a < t.length;
                    a++
                  ) {
                    var i = a === t.length - 1;
                    if (i && r.parent) break;
                    if (
                      ((n = FS.lookupNode(n, t[a])),
                      (o = PATH.join2(o, t[a])),
                      FS.isMountpoint(n) &&
                        (!i || (i && r.follow_mount)) &&
                        (n = n.mounted.root),
                      !i || r.follow)
                    )
                      for (var s = 0; FS.isLink(n.mode); ) {
                        var c = FS.readlink(o);
                        if (
                          ((o = PATH_FS.resolve(PATH.dirname(o), c)),
                          (n = FS.lookupPath(o, {
                            recurse_count: r.recurse_count + 1,
                          }).node),
                          s++ > 40)
                        )
                          throw new FS.ErrnoError(32);
                      }
                  }
                  return { path: o, node: n };
                },
                getPath: (e) => {
                  for (var r; ; ) {
                    if (FS.isRoot(e)) {
                      var t = e.mount.mountpoint;
                      return r
                        ? "/" !== t[t.length - 1]
                          ? t + "/" + r
                          : t + r
                        : t;
                    }
                    (r = r ? e.name + "/" + r : e.name), (e = e.parent);
                  }
                },
                hashName: (e, r) => {
                  for (var t = 0, n = 0; n < r.length; n++)
                    t = ((t << 5) - t + r.charCodeAt(n)) | 0;
                  return ((e + t) >>> 0) % FS.nameTable.length;
                },
                hashAddNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  (e.name_next = FS.nameTable[r]), (FS.nameTable[r] = e);
                },
                hashRemoveNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  if (FS.nameTable[r] === e) FS.nameTable[r] = e.name_next;
                  else
                    for (var t = FS.nameTable[r]; t; ) {
                      if (t.name_next === e) {
                        t.name_next = e.name_next;
                        break;
                      }
                      t = t.name_next;
                    }
                },
                lookupNode: (e, r) => {
                  var t = FS.mayLookup(e);
                  if (t) throw new FS.ErrnoError(t, e);
                  for (
                    var n = FS.hashName(e.id, r), o = FS.nameTable[n];
                    o;
                    o = o.name_next
                  ) {
                    var a = o.name;
                    if (o.parent.id === e.id && a === r) return o;
                  }
                  return FS.lookup(e, r);
                },
                createNode: (e, r, t, n) => {
                  var o = new FS.FSNode(e, r, t, n);
                  return FS.hashAddNode(o), o;
                },
                destroyNode: (e) => {
                  FS.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagModes: {
                  r: 0,
                  "r+": 2,
                  w: 577,
                  "w+": 578,
                  a: 1089,
                  "a+": 1090,
                },
                modeStringToFlags: (e) => {
                  var r = FS.flagModes[e];
                  if (void 0 === r)
                    throw new Error("Unknown file open mode: " + e);
                  return r;
                },
                flagsToPermissionString: (e) => {
                  var r = ["r", "w", "rw"][3 & e];
                  return 512 & e && (r += "w"), r;
                },
                nodePermissions: (e, r) =>
                  FS.ignorePermissions ||
                  ((!r.includes("r") || 292 & e.mode) &&
                    (!r.includes("w") || 146 & e.mode) &&
                    (!r.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  FS.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, r) => {
                  try {
                    return FS.lookupNode(e, r), 20;
                  } catch (e) {}
                  return FS.nodePermissions(e, "wx");
                },
                mayDelete: (e, r, t) => {
                  var n;
                  try {
                    n = FS.lookupNode(e, r);
                  } catch (e) {
                    return e.errno;
                  }
                  var o = FS.nodePermissions(e, "wx");
                  if (o) return o;
                  if (t) {
                    if (!FS.isDir(n.mode)) return 54;
                    if (FS.isRoot(n) || FS.getPath(n) === FS.cwd()) return 10;
                  } else if (FS.isDir(n.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, r) =>
                  e
                    ? FS.isLink(e.mode)
                      ? 32
                      : FS.isDir(e.mode) &&
                        ("r" !== FS.flagsToPermissionString(r) || 512 & r)
                      ? 31
                      : FS.nodePermissions(e, FS.flagsToPermissionString(r))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: (e = 0, r = FS.MAX_OPEN_FDS) => {
                  for (var t = e; t <= r; t++) if (!FS.streams[t]) return t;
                  throw new FS.ErrnoError(33);
                },
                getStream: (e) => FS.streams[e],
                createStream: (e, r, t) => {
                  FS.FSStream ||
                    ((FS.FSStream = function () {
                      this.shared = {};
                    }),
                    (FS.FSStream.prototype = {}),
                    Object.defineProperties(FS.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                    (e = Object.assign(new FS.FSStream(), e));
                  var n = FS.nextfd(r, t);
                  return (e.fd = n), (FS.streams[n] = e), e;
                },
                closeStream: (e) => {
                  FS.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var r = FS.getDevice(e.node.rdev);
                    (e.stream_ops = r.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new FS.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, r) => (e << 8) | r,
                registerDevice: (e, r) => {
                  FS.devices[e] = { stream_ops: r };
                },
                getDevice: (e) => FS.devices[e],
                getMounts: (e) => {
                  for (var r = [], t = [e]; t.length; ) {
                    var n = t.pop();
                    r.push(n), t.push.apply(t, n.mounts);
                  }
                  return r;
                },
                syncfs: (e, r) => {
                  "function" == typeof e && ((r = e), (e = !1)),
                    FS.syncFSRequests++,
                    FS.syncFSRequests > 1 &&
                      err(
                        "warning: " +
                          FS.syncFSRequests +
                          " FS.syncfs operations in flight at once, probably just doing extra work"
                      );
                  var t = FS.getMounts(FS.root.mount),
                    n = 0;
                  function o(e) {
                    return FS.syncFSRequests--, r(e);
                  }
                  function a(e) {
                    if (e) return a.errored ? void 0 : ((a.errored = !0), o(e));
                    ++n >= t.length && o(null);
                  }
                  t.forEach((r) => {
                    if (!r.type.syncfs) return a(null);
                    r.type.syncfs(r, e, a);
                  });
                },
                mount: (e, r, t) => {
                  var n,
                    o = "/" === t,
                    a = !t;
                  if (o && FS.root) throw new FS.ErrnoError(10);
                  if (!o && !a) {
                    var i = FS.lookupPath(t, { follow_mount: !1 });
                    if (((t = i.path), (n = i.node), FS.isMountpoint(n)))
                      throw new FS.ErrnoError(10);
                    if (!FS.isDir(n.mode)) throw new FS.ErrnoError(54);
                  }
                  var s = { type: e, opts: r, mountpoint: t, mounts: [] },
                    c = e.mount(s);
                  return (
                    (c.mount = s),
                    (s.root = c),
                    o
                      ? (FS.root = c)
                      : n &&
                        ((n.mounted = s), n.mount && n.mount.mounts.push(s)),
                    c
                  );
                },
                unmount: (e) => {
                  var r = FS.lookupPath(e, { follow_mount: !1 });
                  if (!FS.isMountpoint(r.node)) throw new FS.ErrnoError(28);
                  var t = r.node,
                    n = t.mounted,
                    o = FS.getMounts(n);
                  Object.keys(FS.nameTable).forEach((e) => {
                    for (var r = FS.nameTable[e]; r; ) {
                      var t = r.name_next;
                      o.includes(r.mount) && FS.destroyNode(r), (r = t);
                    }
                  }),
                    (t.mounted = null);
                  var a = t.mount.mounts.indexOf(n);
                  t.mount.mounts.splice(a, 1);
                },
                lookup: (e, r) => e.node_ops.lookup(e, r),
                mknod: (e, r, t) => {
                  var n = FS.lookupPath(e, { parent: !0 }).node,
                    o = PATH.basename(e);
                  if (!o || "." === o || ".." === o)
                    throw new FS.ErrnoError(28);
                  var a = FS.mayCreate(n, o);
                  if (a) throw new FS.ErrnoError(a);
                  if (!n.node_ops.mknod) throw new FS.ErrnoError(63);
                  return n.node_ops.mknod(n, o, r, t);
                },
                create: (e, r) => (
                  (r = void 0 !== r ? r : 438),
                  (r &= 4095),
                  (r |= 32768),
                  FS.mknod(e, r, 0)
                ),
                mkdir: (e, r) => (
                  (r = void 0 !== r ? r : 511),
                  (r &= 1023),
                  (r |= 16384),
                  FS.mknod(e, r, 0)
                ),
                mkdirTree: (e, r) => {
                  for (var t = e.split("/"), n = "", o = 0; o < t.length; ++o)
                    if (t[o]) {
                      n += "/" + t[o];
                      try {
                        FS.mkdir(n, r);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, r, t) => (
                  void 0 === t && ((t = r), (r = 438)),
                  (r |= 8192),
                  FS.mknod(e, r, t)
                ),
                symlink: (e, r) => {
                  if (!PATH_FS.resolve(e)) throw new FS.ErrnoError(44);
                  var t = FS.lookupPath(r, { parent: !0 }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  var n = PATH.basename(r),
                    o = FS.mayCreate(t, n);
                  if (o) throw new FS.ErrnoError(o);
                  if (!t.node_ops.symlink) throw new FS.ErrnoError(63);
                  return t.node_ops.symlink(t, n, e);
                },
                rename: (e, r) => {
                  var t,
                    n,
                    o = PATH.dirname(e),
                    a = PATH.dirname(r),
                    i = PATH.basename(e),
                    s = PATH.basename(r);
                  if (
                    ((t = FS.lookupPath(e, { parent: !0 }).node),
                    (n = FS.lookupPath(r, { parent: !0 }).node),
                    !t || !n)
                  )
                    throw new FS.ErrnoError(44);
                  if (t.mount !== n.mount) throw new FS.ErrnoError(75);
                  var c,
                    u = FS.lookupNode(t, i),
                    l = PATH_FS.relative(e, a);
                  if ("." !== l.charAt(0)) throw new FS.ErrnoError(28);
                  if ("." !== (l = PATH_FS.relative(r, o)).charAt(0))
                    throw new FS.ErrnoError(55);
                  try {
                    c = FS.lookupNode(n, s);
                  } catch (e) {}
                  if (u !== c) {
                    var d = FS.isDir(u.mode),
                      f = FS.mayDelete(t, i, d);
                    if (f) throw new FS.ErrnoError(f);
                    if ((f = c ? FS.mayDelete(n, s, d) : FS.mayCreate(n, s)))
                      throw new FS.ErrnoError(f);
                    if (!t.node_ops.rename) throw new FS.ErrnoError(63);
                    if (FS.isMountpoint(u) || (c && FS.isMountpoint(c)))
                      throw new FS.ErrnoError(10);
                    if (n !== t && (f = FS.nodePermissions(t, "w")))
                      throw new FS.ErrnoError(f);
                    FS.hashRemoveNode(u);
                    try {
                      t.node_ops.rename(u, n, s);
                    } catch (e) {
                      throw e;
                    } finally {
                      FS.hashAddNode(u);
                    }
                  }
                },
                rmdir: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node,
                    t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !0);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.rmdir) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.rmdir(r, t), FS.destroyNode(n);
                },
                readdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 }).node;
                  if (!r.node_ops.readdir) throw new FS.ErrnoError(54);
                  return r.node_ops.readdir(r);
                },
                unlink: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node;
                  if (!r) throw new FS.ErrnoError(44);
                  var t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !1);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.unlink) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.unlink(r, t), FS.destroyNode(n);
                },
                readlink: (e) => {
                  var r = FS.lookupPath(e).node;
                  if (!r) throw new FS.ErrnoError(44);
                  if (!r.node_ops.readlink) throw new FS.ErrnoError(28);
                  return PATH_FS.resolve(
                    FS.getPath(r.parent),
                    r.node_ops.readlink(r)
                  );
                },
                stat: (e, r) => {
                  var t = FS.lookupPath(e, { follow: !r }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  if (!t.node_ops.getattr) throw new FS.ErrnoError(63);
                  return t.node_ops.getattr(t);
                },
                lstat: (e) => FS.stat(e, !0),
                chmod: (e, r, t) => {
                  var n;
                  if (
                    !(n =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !t }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  n.node_ops.setattr(n, {
                    mode: (4095 & r) | (-4096 & n.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, r) => {
                  FS.chmod(e, r, !0);
                },
                fchmod: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  FS.chmod(t.node, r);
                },
                chown: (e, r, t, n) => {
                  var o;
                  if (
                    !(o =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !n }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  o.node_ops.setattr(o, { timestamp: Date.now() });
                },
                lchown: (e, r, t) => {
                  FS.chown(e, r, t, !0);
                },
                fchown: (e, r, t) => {
                  var n = FS.getStream(e);
                  if (!n) throw new FS.ErrnoError(8);
                  FS.chown(n.node, r, t);
                },
                truncate: (e, r) => {
                  if (r < 0) throw new FS.ErrnoError(28);
                  var t;
                  if (
                    !(t =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  if (FS.isDir(t.mode)) throw new FS.ErrnoError(31);
                  if (!FS.isFile(t.mode)) throw new FS.ErrnoError(28);
                  var n = FS.nodePermissions(t, "w");
                  if (n) throw new FS.ErrnoError(n);
                  t.node_ops.setattr(t, { size: r, timestamp: Date.now() });
                },
                ftruncate: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & t.flags)) throw new FS.ErrnoError(28);
                  FS.truncate(t.node, r);
                },
                utime: (e, r, t) => {
                  var n = FS.lookupPath(e, { follow: !0 }).node;
                  n.node_ops.setattr(n, { timestamp: Math.max(r, t) });
                },
                open: (e, r, t) => {
                  if ("" === e) throw new FS.ErrnoError(44);
                  var n;
                  if (
                    ((t = void 0 === t ? 438 : t),
                    (t =
                      64 &
                      (r = "string" == typeof r ? FS.modeStringToFlags(r) : r)
                        ? (4095 & t) | 32768
                        : 0),
                    "object" == typeof e)
                  )
                    n = e;
                  else {
                    e = PATH.normalize(e);
                    try {
                      n = FS.lookupPath(e, { follow: !(131072 & r) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & r)
                    if (n) {
                      if (128 & r) throw new FS.ErrnoError(20);
                    } else (n = FS.mknod(e, t, 0)), (o = !0);
                  if (!n) throw new FS.ErrnoError(44);
                  if (
                    (FS.isChrdev(n.mode) && (r &= -513),
                    65536 & r && !FS.isDir(n.mode))
                  )
                    throw new FS.ErrnoError(54);
                  if (!o) {
                    var a = FS.mayOpen(n, r);
                    if (a) throw new FS.ErrnoError(a);
                  }
                  512 & r && !o && FS.truncate(n, 0), (r &= -131713);
                  var i = FS.createStream({
                    node: n,
                    path: FS.getPath(n),
                    flags: r,
                    seekable: !0,
                    position: 0,
                    stream_ops: n.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    i.stream_ops.open && i.stream_ops.open(i),
                    !Module.logReadFiles ||
                      1 & r ||
                      (FS.readFiles || (FS.readFiles = {}),
                      e in FS.readFiles || (FS.readFiles[e] = 1)),
                    i
                  );
                },
                close: (e) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new FS.ErrnoError(70);
                  if (0 != t && 1 != t && 2 != t) throw new FS.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, r, t)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, r, t, n, o) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.read) throw new FS.ErrnoError(28);
                  var a = void 0 !== o;
                  if (a) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var i = e.stream_ops.read(e, r, t, n, o);
                  return a || (e.position += i), i;
                },
                write: (e, r, t, n, o, a) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.write) throw new FS.ErrnoError(28);
                  e.seekable && 1024 & e.flags && FS.llseek(e, 0, 2);
                  var i = void 0 !== o;
                  if (i) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var s = e.stream_ops.write(e, r, t, n, o, a);
                  return i || (e.position += s), s;
                },
                allocate: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (r < 0 || t <= 0) throw new FS.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode))
                    throw new FS.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new FS.ErrnoError(138);
                  e.stream_ops.allocate(e, r, t);
                },
                mmap: (e, r, t, n, o) => {
                  if (0 != (2 & n) && 0 == (2 & o) && 2 != (2097155 & e.flags))
                    throw new FS.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new FS.ErrnoError(43);
                  return e.stream_ops.mmap(e, r, t, n, o);
                },
                msync: (e, r, t, n, o) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, r, t, n, o) : 0,
                munmap: (e) => 0,
                ioctl: (e, r, t) => {
                  if (!e.stream_ops.ioctl) throw new FS.ErrnoError(59);
                  return e.stream_ops.ioctl(e, r, t);
                },
                readFile: (e, r = {}) => {
                  if (
                    ((r.flags = r.flags || 0),
                    (r.encoding = r.encoding || "binary"),
                    "utf8" !== r.encoding && "binary" !== r.encoding)
                  )
                    throw new Error(
                      'Invalid encoding type "' + r.encoding + '"'
                    );
                  var t,
                    n = FS.open(e, r.flags),
                    o = FS.stat(e).size,
                    a = new Uint8Array(o);
                  return (
                    FS.read(n, a, 0, o, 0),
                    "utf8" === r.encoding
                      ? (t = UTF8ArrayToString(a, 0))
                      : "binary" === r.encoding && (t = a),
                    FS.close(n),
                    t
                  );
                },
                writeFile: (e, r, t = {}) => {
                  t.flags = t.flags || 577;
                  var n = FS.open(e, t.flags, t.mode);
                  if ("string" == typeof r) {
                    var o = new Uint8Array(lengthBytesUTF8(r) + 1),
                      a = stringToUTF8Array(r, o, 0, o.length);
                    FS.write(n, o, 0, a, void 0, t.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(r))
                      throw new Error("Unsupported data type");
                    FS.write(n, r, 0, r.byteLength, void 0, t.canOwn);
                  }
                  FS.close(n);
                },
                cwd: () => FS.currentPath,
                chdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 });
                  if (null === r.node) throw new FS.ErrnoError(44);
                  if (!FS.isDir(r.node.mode)) throw new FS.ErrnoError(54);
                  var t = FS.nodePermissions(r.node, "x");
                  if (t) throw new FS.ErrnoError(t);
                  FS.currentPath = r.path;
                },
                createDefaultDirectories: () => {
                  FS.mkdir("/tmp"),
                    FS.mkdir("/home"),
                    FS.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  FS.mkdir("/dev"),
                    FS.registerDevice(FS.makedev(1, 3), {
                      read: () => 0,
                      write: (e, r, t, n, o) => n,
                    }),
                    FS.mkdev("/dev/null", FS.makedev(1, 3)),
                    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops),
                    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops),
                    FS.mkdev("/dev/tty", FS.makedev(5, 0)),
                    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var e = getRandomDevice();
                  FS.createDevice("/dev", "random", e),
                    FS.createDevice("/dev", "urandom", e),
                    FS.mkdir("/dev/shm"),
                    FS.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var e = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd"),
                    FS.mount(
                      {
                        mount: () => {
                          var r = FS.createNode(e, "fd", 16895, 73);
                          return (
                            (r.node_ops = {
                              lookup: (e, r) => {
                                var t = +r,
                                  n = FS.getStream(t);
                                if (!n) throw new FS.ErrnoError(8);
                                var o = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => n.path },
                                };
                                return (o.parent = o), o;
                              },
                            }),
                            r
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  Module.stdin
                    ? FS.createDevice("/dev", "stdin", Module.stdin)
                    : FS.symlink("/dev/tty", "/dev/stdin"),
                    Module.stdout
                      ? FS.createDevice("/dev", "stdout", null, Module.stdout)
                      : FS.symlink("/dev/tty", "/dev/stdout"),
                    Module.stderr
                      ? FS.createDevice("/dev", "stderr", null, Module.stderr)
                      : FS.symlink("/dev/tty1", "/dev/stderr"),
                    FS.open("/dev/stdin", 0),
                    FS.open("/dev/stdout", 1),
                    FS.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  FS.ErrnoError ||
                    ((FS.ErrnoError = function (e, r) {
                      (this.node = r),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (FS.ErrnoError.prototype = new Error()),
                    (FS.ErrnoError.prototype.constructor = FS.ErrnoError),
                    [44].forEach((e) => {
                      (FS.genericErrors[e] = new FS.ErrnoError(e)),
                        (FS.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  FS.ensureErrnoError(),
                    (FS.nameTable = new Array(4096)),
                    FS.mount(MEMFS, {}, "/"),
                    FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    (FS.filesystems = { MEMFS, PROXYFS });
                },
                init: (e, r, t) => {
                  (FS.init.initialized = !0),
                    FS.ensureErrnoError(),
                    (Module.stdin = e || Module.stdin),
                    (Module.stdout = r || Module.stdout),
                    (Module.stderr = t || Module.stderr),
                    FS.createStandardStreams();
                },
                quit: () => {
                  FS.init.initialized = !1;
                  for (var e = 0; e < FS.streams.length; e++) {
                    var r = FS.streams[e];
                    r && FS.close(r);
                  }
                },
                getMode: (e, r) => {
                  var t = 0;
                  return e && (t |= 365), r && (t |= 146), t;
                },
                findObject: (e, r) => {
                  var t = FS.analyzePath(e, r);
                  return t.exists ? t.object : null;
                },
                analyzePath: (e, r) => {
                  try {
                    e = (n = FS.lookupPath(e, { follow: !r })).path;
                  } catch (e) {}
                  var t = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var n = FS.lookupPath(e, { parent: !0 });
                    (t.parentExists = !0),
                      (t.parentPath = n.path),
                      (t.parentObject = n.node),
                      (t.name = PATH.basename(e)),
                      (n = FS.lookupPath(e, { follow: !r })),
                      (t.exists = !0),
                      (t.path = n.path),
                      (t.object = n.node),
                      (t.name = n.node.name),
                      (t.isRoot = "/" === n.path);
                  } catch (e) {
                    t.error = e.errno;
                  }
                  return t;
                },
                createPath: (e, r, t, n) => {
                  e = "string" == typeof e ? e : FS.getPath(e);
                  for (var o = r.split("/").reverse(); o.length; ) {
                    var a = o.pop();
                    if (a) {
                      var i = PATH.join2(e, a);
                      try {
                        FS.mkdir(i);
                      } catch (e) {}
                      e = i;
                    }
                  }
                  return i;
                },
                createFile: (e, r, t, n, o) => {
                  var a = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    i = FS.getMode(n, o);
                  return FS.create(a, i);
                },
                createDataFile: (e, r, t, n, o, a) => {
                  var i = r;
                  e &&
                    ((e = "string" == typeof e ? e : FS.getPath(e)),
                    (i = r ? PATH.join2(e, r) : e));
                  var s = FS.getMode(n, o),
                    c = FS.create(i, s);
                  if (t) {
                    if ("string" == typeof t) {
                      for (
                        var u = new Array(t.length), l = 0, d = t.length;
                        l < d;
                        ++l
                      )
                        u[l] = t.charCodeAt(l);
                      t = u;
                    }
                    FS.chmod(c, 146 | s);
                    var f = FS.open(c, 577);
                    FS.write(f, t, 0, t.length, 0, a),
                      FS.close(f),
                      FS.chmod(c, s);
                  }
                  return c;
                },
                createDevice: (e, r, t, n) => {
                  var o = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    a = FS.getMode(!!t, !!n);
                  FS.createDevice.major || (FS.createDevice.major = 64);
                  var i = FS.makedev(FS.createDevice.major++, 0);
                  return (
                    FS.registerDevice(i, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        n && n.buffer && n.buffer.length && n(10);
                      },
                      read: (e, r, n, o, a) => {
                        for (var i = 0, s = 0; s < o; s++) {
                          var c;
                          try {
                            c = t();
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                          if (void 0 === c && 0 === i)
                            throw new FS.ErrnoError(6);
                          if (null == c) break;
                          i++, (r[n + s] = c);
                        }
                        return i && (e.node.timestamp = Date.now()), i;
                      },
                      write: (e, r, t, o, a) => {
                        for (var i = 0; i < o; i++)
                          try {
                            n(r[t + i]);
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                        return o && (e.node.timestamp = Date.now()), i;
                      },
                    }),
                    FS.mkdev(o, a, i)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!read_)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = intArrayFromString(read_(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                },
                createLazyFile: (e, r, t, n, o) => {
                  function a() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((a.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var r = e % this.chunkSize,
                          t = (e / this.chunkSize) | 0;
                        return this.getter(t)[r];
                      }
                    }),
                    (a.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (a.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", t, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + t + ". Status: " + e.status
                        );
                      var r,
                        n = Number(e.getResponseHeader("Content-length")),
                        o =
                          (r = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === r,
                        a =
                          (r = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === r,
                        i = 1048576;
                      o || (i = n);
                      var s = this;
                      s.setDataGetter((e) => {
                        var r = e * i,
                          o = (e + 1) * i - 1;
                        if (
                          ((o = Math.min(o, n - 1)),
                          void 0 === s.chunks[e] &&
                            (s.chunks[e] = ((e, r) => {
                              if (e > r)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    r +
                                    ") or no bytes requested!"
                                );
                              if (r > n - 1)
                                throw new Error(
                                  "only " +
                                    n +
                                    " bytes available! programmer error!"
                                );
                              var o = new XMLHttpRequest();
                              if (
                                (o.open("GET", t, !1),
                                n !== i &&
                                  o.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + r
                                  ),
                                (o.responseType = "arraybuffer"),
                                o.overrideMimeType &&
                                  o.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                o.send(null),
                                !(
                                  (o.status >= 200 && o.status < 300) ||
                                  304 === o.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + t + ". Status: " + o.status
                                );
                              return void 0 !== o.response
                                ? new Uint8Array(o.response || [])
                                : intArrayFromString(o.responseText || "", !0);
                            })(r, o)),
                          void 0 === s.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return s.chunks[e];
                      }),
                        (!a && n) ||
                          ((i = n = 1),
                          (n = this.getter(0).length),
                          (i = n),
                          out(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = n),
                        (this._chunkSize = i),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var i = new a();
                    Object.defineProperties(i, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var s = { isDevice: !1, contents: i };
                  } else s = { isDevice: !1, url: t };
                  var c = FS.createFile(e, r, s, n, o);
                  s.contents
                    ? (c.contents = s.contents)
                    : s.url && ((c.contents = null), (c.url = s.url)),
                    Object.defineProperties(c, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var u = {};
                  function l(e, r, t, n, o) {
                    var a = e.node.contents;
                    if (o >= a.length) return 0;
                    var i = Math.min(a.length - o, n);
                    if (a.slice)
                      for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                    else for (s = 0; s < i; s++) r[t + s] = a.get(o + s);
                    return i;
                  }
                  return (
                    Object.keys(c.stream_ops).forEach((e) => {
                      var r = c.stream_ops[e];
                      u[e] = function () {
                        return FS.forceLoadFile(c), r.apply(null, arguments);
                      };
                    }),
                    (u.read = (e, r, t, n, o) => (
                      FS.forceLoadFile(c), l(e, r, t, n, o)
                    )),
                    (u.mmap = (e, r, t, n, o) => {
                      FS.forceLoadFile(c);
                      var a = mmapAlloc(r);
                      if (!a) throw new FS.ErrnoError(48);
                      return l(e, HEAP8, a, r, t), { ptr: a, allocated: !0 };
                    }),
                    (c.stream_ops = u),
                    c
                  );
                },
                createPreloadedFile: (e, r, t, n, o, a, i, s, c, u) => {
                  var l = r ? PATH_FS.resolve(PATH.join2(e, r)) : e,
                    d = getUniqueRunDependency("cp " + l);
                  function f(t) {
                    function f(t) {
                      u && u(),
                        s || FS.createDataFile(e, r, t, n, o, c),
                        a && a(),
                        removeRunDependency(d);
                    }
                    Browser.handledByPreloadPlugin(t, l, f, () => {
                      i && i(), removeRunDependency(d);
                    }) || f(t);
                  }
                  addRunDependency(d),
                    "string" == typeof t ? asyncLoad(t, (e) => f(e), i) : f(t);
                },
                indexedDB: () =>
                  window.indexedDB ||
                  window.mozIndexedDB ||
                  window.webkitIndexedDB ||
                  window.msIndexedDB,
                DB_NAME: () => "EM_FS_" + window.location.pathname,
                DB_VERSION: 20,
                DB_STORE_NAME: "FILE_DATA",
                saveFilesToDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = () => {
                    out("creating db"),
                      o.result.createObjectStore(FS.DB_STORE_NAME);
                  }),
                    (o.onsuccess = () => {
                      var n = o.result.transaction(
                          [FS.DB_STORE_NAME],
                          "readwrite"
                        ),
                        a = n.objectStore(FS.DB_STORE_NAME),
                        i = 0,
                        s = 0,
                        c = e.length;
                      function u() {
                        0 == s ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = a.put(FS.analyzePath(e).object.contents, e);
                        (r.onsuccess = () => {
                          ++i + s == c && u();
                        }),
                          (r.onerror = () => {
                            s++, i + s == c && u();
                          });
                      }),
                        (n.onerror = t);
                    }),
                    (o.onerror = t);
                },
                loadFilesFromDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = t),
                    (o.onsuccess = () => {
                      var n = o.result;
                      try {
                        var a = n.transaction([FS.DB_STORE_NAME], "readonly");
                      } catch (e) {
                        return void t(e);
                      }
                      var i = a.objectStore(FS.DB_STORE_NAME),
                        s = 0,
                        c = 0,
                        u = e.length;
                      function l() {
                        0 == c ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = i.get(e);
                        (r.onsuccess = () => {
                          FS.analyzePath(e).exists && FS.unlink(e),
                            FS.createDataFile(
                              PATH.dirname(e),
                              PATH.basename(e),
                              r.result,
                              !0,
                              !0,
                              !0
                            ),
                            ++s + c == u && l();
                        }),
                          (r.onerror = () => {
                            c++, s + c == u && l();
                          });
                      }),
                        (a.onerror = t);
                    }),
                    (o.onerror = t);
                },
              },
              SYSCALLS = {
                DEFAULT_POLLMASK: 5,
                calculateAt: function (e, r, t) {
                  if (PATH.isAbs(r)) return r;
                  var n;
                  if (
                    ((n =
                      -100 === e ? FS.cwd() : SYSCALLS.getStreamFromFD(e).path),
                    0 == r.length)
                  ) {
                    if (!t) throw new FS.ErrnoError(44);
                    return n;
                  }
                  return PATH.join2(n, r);
                },
                doStat: function (e, r, t) {
                  try {
                    var n = e(r);
                  } catch (e) {
                    if (
                      e &&
                      e.node &&
                      PATH.normalize(r) !== PATH.normalize(FS.getPath(e.node))
                    )
                      return -54;
                    throw e;
                  }
                  return (
                    (HEAP32[t >> 2] = n.dev),
                    (HEAP32[(t + 8) >> 2] = n.ino),
                    (HEAP32[(t + 12) >> 2] = n.mode),
                    (HEAPU32[(t + 16) >> 2] = n.nlink),
                    (HEAP32[(t + 20) >> 2] = n.uid),
                    (HEAP32[(t + 24) >> 2] = n.gid),
                    (HEAP32[(t + 28) >> 2] = n.rdev),
                    (tempI64 = [
                      n.size >>> 0,
                      ((tempDouble = n.size),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 40) >> 2] = tempI64[0]),
                    (HEAP32[(t + 44) >> 2] = tempI64[1]),
                    (HEAP32[(t + 48) >> 2] = 4096),
                    (HEAP32[(t + 52) >> 2] = n.blocks),
                    (tempI64 = [
                      Math.floor(n.atime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.atime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 56) >> 2] = tempI64[0]),
                    (HEAP32[(t + 60) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 64) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.mtime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.mtime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 72) >> 2] = tempI64[0]),
                    (HEAP32[(t + 76) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 80) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.ctime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.ctime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 88) >> 2] = tempI64[0]),
                    (HEAP32[(t + 92) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 96) >> 2] = 0),
                    (tempI64 = [
                      n.ino >>> 0,
                      ((tempDouble = n.ino),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 104) >> 2] = tempI64[0]),
                    (HEAP32[(t + 108) >> 2] = tempI64[1]),
                    0
                  );
                },
                doMsync: function (e, r, t, n, o) {
                  if (!FS.isFile(r.node.mode)) throw new FS.ErrnoError(43);
                  if (2 & n) return 0;
                  var a = HEAPU8.slice(e, e + t);
                  FS.msync(r, a, o, t, n);
                },
                varargs: void 0,
                get: function () {
                  return (
                    (SYSCALLS.varargs += 4), HEAP32[(SYSCALLS.varargs - 4) >> 2]
                  );
                },
                getStr: function (e) {
                  return UTF8ToString(e);
                },
                getStreamFromFD: function (e) {
                  var r = FS.getStream(e);
                  if (!r) throw new FS.ErrnoError(8);
                  return r;
                },
              };
            function ___syscall_chdir(e) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.chdir(e), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_chmod(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.chmod(e, r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_dup3(e, r, t) {
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                if (n.fd === r) return -28;
                var o = FS.getStream(r);
                return o && FS.close(o), FS.createStream(n, r, r + 1).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_faccessat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  -8 & t)
                )
                  return -28;
                var o = FS.lookupPath(r, { follow: !0 }).node;
                if (!o) return -44;
                var a = "";
                return (
                  4 & t && (a += "r"),
                  2 & t && (a += "w"),
                  1 & t && (a += "x"),
                  a && FS.nodePermissions(o, a) ? -2 : 0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fchmod(e, r) {
              try {
                return FS.fchmod(e, r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fchown32(e, r, t) {
              try {
                return FS.fchown(e, r, t), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function setErrNo(e) {
              return (HEAP32[___errno_location() >> 2] = e), e;
            }
            function ___syscall_fcntl64(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 0:
                    return (o = SYSCALLS.get()) < 0
                      ? -28
                      : FS.createStream(n, o).fd;
                  case 1:
                  case 2:
                  case 6:
                  case 7:
                    return 0;
                  case 3:
                    return n.flags;
                  case 4:
                    var o = SYSCALLS.get();
                    return (n.flags |= o), 0;
                  case 5:
                    return (o = SYSCALLS.get()), (HEAP16[(o + 0) >> 1] = 2), 0;
                  case 16:
                  case 8:
                  default:
                    return -28;
                  case 9:
                    return setErrNo(28), -1;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_fstat64(e, r) {
              try {
                var t = SYSCALLS.getStreamFromFD(e);
                return SYSCALLS.doStat(FS.stat, t.path, r);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function convertI32PairToI53Checked(e, r) {
              return (r + 2097152) >>> 0 < 4194305 - !!e
                ? (e >>> 0) + 4294967296 * r
                : NaN;
            }
            function ___syscall_ftruncate64(e, r, t) {
              try {
                var n = convertI32PairToI53Checked(r, t);
                return isNaN(n) ? -61 : (FS.ftruncate(e, n), 0);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getcwd(e, r) {
              try {
                if (0 === r) return -28;
                var t = FS.cwd(),
                  n = lengthBytesUTF8(t) + 1;
                return r < n ? -68 : (stringToUTF8(t, e, r), n);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getdents64(e, r, t) {
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                n.getdents || (n.getdents = FS.readdir(n.path));
                for (
                  var o = 280,
                    a = 0,
                    i = FS.llseek(n, 0, 1),
                    s = Math.floor(i / o);
                  s < n.getdents.length && a + o <= t;

                ) {
                  var c,
                    u,
                    l = n.getdents[s];
                  if ("." === l) (c = n.node.id), (u = 4);
                  else if (".." === l)
                    (c = FS.lookupPath(n.path, { parent: !0 }).node.id),
                      (u = 4);
                  else {
                    var d = FS.lookupNode(n.node, l);
                    (c = d.id),
                      (u = FS.isChrdev(d.mode)
                        ? 2
                        : FS.isDir(d.mode)
                        ? 4
                        : FS.isLink(d.mode)
                        ? 10
                        : 8);
                  }
                  (tempI64 = [
                    c >>> 0,
                    ((tempDouble = c),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                    (HEAP32[(r + a) >> 2] = tempI64[0]),
                    (HEAP32[(r + a + 4) >> 2] = tempI64[1]),
                    (tempI64 = [
                      ((s + 1) * o) >>> 0,
                      ((tempDouble = (s + 1) * o),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(r + a + 8) >> 2] = tempI64[0]),
                    (HEAP32[(r + a + 12) >> 2] = tempI64[1]),
                    (HEAP16[(r + a + 16) >> 1] = 280),
                    (HEAP8[(r + a + 18) >> 0] = u),
                    stringToUTF8(l, r + a + 19, 256),
                    (a += o),
                    (s += 1);
                }
                return FS.llseek(n, s * o, 0), a;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_ioctl(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 21509:
                  case 21505:
                  case 21510:
                  case 21511:
                  case 21512:
                  case 21506:
                  case 21507:
                  case 21508:
                  case 21523:
                  case 21524:
                    return n.tty ? 0 : -59;
                  case 21519:
                    if (!n.tty) return -59;
                    var o = SYSCALLS.get();
                    return (HEAP32[o >> 2] = 0), 0;
                  case 21520:
                    return n.tty ? -28 : -59;
                  case 21531:
                    return (o = SYSCALLS.get()), FS.ioctl(n, r, o);
                  default:
                    return -28;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_lstat64(e, r) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.lstat, e, r)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_mkdirat(e, r, t) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  "/" === (r = PATH.normalize(r))[r.length - 1] &&
                    (r = r.substr(0, r.length - 1)),
                  FS.mkdir(r, t, 0),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_newfstatat(e, r, t, n) {
              try {
                r = SYSCALLS.getStr(r);
                var o = 256 & n,
                  a = 4096 & n;
                return (
                  (n &= -4353),
                  (r = SYSCALLS.calculateAt(e, r, a)),
                  SYSCALLS.doStat(o ? FS.lstat : FS.stat, r, t)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_openat(e, r, t, n) {
              SYSCALLS.varargs = n;
              try {
                (r = SYSCALLS.getStr(r)), (r = SYSCALLS.calculateAt(e, r));
                var o = n ? SYSCALLS.get() : 0;
                return FS.open(r, t, o).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_readlinkat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  n <= 0)
                )
                  return -28;
                var o = FS.readlink(r),
                  a = Math.min(n, lengthBytesUTF8(o)),
                  i = HEAP8[t + a];
                return stringToUTF8(o, t, n + 1), (HEAP8[t + a] = i), a;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_renameat(e, r, t, n) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (n = SYSCALLS.getStr(n)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  (n = SYSCALLS.calculateAt(t, n)),
                  FS.rename(r, n),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_rmdir(e) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.rmdir(e), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_stat64(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.stat, e, r);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_statfs64(e, r, t) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)),
                  (HEAP32[(t + 4) >> 2] = 4096),
                  (HEAP32[(t + 40) >> 2] = 4096),
                  (HEAP32[(t + 8) >> 2] = 1e6),
                  (HEAP32[(t + 12) >> 2] = 5e5),
                  (HEAP32[(t + 16) >> 2] = 5e5),
                  (HEAP32[(t + 20) >> 2] = FS.nextInode),
                  (HEAP32[(t + 24) >> 2] = 1e6),
                  (HEAP32[(t + 28) >> 2] = 42),
                  (HEAP32[(t + 44) >> 2] = 2),
                  (HEAP32[(t + 36) >> 2] = 255),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_symlink(e, r) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)),
                  (r = SYSCALLS.getStr(r)),
                  FS.symlink(e, r),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_unlinkat(e, r, t) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  0 === t
                    ? FS.unlink(r)
                    : 512 === t
                    ? FS.rmdir(r)
                    : abort("Invalid flags passed to unlinkat"),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function readI53FromI64(e) {
              return HEAPU32[e >> 2] + 4294967296 * HEAP32[(e + 4) >> 2];
            }
            function ___syscall_utimensat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r, !0)),
                  t)
                ) {
                  var o = readI53FromI64(t),
                    a = HEAP32[(t + 8) >> 2];
                  (i = 1e3 * o + a / 1e6),
                    (s =
                      1e3 * (o = readI53FromI64((t += 16))) +
                      (a = HEAP32[(t + 8) >> 2]) / 1e6);
                } else
                  var i = Date.now(),
                    s = i;
                return FS.utime(r, i, s), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function __dlinit(e) {}
            var dlopenMissingError =
              "To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking";
            function __dlopen_js(e, r) {
              abort(dlopenMissingError);
            }
            function __dlsym_js(e, r) {
              abort(dlopenMissingError);
            }
            var nowIsMonotonic = !0,
              _emscripten_get_now;
            function __emscripten_get_now_is_monotonic() {
              return nowIsMonotonic;
            }
            function __emscripten_throw_longjmp() {
              throw 1 / 0;
            }
            function __gmtime_js(e, r) {
              var t = new Date(1e3 * readI53FromI64(e));
              (HEAP32[r >> 2] = t.getUTCSeconds()),
                (HEAP32[(r + 4) >> 2] = t.getUTCMinutes()),
                (HEAP32[(r + 8) >> 2] = t.getUTCHours()),
                (HEAP32[(r + 12) >> 2] = t.getUTCDate()),
                (HEAP32[(r + 16) >> 2] = t.getUTCMonth()),
                (HEAP32[(r + 20) >> 2] = t.getUTCFullYear() - 1900),
                (HEAP32[(r + 24) >> 2] = t.getUTCDay());
              var n = Date.UTC(t.getUTCFullYear(), 0, 1, 0, 0, 0, 0),
                o = ((t.getTime() - n) / 864e5) | 0;
              HEAP32[(r + 28) >> 2] = o;
            }
            function __localtime_js(e, r) {
              var t = new Date(1e3 * readI53FromI64(e));
              (HEAP32[r >> 2] = t.getSeconds()),
                (HEAP32[(r + 4) >> 2] = t.getMinutes()),
                (HEAP32[(r + 8) >> 2] = t.getHours()),
                (HEAP32[(r + 12) >> 2] = t.getDate()),
                (HEAP32[(r + 16) >> 2] = t.getMonth()),
                (HEAP32[(r + 20) >> 2] = t.getFullYear() - 1900),
                (HEAP32[(r + 24) >> 2] = t.getDay());
              var n = new Date(t.getFullYear(), 0, 1),
                o = ((t.getTime() - n.getTime()) / 864e5) | 0;
              (HEAP32[(r + 28) >> 2] = o),
                (HEAP32[(r + 36) >> 2] = -60 * t.getTimezoneOffset());
              var a = new Date(t.getFullYear(), 6, 1).getTimezoneOffset(),
                i = n.getTimezoneOffset(),
                s = 0 | (a != i && t.getTimezoneOffset() == Math.min(i, a));
              HEAP32[(r + 32) >> 2] = s;
            }
            function __mmap_js(e, r, t, n, o, a, i) {
              try {
                var s = SYSCALLS.getStreamFromFD(n),
                  c = FS.mmap(s, e, o, r, t),
                  u = c.ptr;
                return (HEAP32[a >> 2] = c.allocated), (HEAPU32[i >> 2] = u), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function __munmap_js(e, r, t, n, o, a) {
              try {
                var i = SYSCALLS.getStreamFromFD(o);
                2 & t && SYSCALLS.doMsync(e, i, r, n, a), FS.munmap(i);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function allocateUTF8(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = _malloc(r);
              return t && stringToUTF8Array(e, HEAP8, t, r), t;
            }
            function _tzset_impl(e, r, t) {
              var n = new Date().getFullYear(),
                o = new Date(n, 0, 1),
                a = new Date(n, 6, 1),
                i = o.getTimezoneOffset(),
                s = a.getTimezoneOffset(),
                c = Math.max(i, s);
              function u(e) {
                var r = e.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                return r ? r[1] : "GMT";
              }
              (HEAP32[e >> 2] = 60 * c), (HEAP32[r >> 2] = Number(i != s));
              var l = u(o),
                d = u(a),
                f = allocateUTF8(l),
                _ = allocateUTF8(d);
              s < i
                ? ((HEAPU32[t >> 2] = f), (HEAPU32[(t + 4) >> 2] = _))
                : ((HEAPU32[t >> 2] = _), (HEAPU32[(t + 4) >> 2] = f));
            }
            function __tzset_js(e, r, t) {
              __tzset_js.called ||
                ((__tzset_js.called = !0), _tzset_impl(e, r, t));
            }
            function _abort() {
              abort("");
            }
            function handleException(e) {
              if (e instanceof ExitStatus || "unwind" == e) return EXITSTATUS;
              quit_(1, e);
            }
            function _emscripten_date_now() {
              return Date.now();
            }
            function getHeapMax() {
              return 2147483648;
            }
            function _emscripten_get_heap_max() {
              return getHeapMax();
            }
            function _emscripten_memcpy_big(e, r, t) {
              HEAPU8.copyWithin(e, r, r + t);
            }
            function emscripten_realloc_buffer(e) {
              try {
                return (
                  wasmMemory.grow((e - buffer.byteLength + 65535) >>> 16),
                  updateGlobalBufferAndViews(wasmMemory.buffer),
                  1
                );
              } catch (e) {}
            }
            function _emscripten_resize_heap(e) {
              var r = HEAPU8.length;
              e >>>= 0;
              var t,
                n = getHeapMax();
              if (e > n) return !1;
              for (var o = 1; o <= 4; o *= 2) {
                var a = r * (1 + 0.2 / o);
                if (
                  ((a = Math.min(a, e + 100663296)),
                  emscripten_realloc_buffer(
                    Math.min(
                      n,
                      (t = Math.max(e, a)) + ((65536 - (t % 65536)) % 65536)
                    )
                  ))
                )
                  return !0;
              }
              return !1;
            }
            _emscripten_get_now = ENVIRONMENT_IS_NODE
              ? () => {
                  var e = process.hrtime();
                  return 1e3 * e[0] + e[1] / 1e6;
                }
              : () => performance.now();
            var ENV = {};
            function getExecutableName() {
              return thisProgram || "./this.program";
            }
            function getEnvStrings() {
              if (!getEnvStrings.strings) {
                var e = {
                  USER: "web_user",
                  LOGNAME: "web_user",
                  PATH: "/",
                  PWD: "/",
                  HOME: "/home/web_user",
                  LANG:
                    (
                      ("object" == typeof navigator &&
                        navigator.languages &&
                        navigator.languages[0]) ||
                      "C"
                    ).replace("-", "_") + ".UTF-8",
                  _: getExecutableName(),
                };
                for (var r in ENV)
                  void 0 === ENV[r] ? delete e[r] : (e[r] = ENV[r]);
                var t = [];
                for (var r in e) t.push(r + "=" + e[r]);
                getEnvStrings.strings = t;
              }
              return getEnvStrings.strings;
            }
            function writeAsciiToMemory(e, r, t) {
              for (var n = 0; n < e.length; ++n)
                HEAP8[r++ >> 0] = e.charCodeAt(n);
              t || (HEAP8[r >> 0] = 0);
            }
            function _environ_get(e, r) {
              var t = 0;
              return (
                getEnvStrings().forEach(function (n, o) {
                  var a = r + t;
                  (HEAPU32[(e + 4 * o) >> 2] = a),
                    writeAsciiToMemory(n, a),
                    (t += n.length + 1);
                }),
                0
              );
            }
            function _environ_sizes_get(e, r) {
              var t = getEnvStrings();
              HEAPU32[e >> 2] = t.length;
              var n = 0;
              return (
                t.forEach(function (e) {
                  n += e.length + 1;
                }),
                (HEAPU32[r >> 2] = n),
                0
              );
            }
            function _proc_exit(e) {
              (EXITSTATUS = e),
                keepRuntimeAlive() ||
                  (Module.onExit && Module.onExit(e), (ABORT = !0)),
                quit_(e, new ExitStatus(e));
            }
            function exitJS(e, r) {
              (EXITSTATUS = e), _proc_exit(e);
            }
            var _exit = exitJS;
            function _fd_close(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return FS.close(r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_fdstat_get(e, r) {
              try {
                var t = SYSCALLS.getStreamFromFD(e),
                  n = t.tty
                    ? 2
                    : FS.isDir(t.mode)
                    ? 3
                    : FS.isLink(t.mode)
                    ? 7
                    : 4;
                return (HEAP8[r >> 0] = n), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doReadv(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.read(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                if (((o += c), c < s)) break;
              }
              return o;
            }
            function _fd_pread(e, r, t, n, o, a) {
              try {
                var i = convertI32PairToI53Checked(n, o);
                if (isNaN(i)) return 61;
                var s = doReadv(SYSCALLS.getStreamFromFD(e), r, t, i);
                return (HEAPU32[a >> 2] = s), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_read(e, r, t, n) {
              try {
                var o = doReadv(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _fd_seek(e, r, t, n, o) {
              try {
                var a = convertI32PairToI53Checked(r, t);
                if (isNaN(a)) return 61;
                var i = SYSCALLS.getStreamFromFD(e);
                return (
                  FS.llseek(i, a, n),
                  (tempI64 = [
                    i.position >>> 0,
                    ((tempDouble = i.position),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                  (HEAP32[o >> 2] = tempI64[0]),
                  (HEAP32[(o + 4) >> 2] = tempI64[1]),
                  i.getdents && 0 === a && 0 === n && (i.getdents = null),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doWritev(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.write(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                o += c;
              }
              return o;
            }
            function _fd_write(e, r, t, n) {
              try {
                var o = doWritev(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _getentropy(e, r) {
              _getentropy.randomDevice ||
                (_getentropy.randomDevice = getRandomDevice());
              for (var t = 0; t < r; t++)
                HEAP8[(e + t) >> 0] = _getentropy.randomDevice();
              return 0;
            }
            function __isLeapYear(e) {
              return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
            }
            function __arraySum(e, r) {
              for (var t = 0, n = 0; n <= r; t += e[n++]);
              return t;
            }
            var __MONTH_DAYS_LEAP = [
                31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ],
              __MONTH_DAYS_REGULAR = [
                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ];
            function __addDays(e, r) {
              for (var t = new Date(e.getTime()); r > 0; ) {
                var n = __isLeapYear(t.getFullYear()),
                  o = t.getMonth(),
                  a = (n ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[o];
                if (!(r > a - t.getDate()))
                  return t.setDate(t.getDate() + r), t;
                (r -= a - t.getDate() + 1),
                  t.setDate(1),
                  o < 11
                    ? t.setMonth(o + 1)
                    : (t.setMonth(0), t.setFullYear(t.getFullYear() + 1));
              }
              return t;
            }
            function writeArrayToMemory(e, r) {
              HEAP8.set(e, r);
            }
            function _strftime(e, r, t, n) {
              var o = HEAP32[(n + 40) >> 2],
                a = {
                  tm_sec: HEAP32[n >> 2],
                  tm_min: HEAP32[(n + 4) >> 2],
                  tm_hour: HEAP32[(n + 8) >> 2],
                  tm_mday: HEAP32[(n + 12) >> 2],
                  tm_mon: HEAP32[(n + 16) >> 2],
                  tm_year: HEAP32[(n + 20) >> 2],
                  tm_wday: HEAP32[(n + 24) >> 2],
                  tm_yday: HEAP32[(n + 28) >> 2],
                  tm_isdst: HEAP32[(n + 32) >> 2],
                  tm_gmtoff: HEAP32[(n + 36) >> 2],
                  tm_zone: o ? UTF8ToString(o) : "",
                },
                i = UTF8ToString(t),
                s = {
                  "%c": "%a %b %d %H:%M:%S %Y",
                  "%D": "%m/%d/%y",
                  "%F": "%Y-%m-%d",
                  "%h": "%b",
                  "%r": "%I:%M:%S %p",
                  "%R": "%H:%M",
                  "%T": "%H:%M:%S",
                  "%x": "%m/%d/%y",
                  "%X": "%H:%M:%S",
                  "%Ec": "%c",
                  "%EC": "%C",
                  "%Ex": "%m/%d/%y",
                  "%EX": "%H:%M:%S",
                  "%Ey": "%y",
                  "%EY": "%Y",
                  "%Od": "%d",
                  "%Oe": "%e",
                  "%OH": "%H",
                  "%OI": "%I",
                  "%Om": "%m",
                  "%OM": "%M",
                  "%OS": "%S",
                  "%Ou": "%u",
                  "%OU": "%U",
                  "%OV": "%V",
                  "%Ow": "%w",
                  "%OW": "%W",
                  "%Oy": "%y",
                };
              for (var c in s) i = i.replace(new RegExp(c, "g"), s[c]);
              var u = [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ],
                l = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
              function d(e, r, t) {
                for (
                  var n = "number" == typeof e ? e.toString() : e || "";
                  n.length < r;

                )
                  n = t[0] + n;
                return n;
              }
              function f(e, r) {
                return d(e, r, "0");
              }
              function _(e, r) {
                function t(e) {
                  return e < 0 ? -1 : e > 0 ? 1 : 0;
                }
                var n;
                return (
                  0 === (n = t(e.getFullYear() - r.getFullYear())) &&
                    0 === (n = t(e.getMonth() - r.getMonth())) &&
                    (n = t(e.getDate() - r.getDate())),
                  n
                );
              }
              function m(e) {
                switch (e.getDay()) {
                  case 0:
                    return new Date(e.getFullYear() - 1, 11, 29);
                  case 1:
                    return e;
                  case 2:
                    return new Date(e.getFullYear(), 0, 3);
                  case 3:
                    return new Date(e.getFullYear(), 0, 2);
                  case 4:
                    return new Date(e.getFullYear(), 0, 1);
                  case 5:
                    return new Date(e.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(e.getFullYear() - 1, 11, 30);
                }
              }
              function p(e) {
                var r = __addDays(new Date(e.tm_year + 1900, 0, 1), e.tm_yday),
                  t = new Date(r.getFullYear(), 0, 4),
                  n = new Date(r.getFullYear() + 1, 0, 4),
                  o = m(t),
                  a = m(n);
                return _(o, r) <= 0
                  ? _(a, r) <= 0
                    ? r.getFullYear() + 1
                    : r.getFullYear()
                  : r.getFullYear() - 1;
              }
              var S = {
                "%a": function (e) {
                  return u[e.tm_wday].substring(0, 3);
                },
                "%A": function (e) {
                  return u[e.tm_wday];
                },
                "%b": function (e) {
                  return l[e.tm_mon].substring(0, 3);
                },
                "%B": function (e) {
                  return l[e.tm_mon];
                },
                "%C": function (e) {
                  return f(((e.tm_year + 1900) / 100) | 0, 2);
                },
                "%d": function (e) {
                  return f(e.tm_mday, 2);
                },
                "%e": function (e) {
                  return d(e.tm_mday, 2, " ");
                },
                "%g": function (e) {
                  return p(e).toString().substring(2);
                },
                "%G": function (e) {
                  return p(e);
                },
                "%H": function (e) {
                  return f(e.tm_hour, 2);
                },
                "%I": function (e) {
                  var r = e.tm_hour;
                  return 0 == r ? (r = 12) : r > 12 && (r -= 12), f(r, 2);
                },
                "%j": function (e) {
                  return f(
                    e.tm_mday +
                      __arraySum(
                        __isLeapYear(e.tm_year + 1900)
                          ? __MONTH_DAYS_LEAP
                          : __MONTH_DAYS_REGULAR,
                        e.tm_mon - 1
                      ),
                    3
                  );
                },
                "%m": function (e) {
                  return f(e.tm_mon + 1, 2);
                },
                "%M": function (e) {
                  return f(e.tm_min, 2);
                },
                "%n": function () {
                  return "\n";
                },
                "%p": function (e) {
                  return e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM";
                },
                "%S": function (e) {
                  return f(e.tm_sec, 2);
                },
                "%t": function () {
                  return "\t";
                },
                "%u": function (e) {
                  return e.tm_wday || 7;
                },
                "%U": function (e) {
                  var r = e.tm_yday + 7 - e.tm_wday;
                  return f(Math.floor(r / 7), 2);
                },
                "%V": function (e) {
                  var r = Math.floor(
                    (e.tm_yday + 7 - ((e.tm_wday + 6) % 7)) / 7
                  );
                  if (((e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && r++, r)) {
                    if (53 == r) {
                      var t = (e.tm_wday + 371 - e.tm_yday) % 7;
                      4 == t || (3 == t && __isLeapYear(e.tm_year)) || (r = 1);
                    }
                  } else {
                    r = 52;
                    var n = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                    (4 == n ||
                      (5 == n && __isLeapYear((e.tm_year % 400) - 1))) &&
                      r++;
                  }
                  return f(r, 2);
                },
                "%w": function (e) {
                  return e.tm_wday;
                },
                "%W": function (e) {
                  var r = e.tm_yday + 7 - ((e.tm_wday + 6) % 7);
                  return f(Math.floor(r / 7), 2);
                },
                "%y": function (e) {
                  return (e.tm_year + 1900).toString().substring(2);
                },
                "%Y": function (e) {
                  return e.tm_year + 1900;
                },
                "%z": function (e) {
                  var r = e.tm_gmtoff,
                    t = r >= 0;
                  return (
                    (r = ((r = Math.abs(r) / 60) / 60) * 100 + (r % 60)),
                    (t ? "+" : "-") + String("0000" + r).slice(-4)
                  );
                },
                "%Z": function (e) {
                  return e.tm_zone;
                },
                "%%": function () {
                  return "%";
                },
              };
              for (var c in ((i = i.replace(/%%/g, "\0\0")), S))
                i.includes(c) && (i = i.replace(new RegExp(c, "g"), S[c](a)));
              var E = intArrayFromString((i = i.replace(/\0\0/g, "%")), !1);
              return E.length > r
                ? 0
                : (writeArrayToMemory(E, e), E.length - 1);
            }
            function _strftime_l(e, r, t, n, o) {
              return _strftime(e, r, t, n);
            }
            function allocateUTF8OnStack(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = stackAlloc(r);
              return stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSROOT = {
                staticInit: () => {
                  FS.root = null;
                  let opts = (Module.ROOT && Module.ROOT.opts) || {},
                    type = (Module.ROOT && Module.ROOT.type) || "MEMFS";
                  "string" == typeof type
                    ? (type = FS.filesystems[type] || eval(type))
                    : "function" == typeof type && (type = type(Module)),
                    FS.mount(type, opts, "/"),
                    FSROOT.createDefaultMountPoints();
                  const restore_mkdir = FSROOT.safeMkdir();
                  FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    restore_mkdir();
                },
                createDefaultMountPoints: () => {
                  FS.mkdirTree("/dev"),
                    FS.mount(MEMFS, {}, "/dev"),
                    FS.mkdirTree("/proc/self"),
                    FS.mount(MEMFS, {}, "/proc/self");
                },
                safeMkdir: () => {
                  const e = FS.mkdir;
                  return (
                    (FS.mkdir = (r, t) => {
                      try {
                        return e(r, t);
                      } catch {
                        return FS.lookupPath(r, { follow: !0 }).node;
                      }
                    }),
                    () => {
                      FS.mkdir = e;
                    }
                  );
                },
              },
              FSNode = function (e, r, t, n) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = FS.nextInode++),
                  (this.name = r),
                  (this.mode = t),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = n);
              },
              readMode = 365,
              writeMode = 146;
            Object.defineProperties(FSNode.prototype, {
              read: {
                get: function () {
                  return (this.mode & readMode) === readMode;
                },
                set: function (e) {
                  e ? (this.mode |= readMode) : (this.mode &= ~readMode);
                },
              },
              write: {
                get: function () {
                  return (this.mode & writeMode) === writeMode;
                },
                set: function (e) {
                  e ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
                },
              },
              isFolder: {
                get: function () {
                  return FS.isDir(this.mode);
                },
              },
              isDevice: {
                get: function () {
                  return FS.isChrdev(this.mode);
                },
              },
            }),
              (FS.FSNode = FSNode),
              FS.staticInit(),
              (ERRNO_CODES = {
                EPERM: 63,
                ENOENT: 44,
                ESRCH: 71,
                EINTR: 27,
                EIO: 29,
                ENXIO: 60,
                E2BIG: 1,
                ENOEXEC: 45,
                EBADF: 8,
                ECHILD: 12,
                EAGAIN: 6,
                EWOULDBLOCK: 6,
                ENOMEM: 48,
                EACCES: 2,
                EFAULT: 21,
                ENOTBLK: 105,
                EBUSY: 10,
                EEXIST: 20,
                EXDEV: 75,
                ENODEV: 43,
                ENOTDIR: 54,
                EISDIR: 31,
                EINVAL: 28,
                ENFILE: 41,
                EMFILE: 33,
                ENOTTY: 59,
                ETXTBSY: 74,
                EFBIG: 22,
                ENOSPC: 51,
                ESPIPE: 70,
                EROFS: 69,
                EMLINK: 34,
                EPIPE: 64,
                EDOM: 18,
                ERANGE: 68,
                ENOMSG: 49,
                EIDRM: 24,
                ECHRNG: 106,
                EL2NSYNC: 156,
                EL3HLT: 107,
                EL3RST: 108,
                ELNRNG: 109,
                EUNATCH: 110,
                ENOCSI: 111,
                EL2HLT: 112,
                EDEADLK: 16,
                ENOLCK: 46,
                EBADE: 113,
                EBADR: 114,
                EXFULL: 115,
                ENOANO: 104,
                EBADRQC: 103,
                EBADSLT: 102,
                EDEADLOCK: 16,
                EBFONT: 101,
                ENOSTR: 100,
                ENODATA: 116,
                ETIME: 117,
                ENOSR: 118,
                ENONET: 119,
                ENOPKG: 120,
                EREMOTE: 121,
                ENOLINK: 47,
                EADV: 122,
                ESRMNT: 123,
                ECOMM: 124,
                EPROTO: 65,
                EMULTIHOP: 36,
                EDOTDOT: 125,
                EBADMSG: 9,
                ENOTUNIQ: 126,
                EBADFD: 127,
                EREMCHG: 128,
                ELIBACC: 129,
                ELIBBAD: 130,
                ELIBSCN: 131,
                ELIBMAX: 132,
                ELIBEXEC: 133,
                ENOSYS: 52,
                ENOTEMPTY: 55,
                ENAMETOOLONG: 37,
                ELOOP: 32,
                EOPNOTSUPP: 138,
                EPFNOSUPPORT: 139,
                ECONNRESET: 15,
                ENOBUFS: 42,
                EAFNOSUPPORT: 5,
                EPROTOTYPE: 67,
                ENOTSOCK: 57,
                ENOPROTOOPT: 50,
                ESHUTDOWN: 140,
                ECONNREFUSED: 14,
                EADDRINUSE: 3,
                ECONNABORTED: 13,
                ENETUNREACH: 40,
                ENETDOWN: 38,
                ETIMEDOUT: 73,
                EHOSTDOWN: 142,
                EHOSTUNREACH: 23,
                EINPROGRESS: 26,
                EALREADY: 7,
                EDESTADDRREQ: 17,
                EMSGSIZE: 35,
                EPROTONOSUPPORT: 66,
                ESOCKTNOSUPPORT: 137,
                EADDRNOTAVAIL: 4,
                ENETRESET: 39,
                EISCONN: 30,
                ENOTCONN: 53,
                ETOOMANYREFS: 141,
                EUSERS: 136,
                EDQUOT: 19,
                ESTALE: 72,
                ENOTSUP: 138,
                ENOMEDIUM: 148,
                EILSEQ: 25,
                EOVERFLOW: 61,
                ECANCELED: 11,
                ENOTRECOVERABLE: 56,
                EOWNERDEAD: 62,
                ESTRPIPE: 135,
              }),
              FSROOT.staticInit();
            var asmLibraryArg = {
                J: ___call_sighandler,
                ca: ___syscall_chdir,
                ba: ___syscall_chmod,
                aa: ___syscall_dup3,
                da: ___syscall_faccessat,
                T: ___syscall_fchmod,
                S: ___syscall_fchown32,
                c: ___syscall_fcntl64,
                R: ___syscall_fstat64,
                u: ___syscall_ftruncate64,
                N: ___syscall_getcwd,
                I: ___syscall_getdents64,
                x: ___syscall_ioctl,
                O: ___syscall_lstat64,
                M: ___syscall_mkdirat,
                P: ___syscall_newfstatat,
                k: ___syscall_openat,
                H: ___syscall_readlinkat,
                F: ___syscall_renameat,
                G: ___syscall_rmdir,
                Q: ___syscall_stat64,
                E: ___syscall_statfs64,
                D: ___syscall_symlink,
                h: ___syscall_unlinkat,
                B: ___syscall_utimensat,
                Z: __dlinit,
                $: __dlopen_js,
                _: __dlsym_js,
                U: __emscripten_get_now_is_monotonic,
                y: __emscripten_throw_longjmp,
                V: __gmtime_js,
                W: __localtime_js,
                K: __mmap_js,
                L: __munmap_js,
                X: __tzset_js,
                a: _abort,
                m: _emscripten_date_now,
                C: _emscripten_get_heap_max,
                g: _emscripten_get_now,
                Y: _emscripten_memcpy_big,
                z: _emscripten_resize_heap,
                o: _environ_get,
                p: _environ_sizes_get,
                b: _exit,
                d: _fd_close,
                l: _fd_fdstat_get,
                s: _fd_pread,
                j: _fd_read,
                t: _fd_seek,
                f: _fd_write,
                v: _getentropy,
                e: invoke_ii,
                i: invoke_iiii,
                r: invoke_vi,
                A: invoke_vii,
                q: _proc_exit,
                n: _strftime,
                w: _strftime_l,
              },
              asm = createWasm(),
              ___wasm_call_ctors = (Module.___wasm_call_ctors = function () {
                return (___wasm_call_ctors = Module.___wasm_call_ctors =
                  Module.asm.fa).apply(null, arguments);
              }),
              _main = (Module._main = function () {
                return (_main = Module._main = Module.asm.ga).apply(
                  null,
                  arguments
                );
              }),
              _free = (Module._free = function () {
                return (_free = Module._free = Module.asm.ha).apply(
                  null,
                  arguments
                );
              }),
              ___errno_location = (Module.___errno_location = function () {
                return (___errno_location = Module.___errno_location =
                  Module.asm.ja).apply(null, arguments);
              }),
              _malloc = (Module._malloc = function () {
                return (_malloc = Module._malloc = Module.asm.ka).apply(
                  null,
                  arguments
                );
              }),
              _emscripten_builtin_memalign =
                (Module._emscripten_builtin_memalign = function () {
                  return (_emscripten_builtin_memalign =
                    Module._emscripten_builtin_memalign =
                      Module.asm.la).apply(null, arguments);
                }),
              _setThrew = (Module._setThrew = function () {
                return (_setThrew = Module._setThrew = Module.asm.ma).apply(
                  null,
                  arguments
                );
              }),
              stackSave = (Module.stackSave = function () {
                return (stackSave = Module.stackSave = Module.asm.na).apply(
                  null,
                  arguments
                );
              }),
              stackRestore = (Module.stackRestore = function () {
                return (stackRestore = Module.stackRestore =
                  Module.asm.oa).apply(null, arguments);
              }),
              stackAlloc = (Module.stackAlloc = function () {
                return (stackAlloc = Module.stackAlloc = Module.asm.pa).apply(
                  null,
                  arguments
                );
              }),
              calledRun;
            function invoke_ii(e, r) {
              var t = stackSave();
              try {
                return getWasmTableEntry(e)(r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiii(e, r, t, n) {
              var o = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vii(e, r, t) {
              var n = stackSave();
              try {
                getWasmTableEntry(e)(r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vi(e, r) {
              var t = stackSave();
              try {
                getWasmTableEntry(e)(r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function callMain(e) {
              var r = Module._main;
              (e = e || []).unshift(thisProgram);
              var t = e.length,
                n = stackAlloc(4 * (t + 1)),
                o = n >> 2;
              e.forEach((e) => {
                HEAP32[o++] = allocateUTF8OnStack(e);
              }),
                (HEAP32[o] = 0);
              try {
                var a = r(t, n);
                return exitJS(a, !0), a;
              } catch (e) {
                return handleException(e);
              }
            }
            function run(e) {
              function r() {
                calledRun ||
                  ((calledRun = !0),
                  (Module.calledRun = !0),
                  ABORT ||
                    (initRuntime(),
                    preMain(),
                    readyPromiseResolve(Module),
                    Module.onRuntimeInitialized &&
                      Module.onRuntimeInitialized(),
                    shouldRunNow && callMain(e),
                    postRun()));
              }
              (e = e || arguments_),
                runDependencies > 0 ||
                  (preRun(),
                  runDependencies > 0 ||
                    (Module.setStatus
                      ? (Module.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            Module.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
            }
            if (
              ((Module.ERRNO_CODES = ERRNO_CODES),
              (Module.allocateUTF8 = allocateUTF8),
              (Module.FS = FS),
              (Module.PROXYFS = PROXYFS),
              (dependenciesFulfilled = function e() {
                calledRun || run(), calledRun || (dependenciesFulfilled = e);
              }),
              Module.preInit)
            )
              for (
                "function" == typeof Module.preInit &&
                (Module.preInit = [Module.preInit]);
                Module.preInit.length > 0;

              )
                Module.preInit.pop()();
            var shouldRunNow = !0;
            return (
              Module.noInitialRun && (shouldRunNow = !1), run(), Module.ready
            );
          };
        })();
        const __WEBPACK_DEFAULT_EXPORT__ = Module;
      },
      3679: (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
          Z: () => __WEBPACK_DEFAULT_EXPORT__,
        });
        var Module = (() => {
          var _scriptDir =
            "file:///home/jprendes/Projects/emception/build/emception/quicknode/quicknode.mjs";
          return function (Module) {
            Module = Module || {};
            var Module = void 0 !== Module ? Module : {},
              readyPromiseResolve,
              readyPromiseReject;
            Module.ready = new Promise(function (e, r) {
              (readyPromiseResolve = e), (readyPromiseReject = r);
            });
            var moduleOverrides = Object.assign({}, Module),
              arguments_ = [],
              thisProgram = "./this.program",
              quit_ = (e, r) => {
                throw r;
              },
              ENVIRONMENT_IS_WEB = "object" == typeof window,
              ENVIRONMENT_IS_WORKER = "function" == typeof importScripts,
              ENVIRONMENT_IS_NODE =
                "object" == typeof process &&
                "object" == typeof process.versions &&
                "string" == typeof process.versions.node,
              scriptDirectory = "",
              read_,
              readAsync,
              readBinary,
              setWindowTitle,
              fs,
              nodePath;
            function locateFile(e) {
              return Module.locateFile
                ? Module.locateFile(e, scriptDirectory)
                : scriptDirectory + e;
            }
            function logExceptionOnExit(e) {
              e instanceof ExitStatus || err("exiting due to exception: " + e);
            }
            ENVIRONMENT_IS_NODE
              ? ((scriptDirectory = ENVIRONMENT_IS_WORKER
                  ? require("path").dirname(scriptDirectory) + "/"
                  : __dirname + "/"),
                "function" == typeof require &&
                  ((fs = require("fs")), (nodePath = require("path"))),
                (read_ = (e, r) => (
                  (e = nodePath.normalize(e)),
                  fs.readFileSync(e, r ? void 0 : "utf8")
                )),
                (readBinary = (e) => {
                  var r = read_(e, !0);
                  return r.buffer || (r = new Uint8Array(r)), r;
                }),
                (readAsync = (e, r, t) => {
                  (e = nodePath.normalize(e)),
                    fs.readFile(e, function (e, n) {
                      e ? t(e) : r(n.buffer);
                    });
                }),
                process.argv.length > 1 &&
                  (thisProgram = process.argv[1].replace(/\\/g, "/")),
                (arguments_ = process.argv.slice(2)),
                process.on("uncaughtException", function (e) {
                  if (!(e instanceof ExitStatus)) throw e;
                }),
                process.on("unhandledRejection", function (e) {
                  throw e;
                }),
                (quit_ = (e, r) => {
                  if (keepRuntimeAlive()) throw ((process.exitCode = e), r);
                  logExceptionOnExit(r), process.exit(e);
                }),
                (Module.inspect = function () {
                  return "[Emscripten Module object]";
                }))
              : (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) &&
                (ENVIRONMENT_IS_WORKER
                  ? (scriptDirectory = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (scriptDirectory = document.currentScript.src),
                _scriptDir && (scriptDirectory = _scriptDir),
                (scriptDirectory =
                  0 !== scriptDirectory.indexOf("blob:")
                    ? scriptDirectory.substr(
                        0,
                        scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") +
                          1
                      )
                    : ""),
                (read_ = (e) => {
                  var r = new XMLHttpRequest();
                  return r.open("GET", e, !1), r.send(null), r.responseText;
                }),
                ENVIRONMENT_IS_WORKER &&
                  (readBinary = (e) => {
                    var r = new XMLHttpRequest();
                    return (
                      r.open("GET", e, !1),
                      (r.responseType = "arraybuffer"),
                      r.send(null),
                      new Uint8Array(r.response)
                    );
                  }),
                (readAsync = (e, r, t) => {
                  var n = new XMLHttpRequest();
                  n.open("GET", e, !0),
                    (n.responseType = "arraybuffer"),
                    (n.onload = () => {
                      200 == n.status || (0 == n.status && n.response)
                        ? r(n.response)
                        : t();
                    }),
                    (n.onerror = t),
                    n.send(null);
                }),
                (setWindowTitle = (e) => (document.title = e)));
            var out = Module.print || console.log.bind(console),
              err = Module.printErr || console.warn.bind(console),
              wasmBinary;
            Object.assign(Module, moduleOverrides),
              (moduleOverrides = null),
              Module.arguments && (arguments_ = Module.arguments),
              Module.thisProgram && (thisProgram = Module.thisProgram),
              Module.quit && (quit_ = Module.quit),
              Module.wasmBinary && (wasmBinary = Module.wasmBinary);
            var noExitRuntime = Module.noExitRuntime || !0,
              wasmMemory;
            "object" != typeof WebAssembly &&
              abort("no native wasm support detected");
            var ABORT = !1,
              EXITSTATUS;
            function assert(e, r) {
              e || abort(r);
            }
            var UTF8Decoder =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0,
              buffer,
              HEAP8,
              HEAPU8,
              HEAP16,
              HEAPU16,
              HEAP32,
              HEAPU32,
              HEAPF32,
              HEAPF64;
            function UTF8ArrayToString(e, r, t) {
              for (var n = r + t, o = r; e[o] && !(o >= n); ) ++o;
              if (o - r > 16 && e.buffer && UTF8Decoder)
                return UTF8Decoder.decode(e.subarray(r, o));
              for (var a = ""; r < o; ) {
                var i = e[r++];
                if (128 & i) {
                  var s = 63 & e[r++];
                  if (192 != (224 & i)) {
                    var c = 63 & e[r++];
                    if (
                      (i =
                        224 == (240 & i)
                          ? ((15 & i) << 12) | (s << 6) | c
                          : ((7 & i) << 18) |
                            (s << 12) |
                            (c << 6) |
                            (63 & e[r++])) < 65536
                    )
                      a += String.fromCharCode(i);
                    else {
                      var u = i - 65536;
                      a += String.fromCharCode(
                        55296 | (u >> 10),
                        56320 | (1023 & u)
                      );
                    }
                  } else a += String.fromCharCode(((31 & i) << 6) | s);
                } else a += String.fromCharCode(i);
              }
              return a;
            }
            function UTF8ToString(e, r) {
              return e ? UTF8ArrayToString(HEAPU8, e, r) : "";
            }
            function stringToUTF8Array(e, r, t, n) {
              if (!(n > 0)) return 0;
              for (var o = t, a = t + n - 1, i = 0; i < e.length; ++i) {
                var s = e.charCodeAt(i);
                if (
                  (s >= 55296 &&
                    s <= 57343 &&
                    (s =
                      (65536 + ((1023 & s) << 10)) |
                      (1023 & e.charCodeAt(++i))),
                  s <= 127)
                ) {
                  if (t >= a) break;
                  r[t++] = s;
                } else if (s <= 2047) {
                  if (t + 1 >= a) break;
                  (r[t++] = 192 | (s >> 6)), (r[t++] = 128 | (63 & s));
                } else if (s <= 65535) {
                  if (t + 2 >= a) break;
                  (r[t++] = 224 | (s >> 12)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                } else {
                  if (t + 3 >= a) break;
                  (r[t++] = 240 | (s >> 18)),
                    (r[t++] = 128 | ((s >> 12) & 63)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                }
              }
              return (r[t] = 0), t - o;
            }
            function stringToUTF8(e, r, t) {
              return stringToUTF8Array(e, HEAPU8, r, t);
            }
            function lengthBytesUTF8(e) {
              for (var r = 0, t = 0; t < e.length; ++t) {
                var n = e.charCodeAt(t);
                n <= 127
                  ? r++
                  : n <= 2047
                  ? (r += 2)
                  : n >= 55296 && n <= 57343
                  ? ((r += 4), ++t)
                  : (r += 3);
              }
              return r;
            }
            function updateGlobalBufferAndViews(e) {
              (buffer = e),
                (Module.HEAP8 = HEAP8 = new Int8Array(e)),
                (Module.HEAP16 = HEAP16 = new Int16Array(e)),
                (Module.HEAP32 = HEAP32 = new Int32Array(e)),
                (Module.HEAPU8 = HEAPU8 = new Uint8Array(e)),
                (Module.HEAPU16 = HEAPU16 = new Uint16Array(e)),
                (Module.HEAPU32 = HEAPU32 = new Uint32Array(e)),
                (Module.HEAPF32 = HEAPF32 = new Float32Array(e)),
                (Module.HEAPF64 = HEAPF64 = new Float64Array(e));
            }
            var INITIAL_MEMORY = Module.INITIAL_MEMORY || 16777216,
              wasmTable,
              __ATPRERUN__ = [],
              __ATINIT__ = [],
              __ATMAIN__ = [],
              __ATPOSTRUN__ = [],
              runtimeInitialized = !1;
            function keepRuntimeAlive() {
              return noExitRuntime;
            }
            function preRun() {
              if (Module.preRun)
                for (
                  "function" == typeof Module.preRun &&
                  (Module.preRun = [Module.preRun]);
                  Module.preRun.length;

                )
                  addOnPreRun(Module.preRun.shift());
              callRuntimeCallbacks(__ATPRERUN__);
            }
            function initRuntime() {
              (runtimeInitialized = !0),
                Module.noFSInit || FS.init.initialized || FS.init(),
                (FS.ignorePermissions = !1),
                TTY.init(),
                callRuntimeCallbacks(__ATINIT__);
            }
            function preMain() {
              callRuntimeCallbacks(__ATMAIN__);
            }
            function postRun() {
              if (Module.postRun)
                for (
                  "function" == typeof Module.postRun &&
                  (Module.postRun = [Module.postRun]);
                  Module.postRun.length;

                )
                  addOnPostRun(Module.postRun.shift());
              callRuntimeCallbacks(__ATPOSTRUN__);
            }
            function addOnPreRun(e) {
              __ATPRERUN__.unshift(e);
            }
            function addOnInit(e) {
              __ATINIT__.unshift(e);
            }
            function addOnPostRun(e) {
              __ATPOSTRUN__.unshift(e);
            }
            var runDependencies = 0,
              runDependencyWatcher = null,
              dependenciesFulfilled = null;
            function getUniqueRunDependency(e) {
              return e;
            }
            function addRunDependency(e) {
              runDependencies++,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies);
            }
            function removeRunDependency(e) {
              if (
                (runDependencies--,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies),
                0 == runDependencies &&
                  (null !== runDependencyWatcher &&
                    (clearInterval(runDependencyWatcher),
                    (runDependencyWatcher = null)),
                  dependenciesFulfilled))
              ) {
                var r = dependenciesFulfilled;
                (dependenciesFulfilled = null), r();
              }
            }
            function abort(e) {
              Module.onAbort && Module.onAbort(e),
                err((e = "Aborted(" + e + ")")),
                (ABORT = !0),
                (EXITSTATUS = 1),
                (e += ". Build with -sASSERTIONS for more info.");
              var r = new WebAssembly.RuntimeError(e);
              throw (readyPromiseReject(r), r);
            }
            var dataURIPrefix = "data:application/octet-stream;base64,",
              wasmBinaryFile,
              tempDouble,
              tempI64;
            function isDataURI(e) {
              return e.startsWith(dataURIPrefix);
            }
            function isFileURI(e) {
              return e.startsWith("file://");
            }
            function getBinary(e) {
              try {
                if (e == wasmBinaryFile && wasmBinary)
                  return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(e);
                throw "both async and sync fetching of the wasm failed";
              } catch (e) {
                abort(e);
              }
            }
            function getBinaryPromise() {
              if (
                !wasmBinary &&
                (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)
              ) {
                if ("function" == typeof fetch && !isFileURI(wasmBinaryFile))
                  return fetch(wasmBinaryFile, { credentials: "same-origin" })
                    .then(function (e) {
                      if (!e.ok)
                        throw (
                          "failed to load wasm binary file at '" +
                          wasmBinaryFile +
                          "'"
                        );
                      return e.arrayBuffer();
                    })
                    .catch(function () {
                      return getBinary(wasmBinaryFile);
                    });
                if (readAsync)
                  return new Promise(function (e, r) {
                    readAsync(
                      wasmBinaryFile,
                      function (r) {
                        e(new Uint8Array(r));
                      },
                      r
                    );
                  });
              }
              return Promise.resolve().then(function () {
                return getBinary(wasmBinaryFile);
              });
            }
            function createWasm() {
              var e = { a: asmLibraryArg };
              function r(e, r) {
                var t = e.exports;
                (Module.asm = t),
                  updateGlobalBufferAndViews(
                    (wasmMemory = Module.asm.la).buffer
                  ),
                  (wasmTable = Module.asm.oa),
                  addOnInit(Module.asm.ma),
                  removeRunDependency("wasm-instantiate");
              }
              function t(e) {
                r(e.instance);
              }
              function n(r) {
                return getBinaryPromise()
                  .then(function (r) {
                    return WebAssembly.instantiate(r, e);
                  })
                  .then(function (e) {
                    return e;
                  })
                  .then(r, function (e) {
                    err("failed to asynchronously prepare wasm: " + e),
                      abort(e);
                  });
              }
              if (
                (addRunDependency("wasm-instantiate"), Module.instantiateWasm)
              )
                try {
                  return Module.instantiateWasm(e, r);
                } catch (e) {
                  err(
                    "Module.instantiateWasm callback failed with error: " + e
                  ),
                    readyPromiseReject(e);
                }
              return (
                (wasmBinary ||
                "function" != typeof WebAssembly.instantiateStreaming ||
                isDataURI(wasmBinaryFile) ||
                isFileURI(wasmBinaryFile) ||
                ENVIRONMENT_IS_NODE ||
                "function" != typeof fetch
                  ? n(t)
                  : fetch(wasmBinaryFile, { credentials: "same-origin" }).then(
                      function (r) {
                        return WebAssembly.instantiateStreaming(r, e).then(
                          t,
                          function (e) {
                            return (
                              err("wasm streaming compile failed: " + e),
                              err("falling back to ArrayBuffer instantiation"),
                              n(t)
                            );
                          }
                        );
                      }
                    )
                ).catch(readyPromiseReject),
                {}
              );
            }
            function ExitStatus(e) {
              (this.name = "ExitStatus"),
                (this.message = "Program terminated with exit(" + e + ")"),
                (this.status = e);
            }
            function callRuntimeCallbacks(e) {
              for (; e.length > 0; ) e.shift()(Module);
            }
            function ___cxa_allocate_exception(e) {
              return _malloc(e + 24) + 24;
            }
            Module.locateFile
              ? ((wasmBinaryFile = "quicknode.wasm"),
                isDataURI(wasmBinaryFile) ||
                  (wasmBinaryFile = locateFile(wasmBinaryFile)))
              : (wasmBinaryFile = new URL(
                  __webpack_require__(9025),
                  __webpack_require__.b
                ).toString());
            var exceptionCaught = [];
            function exception_addRef(e) {
              e.add_ref();
            }
            var uncaughtExceptionCount = 0;
            function ___cxa_begin_catch(e) {
              var r = new ExceptionInfo(e);
              return (
                r.get_caught() || (r.set_caught(!0), uncaughtExceptionCount--),
                r.set_rethrown(!1),
                exceptionCaught.push(r),
                exception_addRef(r),
                r.get_exception_ptr()
              );
            }
            var exceptionLast = 0;
            function ExceptionInfo(e) {
              (this.excPtr = e),
                (this.ptr = e - 24),
                (this.set_type = function (e) {
                  HEAPU32[(this.ptr + 4) >> 2] = e;
                }),
                (this.get_type = function () {
                  return HEAPU32[(this.ptr + 4) >> 2];
                }),
                (this.set_destructor = function (e) {
                  HEAPU32[(this.ptr + 8) >> 2] = e;
                }),
                (this.get_destructor = function () {
                  return HEAPU32[(this.ptr + 8) >> 2];
                }),
                (this.set_refcount = function (e) {
                  HEAP32[this.ptr >> 2] = e;
                }),
                (this.set_caught = function (e) {
                  (e = e ? 1 : 0), (HEAP8[(this.ptr + 12) >> 0] = e);
                }),
                (this.get_caught = function () {
                  return 0 != HEAP8[(this.ptr + 12) >> 0];
                }),
                (this.set_rethrown = function (e) {
                  (e = e ? 1 : 0), (HEAP8[(this.ptr + 13) >> 0] = e);
                }),
                (this.get_rethrown = function () {
                  return 0 != HEAP8[(this.ptr + 13) >> 0];
                }),
                (this.init = function (e, r) {
                  this.set_adjusted_ptr(0),
                    this.set_type(e),
                    this.set_destructor(r),
                    this.set_refcount(0),
                    this.set_caught(!1),
                    this.set_rethrown(!1);
                }),
                (this.add_ref = function () {
                  var e = HEAP32[this.ptr >> 2];
                  HEAP32[this.ptr >> 2] = e + 1;
                }),
                (this.release_ref = function () {
                  var e = HEAP32[this.ptr >> 2];
                  return (HEAP32[this.ptr >> 2] = e - 1), 1 === e;
                }),
                (this.set_adjusted_ptr = function (e) {
                  HEAPU32[(this.ptr + 16) >> 2] = e;
                }),
                (this.get_adjusted_ptr = function () {
                  return HEAPU32[(this.ptr + 16) >> 2];
                }),
                (this.get_exception_ptr = function () {
                  if (___cxa_is_pointer_type(this.get_type()))
                    return HEAPU32[this.excPtr >> 2];
                  var e = this.get_adjusted_ptr();
                  return 0 !== e ? e : this.excPtr;
                });
            }
            function ___cxa_free_exception(e) {
              return _free(new ExceptionInfo(e).ptr);
            }
            var wasmTableMirror = [];
            function getWasmTableEntry(e) {
              var r = wasmTableMirror[e];
              return (
                r ||
                  (e >= wasmTableMirror.length &&
                    (wasmTableMirror.length = e + 1),
                  (wasmTableMirror[e] = r = wasmTable.get(e))),
                r
              );
            }
            function exception_decRef(e) {
              if (e.release_ref() && !e.get_rethrown()) {
                var r = e.get_destructor();
                r && getWasmTableEntry(r)(e.excPtr),
                  ___cxa_free_exception(e.excPtr);
              }
            }
            function ___cxa_end_catch() {
              _setThrew(0),
                exception_decRef(exceptionCaught.pop()),
                (exceptionLast = 0);
            }
            function ___resumeException(e) {
              throw (exceptionLast || (exceptionLast = e), e);
            }
            function ___cxa_find_matching_catch_2() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_find_matching_catch_3() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_find_matching_catch_4() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_find_matching_catch_5() {
              var e = exceptionLast;
              if (!e) return setTempRet0(0), 0;
              var r = new ExceptionInfo(e);
              r.set_adjusted_ptr(e);
              var t = r.get_type();
              if (!t) return setTempRet0(0), e;
              for (var n = 0; n < arguments.length; n++) {
                var o = arguments[n];
                if (0 === o || o === t) break;
                var a = r.ptr + 16;
                if (___cxa_can_catch(o, t, a)) return setTempRet0(o), e;
              }
              return setTempRet0(t), e;
            }
            function ___cxa_rethrow() {
              var e = exceptionCaught.pop();
              e || abort("no exception to throw");
              var r = e.excPtr;
              throw (
                (e.get_rethrown() ||
                  (exceptionCaught.push(e),
                  e.set_rethrown(!0),
                  e.set_caught(!1),
                  uncaughtExceptionCount++),
                (exceptionLast = r),
                r)
              );
            }
            function ___cxa_throw(e, r, t) {
              throw (
                (new ExceptionInfo(e).init(r, t),
                (exceptionLast = e),
                uncaughtExceptionCount++,
                e)
              );
            }
            function ___cxa_uncaught_exceptions() {
              return uncaughtExceptionCount;
            }
            function setErrNo(e) {
              return (HEAP32[___errno_location() >> 2] = e), e;
            }
            var PATH = {
              isAbs: (e) => "/" === e.charAt(0),
              splitPath: (e) =>
                /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                  .exec(e)
                  .slice(1),
              normalizeArray: (e, r) => {
                for (var t = 0, n = e.length - 1; n >= 0; n--) {
                  var o = e[n];
                  "." === o
                    ? e.splice(n, 1)
                    : ".." === o
                    ? (e.splice(n, 1), t++)
                    : t && (e.splice(n, 1), t--);
                }
                if (r) for (; t; t--) e.unshift("..");
                return e;
              },
              normalize: (e) => {
                var r = PATH.isAbs(e),
                  t = "/" === e.substr(-1);
                return (
                  (e = PATH.normalizeArray(
                    e.split("/").filter((e) => !!e),
                    !r
                  ).join("/")) ||
                    r ||
                    (e = "."),
                  e && t && (e += "/"),
                  (r ? "/" : "") + e
                );
              },
              dirname: (e) => {
                var r = PATH.splitPath(e),
                  t = r[0],
                  n = r[1];
                return t || n
                  ? (n && (n = n.substr(0, n.length - 1)), t + n)
                  : ".";
              },
              basename: (e) => {
                if ("/" === e) return "/";
                var r = (e = (e = PATH.normalize(e)).replace(
                  /\/$/,
                  ""
                )).lastIndexOf("/");
                return -1 === r ? e : e.substr(r + 1);
              },
              join: function () {
                var e = Array.prototype.slice.call(arguments);
                return PATH.normalize(e.join("/"));
              },
              join2: (e, r) => PATH.normalize(e + "/" + r),
            };
            function getRandomDevice() {
              if (
                "object" == typeof crypto &&
                "function" == typeof crypto.getRandomValues
              ) {
                var e = new Uint8Array(1);
                return () => (crypto.getRandomValues(e), e[0]);
              }
              if (ENVIRONMENT_IS_NODE)
                try {
                  var r = require("crypto");
                  return () => r.randomBytes(1)[0];
                } catch (e) {}
              return () => abort("randomDevice");
            }
            var PATH_FS = {
              resolve: function () {
                for (
                  var e = "", r = !1, t = arguments.length - 1;
                  t >= -1 && !r;
                  t--
                ) {
                  var n = t >= 0 ? arguments[t] : FS.cwd();
                  if ("string" != typeof n)
                    throw new TypeError(
                      "Arguments to path.resolve must be strings"
                    );
                  if (!n) return "";
                  (e = n + "/" + e), (r = PATH.isAbs(n));
                }
                return (
                  (r ? "/" : "") +
                    (e = PATH.normalizeArray(
                      e.split("/").filter((e) => !!e),
                      !r
                    ).join("/")) || "."
                );
              },
              relative: (e, r) => {
                function t(e) {
                  for (var r = 0; r < e.length && "" === e[r]; r++);
                  for (var t = e.length - 1; t >= 0 && "" === e[t]; t--);
                  return r > t ? [] : e.slice(r, t - r + 1);
                }
                (e = PATH_FS.resolve(e).substr(1)),
                  (r = PATH_FS.resolve(r).substr(1));
                for (
                  var n = t(e.split("/")),
                    o = t(r.split("/")),
                    a = Math.min(n.length, o.length),
                    i = a,
                    s = 0;
                  s < a;
                  s++
                )
                  if (n[s] !== o[s]) {
                    i = s;
                    break;
                  }
                var c = [];
                for (s = i; s < n.length; s++) c.push("..");
                return (c = c.concat(o.slice(i))).join("/");
              },
            };
            function intArrayFromString(e, r, t) {
              var n = t > 0 ? t : lengthBytesUTF8(e) + 1,
                o = new Array(n),
                a = stringToUTF8Array(e, o, 0, o.length);
              return r && (o.length = a), o;
            }
            var TTY = {
              ttys: [],
              init: function () {},
              shutdown: function () {},
              register: function (e, r) {
                (TTY.ttys[e] = { input: [], output: [], ops: r }),
                  FS.registerDevice(e, TTY.stream_ops);
              },
              stream_ops: {
                open: function (e) {
                  var r = TTY.ttys[e.node.rdev];
                  if (!r) throw new FS.ErrnoError(43);
                  (e.tty = r), (e.seekable = !1);
                },
                close: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                fsync: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                read: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.get_char)
                    throw new FS.ErrnoError(60);
                  for (var a = 0, i = 0; i < n; i++) {
                    var s;
                    try {
                      s = e.tty.ops.get_char(e.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (void 0 === s && 0 === a) throw new FS.ErrnoError(6);
                    if (null == s) break;
                    a++, (r[t + i] = s);
                  }
                  return a && (e.node.timestamp = Date.now()), a;
                },
                write: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.put_char)
                    throw new FS.ErrnoError(60);
                  try {
                    for (var a = 0; a < n; a++)
                      e.tty.ops.put_char(e.tty, r[t + a]);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  return n && (e.node.timestamp = Date.now()), a;
                },
              },
              default_tty_ops: {
                get_char: function (e) {
                  if (!e.input.length) {
                    var r = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var t = Buffer.alloc(256),
                        n = 0;
                      try {
                        n = fs.readSync(process.stdin.fd, t, 0, 256, -1);
                      } catch (e) {
                        if (!e.toString().includes("EOF")) throw e;
                        n = 0;
                      }
                      r = n > 0 ? t.slice(0, n).toString("utf-8") : null;
                    } else
                      "undefined" != typeof window &&
                      "function" == typeof window.prompt
                        ? null !== (r = window.prompt("Input: ")) && (r += "\n")
                        : "function" == typeof readline &&
                          null !== (r = readline()) &&
                          (r += "\n");
                    if (!r) return null;
                    e.input = intArrayFromString(r, !0);
                  }
                  return e.input.shift();
                },
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (out(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (out(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
              default_tty1_ops: {
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (err(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (err(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
            };
            function mmapAlloc(e) {
              abort();
            }
            var MEMFS = {
              ops_table: null,
              mount: function (e) {
                return MEMFS.createNode(null, "/", 16895, 0);
              },
              createNode: function (e, r, t, n) {
                if (FS.isBlkdev(t) || FS.isFIFO(t)) throw new FS.ErrnoError(63);
                MEMFS.ops_table ||
                  (MEMFS.ops_table = {
                    dir: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink,
                      },
                      stream: { llseek: MEMFS.stream_ops.llseek },
                    },
                    file: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync,
                      },
                    },
                    link: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink,
                      },
                      stream: {},
                    },
                    chrdev: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: FS.chrdev_stream_ops,
                    },
                  });
                var o = FS.createNode(e, r, t, n);
                return (
                  FS.isDir(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.dir.node),
                      (o.stream_ops = MEMFS.ops_table.dir.stream),
                      (o.contents = {}))
                    : FS.isFile(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.file.node),
                      (o.stream_ops = MEMFS.ops_table.file.stream),
                      (o.usedBytes = 0),
                      (o.contents = null))
                    : FS.isLink(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.link.node),
                      (o.stream_ops = MEMFS.ops_table.link.stream))
                    : FS.isChrdev(o.mode) &&
                      ((o.node_ops = MEMFS.ops_table.chrdev.node),
                      (o.stream_ops = MEMFS.ops_table.chrdev.stream)),
                  (o.timestamp = Date.now()),
                  e && ((e.contents[r] = o), (e.timestamp = o.timestamp)),
                  o
                );
              },
              getFileDataAsTypedArray: function (e) {
                return e.contents
                  ? e.contents.subarray
                    ? e.contents.subarray(0, e.usedBytes)
                    : new Uint8Array(e.contents)
                  : new Uint8Array(0);
              },
              expandFileStorage: function (e, r) {
                var t = e.contents ? e.contents.length : 0;
                if (!(t >= r)) {
                  (r = Math.max(r, (t * (t < 1048576 ? 2 : 1.125)) >>> 0)),
                    0 != t && (r = Math.max(r, 256));
                  var n = e.contents;
                  (e.contents = new Uint8Array(r)),
                    e.usedBytes > 0 &&
                      e.contents.set(n.subarray(0, e.usedBytes), 0);
                }
              },
              resizeFileStorage: function (e, r) {
                if (e.usedBytes != r)
                  if (0 == r) (e.contents = null), (e.usedBytes = 0);
                  else {
                    var t = e.contents;
                    (e.contents = new Uint8Array(r)),
                      t &&
                        e.contents.set(t.subarray(0, Math.min(r, e.usedBytes))),
                      (e.usedBytes = r);
                  }
              },
              node_ops: {
                getattr: function (e) {
                  var r = {};
                  return (
                    (r.dev = FS.isChrdev(e.mode) ? e.id : 1),
                    (r.ino = e.id),
                    (r.mode = e.mode),
                    (r.nlink = 1),
                    (r.uid = 0),
                    (r.gid = 0),
                    (r.rdev = e.rdev),
                    FS.isDir(e.mode)
                      ? (r.size = 4096)
                      : FS.isFile(e.mode)
                      ? (r.size = e.usedBytes)
                      : FS.isLink(e.mode)
                      ? (r.size = e.link.length)
                      : (r.size = 0),
                    (r.atime = new Date(e.timestamp)),
                    (r.mtime = new Date(e.timestamp)),
                    (r.ctime = new Date(e.timestamp)),
                    (r.blksize = 4096),
                    (r.blocks = Math.ceil(r.size / r.blksize)),
                    r
                  );
                },
                setattr: function (e, r) {
                  void 0 !== r.mode && (e.mode = r.mode),
                    void 0 !== r.timestamp && (e.timestamp = r.timestamp),
                    void 0 !== r.size && MEMFS.resizeFileStorage(e, r.size);
                },
                lookup: function (e, r) {
                  throw FS.genericErrors[44];
                },
                mknod: function (e, r, t, n) {
                  return MEMFS.createNode(e, r, t, n);
                },
                rename: function (e, r, t) {
                  if (FS.isDir(e.mode)) {
                    var n;
                    try {
                      n = FS.lookupNode(r, t);
                    } catch (e) {}
                    if (n)
                      for (var o in n.contents) throw new FS.ErrnoError(55);
                  }
                  delete e.parent.contents[e.name],
                    (e.parent.timestamp = Date.now()),
                    (e.name = t),
                    (r.contents[t] = e),
                    (r.timestamp = e.parent.timestamp),
                    (e.parent = r);
                },
                unlink: function (e, r) {
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                rmdir: function (e, r) {
                  var t = FS.lookupNode(e, r);
                  for (var n in t.contents) throw new FS.ErrnoError(55);
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                readdir: function (e) {
                  var r = [".", ".."];
                  for (var t in e.contents)
                    e.contents.hasOwnProperty(t) && r.push(t);
                  return r;
                },
                symlink: function (e, r, t) {
                  var n = MEMFS.createNode(e, r, 41471, 0);
                  return (n.link = t), n;
                },
                readlink: function (e) {
                  if (!FS.isLink(e.mode)) throw new FS.ErrnoError(28);
                  return e.link;
                },
              },
              stream_ops: {
                read: function (e, r, t, n, o) {
                  var a = e.node.contents;
                  if (o >= e.node.usedBytes) return 0;
                  var i = Math.min(e.node.usedBytes - o, n);
                  if (i > 8 && a.subarray) r.set(a.subarray(o, o + i), t);
                  else for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                  return i;
                },
                write: function (e, r, t, n, o, a) {
                  if ((r.buffer === HEAP8.buffer && (a = !1), !n)) return 0;
                  var i = e.node;
                  if (
                    ((i.timestamp = Date.now()),
                    r.subarray && (!i.contents || i.contents.subarray))
                  ) {
                    if (a)
                      return (
                        (i.contents = r.subarray(t, t + n)),
                        (i.usedBytes = n),
                        n
                      );
                    if (0 === i.usedBytes && 0 === o)
                      return (
                        (i.contents = r.slice(t, t + n)), (i.usedBytes = n), n
                      );
                    if (o + n <= i.usedBytes)
                      return i.contents.set(r.subarray(t, t + n), o), n;
                  }
                  if (
                    (MEMFS.expandFileStorage(i, o + n),
                    i.contents.subarray && r.subarray)
                  )
                    i.contents.set(r.subarray(t, t + n), o);
                  else for (var s = 0; s < n; s++) i.contents[o + s] = r[t + s];
                  return (i.usedBytes = Math.max(i.usedBytes, o + n)), n;
                },
                llseek: function (e, r, t) {
                  var n = r;
                  if (
                    (1 === t
                      ? (n += e.position)
                      : 2 === t &&
                        FS.isFile(e.node.mode) &&
                        (n += e.node.usedBytes),
                    n < 0)
                  )
                    throw new FS.ErrnoError(28);
                  return n;
                },
                allocate: function (e, r, t) {
                  MEMFS.expandFileStorage(e.node, r + t),
                    (e.node.usedBytes = Math.max(e.node.usedBytes, r + t));
                },
                mmap: function (e, r, t, n, o) {
                  if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);
                  var a,
                    i,
                    s = e.node.contents;
                  if (2 & o || s.buffer !== buffer) {
                    if (
                      ((t > 0 || t + r < s.length) &&
                        (s = s.subarray
                          ? s.subarray(t, t + r)
                          : Array.prototype.slice.call(s, t, t + r)),
                      (i = !0),
                      !(a = mmapAlloc(r)))
                    )
                      throw new FS.ErrnoError(48);
                    HEAP8.set(s, a);
                  } else (i = !1), (a = s.byteOffset);
                  return { ptr: a, allocated: i };
                },
                msync: function (e, r, t, n, o) {
                  return MEMFS.stream_ops.write(e, r, 0, n, t, !1), 0;
                },
              },
            };
            function asyncLoad(e, r, t, n) {
              var o = n ? "" : getUniqueRunDependency("al " + e);
              readAsync(
                e,
                (t) => {
                  assert(
                    t,
                    'Loading data file "' + e + '" failed (no arrayBuffer).'
                  ),
                    r(new Uint8Array(t)),
                    o && removeRunDependency(o);
                },
                (r) => {
                  if (!t) throw 'Loading data file "' + e + '" failed.';
                  t();
                }
              ),
                o && addRunDependency(o);
            }
            var ERRNO_CODES = {},
              PROXYFS = {
                mount: function (e) {
                  return PROXYFS.createNode(
                    null,
                    "/",
                    e.opts.fs.lstat(e.opts.root).mode,
                    0
                  );
                },
                createNode: function (e, r, t, n) {
                  if (!FS.isDir(t) && !FS.isFile(t) && !FS.isLink(t))
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                  var o = FS.createNode(e, r, t);
                  return (
                    (o.node_ops = PROXYFS.node_ops),
                    (o.stream_ops = PROXYFS.stream_ops),
                    o
                  );
                },
                realPath: function (e) {
                  for (var r = []; e.parent !== e; )
                    r.push(e.name), (e = e.parent);
                  return (
                    r.push(e.mount.opts.root),
                    r.reverse(),
                    PATH.join.apply(null, r)
                  );
                },
                node_ops: {
                  getattr: function (e) {
                    var r,
                      t = PROXYFS.realPath(e);
                    try {
                      r = e.mount.opts.fs.lstat(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return {
                      dev: r.dev,
                      ino: r.ino,
                      mode: r.mode,
                      nlink: r.nlink,
                      uid: r.uid,
                      gid: r.gid,
                      rdev: r.rdev,
                      size: r.size,
                      atime: r.atime,
                      mtime: r.mtime,
                      ctime: r.ctime,
                      blksize: r.blksize,
                      blocks: r.blocks,
                    };
                  },
                  setattr: function (e, r) {
                    var t = PROXYFS.realPath(e);
                    try {
                      if (
                        (void 0 !== r.mode &&
                          (e.mount.opts.fs.chmod(t, r.mode), (e.mode = r.mode)),
                        void 0 !== r.timestamp)
                      ) {
                        var n = new Date(r.timestamp);
                        e.mount.opts.fs.utime(t, n, n);
                      }
                      void 0 !== r.size && e.mount.opts.fs.truncate(t, r.size);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  lookup: function (e, r) {
                    try {
                      var t = PATH.join2(PROXYFS.realPath(e), r),
                        n = e.mount.opts.fs.lstat(t).mode;
                      return PROXYFS.createNode(e, r, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  mknod: function (e, r, t, n) {
                    var o = PROXYFS.createNode(e, r, t, n),
                      a = PROXYFS.realPath(o);
                    try {
                      FS.isDir(o.mode)
                        ? o.mount.opts.fs.mkdir(a, o.mode)
                        : o.mount.opts.fs.writeFile(a, "", { mode: o.mode });
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return o;
                  },
                  rename: function (e, r, t) {
                    var n = PROXYFS.realPath(e),
                      o = PATH.join2(PROXYFS.realPath(r), t);
                    try {
                      e.mount.opts.fs.rename(n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  unlink: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.unlink(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  rmdir: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.rmdir(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readdir: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readdir(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  symlink: function (e, r, t) {
                    var n = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.symlink(t, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readlink: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readlink(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                },
                stream_ops: {
                  open: function (e) {
                    var r = PROXYFS.realPath(e.node);
                    try {
                      e.nfd = e.node.mount.opts.fs.open(r, e.flags);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  close: function (e) {
                    try {
                      e.node.mount.opts.fs.close(e.nfd);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  read: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.read(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  write: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.write(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  llseek: function (e, r, t) {
                    var n = r;
                    if (1 === t) n += e.position;
                    else if (2 === t && FS.isFile(e.node.mode))
                      try {
                        n += e.node.node_ops.getattr(e.node).size;
                      } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                      }
                    if (n < 0) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                    return n;
                  },
                },
              },
              FS = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, r = {}) => {
                  if (!(e = PATH_FS.resolve(FS.cwd(), e)))
                    return { path: "", node: null };
                  if (
                    (r = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      r
                    )).recurse_count > 8
                  )
                    throw new FS.ErrnoError(32);
                  for (
                    var t = PATH.normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !1
                      ),
                      n = FS.root,
                      o = "/",
                      a = 0;
                    a < t.length;
                    a++
                  ) {
                    var i = a === t.length - 1;
                    if (i && r.parent) break;
                    if (
                      ((n = FS.lookupNode(n, t[a])),
                      (o = PATH.join2(o, t[a])),
                      FS.isMountpoint(n) &&
                        (!i || (i && r.follow_mount)) &&
                        (n = n.mounted.root),
                      !i || r.follow)
                    )
                      for (var s = 0; FS.isLink(n.mode); ) {
                        var c = FS.readlink(o);
                        if (
                          ((o = PATH_FS.resolve(PATH.dirname(o), c)),
                          (n = FS.lookupPath(o, {
                            recurse_count: r.recurse_count + 1,
                          }).node),
                          s++ > 40)
                        )
                          throw new FS.ErrnoError(32);
                      }
                  }
                  return { path: o, node: n };
                },
                getPath: (e) => {
                  for (var r; ; ) {
                    if (FS.isRoot(e)) {
                      var t = e.mount.mountpoint;
                      return r
                        ? "/" !== t[t.length - 1]
                          ? t + "/" + r
                          : t + r
                        : t;
                    }
                    (r = r ? e.name + "/" + r : e.name), (e = e.parent);
                  }
                },
                hashName: (e, r) => {
                  for (var t = 0, n = 0; n < r.length; n++)
                    t = ((t << 5) - t + r.charCodeAt(n)) | 0;
                  return ((e + t) >>> 0) % FS.nameTable.length;
                },
                hashAddNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  (e.name_next = FS.nameTable[r]), (FS.nameTable[r] = e);
                },
                hashRemoveNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  if (FS.nameTable[r] === e) FS.nameTable[r] = e.name_next;
                  else
                    for (var t = FS.nameTable[r]; t; ) {
                      if (t.name_next === e) {
                        t.name_next = e.name_next;
                        break;
                      }
                      t = t.name_next;
                    }
                },
                lookupNode: (e, r) => {
                  var t = FS.mayLookup(e);
                  if (t) throw new FS.ErrnoError(t, e);
                  for (
                    var n = FS.hashName(e.id, r), o = FS.nameTable[n];
                    o;
                    o = o.name_next
                  ) {
                    var a = o.name;
                    if (o.parent.id === e.id && a === r) return o;
                  }
                  return FS.lookup(e, r);
                },
                createNode: (e, r, t, n) => {
                  var o = new FS.FSNode(e, r, t, n);
                  return FS.hashAddNode(o), o;
                },
                destroyNode: (e) => {
                  FS.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagModes: {
                  r: 0,
                  "r+": 2,
                  w: 577,
                  "w+": 578,
                  a: 1089,
                  "a+": 1090,
                },
                modeStringToFlags: (e) => {
                  var r = FS.flagModes[e];
                  if (void 0 === r)
                    throw new Error("Unknown file open mode: " + e);
                  return r;
                },
                flagsToPermissionString: (e) => {
                  var r = ["r", "w", "rw"][3 & e];
                  return 512 & e && (r += "w"), r;
                },
                nodePermissions: (e, r) =>
                  FS.ignorePermissions ||
                  ((!r.includes("r") || 292 & e.mode) &&
                    (!r.includes("w") || 146 & e.mode) &&
                    (!r.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  FS.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, r) => {
                  try {
                    return FS.lookupNode(e, r), 20;
                  } catch (e) {}
                  return FS.nodePermissions(e, "wx");
                },
                mayDelete: (e, r, t) => {
                  var n;
                  try {
                    n = FS.lookupNode(e, r);
                  } catch (e) {
                    return e.errno;
                  }
                  var o = FS.nodePermissions(e, "wx");
                  if (o) return o;
                  if (t) {
                    if (!FS.isDir(n.mode)) return 54;
                    if (FS.isRoot(n) || FS.getPath(n) === FS.cwd()) return 10;
                  } else if (FS.isDir(n.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, r) =>
                  e
                    ? FS.isLink(e.mode)
                      ? 32
                      : FS.isDir(e.mode) &&
                        ("r" !== FS.flagsToPermissionString(r) || 512 & r)
                      ? 31
                      : FS.nodePermissions(e, FS.flagsToPermissionString(r))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: (e = 0, r = FS.MAX_OPEN_FDS) => {
                  for (var t = e; t <= r; t++) if (!FS.streams[t]) return t;
                  throw new FS.ErrnoError(33);
                },
                getStream: (e) => FS.streams[e],
                createStream: (e, r, t) => {
                  FS.FSStream ||
                    ((FS.FSStream = function () {
                      this.shared = {};
                    }),
                    (FS.FSStream.prototype = {}),
                    Object.defineProperties(FS.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                    (e = Object.assign(new FS.FSStream(), e));
                  var n = FS.nextfd(r, t);
                  return (e.fd = n), (FS.streams[n] = e), e;
                },
                closeStream: (e) => {
                  FS.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var r = FS.getDevice(e.node.rdev);
                    (e.stream_ops = r.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new FS.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, r) => (e << 8) | r,
                registerDevice: (e, r) => {
                  FS.devices[e] = { stream_ops: r };
                },
                getDevice: (e) => FS.devices[e],
                getMounts: (e) => {
                  for (var r = [], t = [e]; t.length; ) {
                    var n = t.pop();
                    r.push(n), t.push.apply(t, n.mounts);
                  }
                  return r;
                },
                syncfs: (e, r) => {
                  "function" == typeof e && ((r = e), (e = !1)),
                    FS.syncFSRequests++,
                    FS.syncFSRequests > 1 &&
                      err(
                        "warning: " +
                          FS.syncFSRequests +
                          " FS.syncfs operations in flight at once, probably just doing extra work"
                      );
                  var t = FS.getMounts(FS.root.mount),
                    n = 0;
                  function o(e) {
                    return FS.syncFSRequests--, r(e);
                  }
                  function a(e) {
                    if (e) return a.errored ? void 0 : ((a.errored = !0), o(e));
                    ++n >= t.length && o(null);
                  }
                  t.forEach((r) => {
                    if (!r.type.syncfs) return a(null);
                    r.type.syncfs(r, e, a);
                  });
                },
                mount: (e, r, t) => {
                  var n,
                    o = "/" === t,
                    a = !t;
                  if (o && FS.root) throw new FS.ErrnoError(10);
                  if (!o && !a) {
                    var i = FS.lookupPath(t, { follow_mount: !1 });
                    if (((t = i.path), (n = i.node), FS.isMountpoint(n)))
                      throw new FS.ErrnoError(10);
                    if (!FS.isDir(n.mode)) throw new FS.ErrnoError(54);
                  }
                  var s = { type: e, opts: r, mountpoint: t, mounts: [] },
                    c = e.mount(s);
                  return (
                    (c.mount = s),
                    (s.root = c),
                    o
                      ? (FS.root = c)
                      : n &&
                        ((n.mounted = s), n.mount && n.mount.mounts.push(s)),
                    c
                  );
                },
                unmount: (e) => {
                  var r = FS.lookupPath(e, { follow_mount: !1 });
                  if (!FS.isMountpoint(r.node)) throw new FS.ErrnoError(28);
                  var t = r.node,
                    n = t.mounted,
                    o = FS.getMounts(n);
                  Object.keys(FS.nameTable).forEach((e) => {
                    for (var r = FS.nameTable[e]; r; ) {
                      var t = r.name_next;
                      o.includes(r.mount) && FS.destroyNode(r), (r = t);
                    }
                  }),
                    (t.mounted = null);
                  var a = t.mount.mounts.indexOf(n);
                  t.mount.mounts.splice(a, 1);
                },
                lookup: (e, r) => e.node_ops.lookup(e, r),
                mknod: (e, r, t) => {
                  var n = FS.lookupPath(e, { parent: !0 }).node,
                    o = PATH.basename(e);
                  if (!o || "." === o || ".." === o)
                    throw new FS.ErrnoError(28);
                  var a = FS.mayCreate(n, o);
                  if (a) throw new FS.ErrnoError(a);
                  if (!n.node_ops.mknod) throw new FS.ErrnoError(63);
                  return n.node_ops.mknod(n, o, r, t);
                },
                create: (e, r) => (
                  (r = void 0 !== r ? r : 438),
                  (r &= 4095),
                  (r |= 32768),
                  FS.mknod(e, r, 0)
                ),
                mkdir: (e, r) => (
                  (r = void 0 !== r ? r : 511),
                  (r &= 1023),
                  (r |= 16384),
                  FS.mknod(e, r, 0)
                ),
                mkdirTree: (e, r) => {
                  for (var t = e.split("/"), n = "", o = 0; o < t.length; ++o)
                    if (t[o]) {
                      n += "/" + t[o];
                      try {
                        FS.mkdir(n, r);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, r, t) => (
                  void 0 === t && ((t = r), (r = 438)),
                  (r |= 8192),
                  FS.mknod(e, r, t)
                ),
                symlink: (e, r) => {
                  if (!PATH_FS.resolve(e)) throw new FS.ErrnoError(44);
                  var t = FS.lookupPath(r, { parent: !0 }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  var n = PATH.basename(r),
                    o = FS.mayCreate(t, n);
                  if (o) throw new FS.ErrnoError(o);
                  if (!t.node_ops.symlink) throw new FS.ErrnoError(63);
                  return t.node_ops.symlink(t, n, e);
                },
                rename: (e, r) => {
                  var t,
                    n,
                    o = PATH.dirname(e),
                    a = PATH.dirname(r),
                    i = PATH.basename(e),
                    s = PATH.basename(r);
                  if (
                    ((t = FS.lookupPath(e, { parent: !0 }).node),
                    (n = FS.lookupPath(r, { parent: !0 }).node),
                    !t || !n)
                  )
                    throw new FS.ErrnoError(44);
                  if (t.mount !== n.mount) throw new FS.ErrnoError(75);
                  var c,
                    u = FS.lookupNode(t, i),
                    l = PATH_FS.relative(e, a);
                  if ("." !== l.charAt(0)) throw new FS.ErrnoError(28);
                  if ("." !== (l = PATH_FS.relative(r, o)).charAt(0))
                    throw new FS.ErrnoError(55);
                  try {
                    c = FS.lookupNode(n, s);
                  } catch (e) {}
                  if (u !== c) {
                    var d = FS.isDir(u.mode),
                      f = FS.mayDelete(t, i, d);
                    if (f) throw new FS.ErrnoError(f);
                    if ((f = c ? FS.mayDelete(n, s, d) : FS.mayCreate(n, s)))
                      throw new FS.ErrnoError(f);
                    if (!t.node_ops.rename) throw new FS.ErrnoError(63);
                    if (FS.isMountpoint(u) || (c && FS.isMountpoint(c)))
                      throw new FS.ErrnoError(10);
                    if (n !== t && (f = FS.nodePermissions(t, "w")))
                      throw new FS.ErrnoError(f);
                    FS.hashRemoveNode(u);
                    try {
                      t.node_ops.rename(u, n, s);
                    } catch (e) {
                      throw e;
                    } finally {
                      FS.hashAddNode(u);
                    }
                  }
                },
                rmdir: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node,
                    t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !0);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.rmdir) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.rmdir(r, t), FS.destroyNode(n);
                },
                readdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 }).node;
                  if (!r.node_ops.readdir) throw new FS.ErrnoError(54);
                  return r.node_ops.readdir(r);
                },
                unlink: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node;
                  if (!r) throw new FS.ErrnoError(44);
                  var t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !1);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.unlink) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.unlink(r, t), FS.destroyNode(n);
                },
                readlink: (e) => {
                  var r = FS.lookupPath(e).node;
                  if (!r) throw new FS.ErrnoError(44);
                  if (!r.node_ops.readlink) throw new FS.ErrnoError(28);
                  return PATH_FS.resolve(
                    FS.getPath(r.parent),
                    r.node_ops.readlink(r)
                  );
                },
                stat: (e, r) => {
                  var t = FS.lookupPath(e, { follow: !r }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  if (!t.node_ops.getattr) throw new FS.ErrnoError(63);
                  return t.node_ops.getattr(t);
                },
                lstat: (e) => FS.stat(e, !0),
                chmod: (e, r, t) => {
                  var n;
                  if (
                    !(n =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !t }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  n.node_ops.setattr(n, {
                    mode: (4095 & r) | (-4096 & n.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, r) => {
                  FS.chmod(e, r, !0);
                },
                fchmod: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  FS.chmod(t.node, r);
                },
                chown: (e, r, t, n) => {
                  var o;
                  if (
                    !(o =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !n }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  o.node_ops.setattr(o, { timestamp: Date.now() });
                },
                lchown: (e, r, t) => {
                  FS.chown(e, r, t, !0);
                },
                fchown: (e, r, t) => {
                  var n = FS.getStream(e);
                  if (!n) throw new FS.ErrnoError(8);
                  FS.chown(n.node, r, t);
                },
                truncate: (e, r) => {
                  if (r < 0) throw new FS.ErrnoError(28);
                  var t;
                  if (
                    !(t =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  if (FS.isDir(t.mode)) throw new FS.ErrnoError(31);
                  if (!FS.isFile(t.mode)) throw new FS.ErrnoError(28);
                  var n = FS.nodePermissions(t, "w");
                  if (n) throw new FS.ErrnoError(n);
                  t.node_ops.setattr(t, { size: r, timestamp: Date.now() });
                },
                ftruncate: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & t.flags)) throw new FS.ErrnoError(28);
                  FS.truncate(t.node, r);
                },
                utime: (e, r, t) => {
                  var n = FS.lookupPath(e, { follow: !0 }).node;
                  n.node_ops.setattr(n, { timestamp: Math.max(r, t) });
                },
                open: (e, r, t) => {
                  if ("" === e) throw new FS.ErrnoError(44);
                  var n;
                  if (
                    ((t = void 0 === t ? 438 : t),
                    (t =
                      64 &
                      (r = "string" == typeof r ? FS.modeStringToFlags(r) : r)
                        ? (4095 & t) | 32768
                        : 0),
                    "object" == typeof e)
                  )
                    n = e;
                  else {
                    e = PATH.normalize(e);
                    try {
                      n = FS.lookupPath(e, { follow: !(131072 & r) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & r)
                    if (n) {
                      if (128 & r) throw new FS.ErrnoError(20);
                    } else (n = FS.mknod(e, t, 0)), (o = !0);
                  if (!n) throw new FS.ErrnoError(44);
                  if (
                    (FS.isChrdev(n.mode) && (r &= -513),
                    65536 & r && !FS.isDir(n.mode))
                  )
                    throw new FS.ErrnoError(54);
                  if (!o) {
                    var a = FS.mayOpen(n, r);
                    if (a) throw new FS.ErrnoError(a);
                  }
                  512 & r && !o && FS.truncate(n, 0), (r &= -131713);
                  var i = FS.createStream({
                    node: n,
                    path: FS.getPath(n),
                    flags: r,
                    seekable: !0,
                    position: 0,
                    stream_ops: n.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    i.stream_ops.open && i.stream_ops.open(i),
                    !Module.logReadFiles ||
                      1 & r ||
                      (FS.readFiles || (FS.readFiles = {}),
                      e in FS.readFiles || (FS.readFiles[e] = 1)),
                    i
                  );
                },
                close: (e) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new FS.ErrnoError(70);
                  if (0 != t && 1 != t && 2 != t) throw new FS.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, r, t)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, r, t, n, o) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.read) throw new FS.ErrnoError(28);
                  var a = void 0 !== o;
                  if (a) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var i = e.stream_ops.read(e, r, t, n, o);
                  return a || (e.position += i), i;
                },
                write: (e, r, t, n, o, a) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.write) throw new FS.ErrnoError(28);
                  e.seekable && 1024 & e.flags && FS.llseek(e, 0, 2);
                  var i = void 0 !== o;
                  if (i) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var s = e.stream_ops.write(e, r, t, n, o, a);
                  return i || (e.position += s), s;
                },
                allocate: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (r < 0 || t <= 0) throw new FS.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode))
                    throw new FS.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new FS.ErrnoError(138);
                  e.stream_ops.allocate(e, r, t);
                },
                mmap: (e, r, t, n, o) => {
                  if (0 != (2 & n) && 0 == (2 & o) && 2 != (2097155 & e.flags))
                    throw new FS.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new FS.ErrnoError(43);
                  return e.stream_ops.mmap(e, r, t, n, o);
                },
                msync: (e, r, t, n, o) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, r, t, n, o) : 0,
                munmap: (e) => 0,
                ioctl: (e, r, t) => {
                  if (!e.stream_ops.ioctl) throw new FS.ErrnoError(59);
                  return e.stream_ops.ioctl(e, r, t);
                },
                readFile: (e, r = {}) => {
                  if (
                    ((r.flags = r.flags || 0),
                    (r.encoding = r.encoding || "binary"),
                    "utf8" !== r.encoding && "binary" !== r.encoding)
                  )
                    throw new Error(
                      'Invalid encoding type "' + r.encoding + '"'
                    );
                  var t,
                    n = FS.open(e, r.flags),
                    o = FS.stat(e).size,
                    a = new Uint8Array(o);
                  return (
                    FS.read(n, a, 0, o, 0),
                    "utf8" === r.encoding
                      ? (t = UTF8ArrayToString(a, 0))
                      : "binary" === r.encoding && (t = a),
                    FS.close(n),
                    t
                  );
                },
                writeFile: (e, r, t = {}) => {
                  t.flags = t.flags || 577;
                  var n = FS.open(e, t.flags, t.mode);
                  if ("string" == typeof r) {
                    var o = new Uint8Array(lengthBytesUTF8(r) + 1),
                      a = stringToUTF8Array(r, o, 0, o.length);
                    FS.write(n, o, 0, a, void 0, t.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(r))
                      throw new Error("Unsupported data type");
                    FS.write(n, r, 0, r.byteLength, void 0, t.canOwn);
                  }
                  FS.close(n);
                },
                cwd: () => FS.currentPath,
                chdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 });
                  if (null === r.node) throw new FS.ErrnoError(44);
                  if (!FS.isDir(r.node.mode)) throw new FS.ErrnoError(54);
                  var t = FS.nodePermissions(r.node, "x");
                  if (t) throw new FS.ErrnoError(t);
                  FS.currentPath = r.path;
                },
                createDefaultDirectories: () => {
                  FS.mkdir("/tmp"),
                    FS.mkdir("/home"),
                    FS.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  FS.mkdir("/dev"),
                    FS.registerDevice(FS.makedev(1, 3), {
                      read: () => 0,
                      write: (e, r, t, n, o) => n,
                    }),
                    FS.mkdev("/dev/null", FS.makedev(1, 3)),
                    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops),
                    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops),
                    FS.mkdev("/dev/tty", FS.makedev(5, 0)),
                    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var e = getRandomDevice();
                  FS.createDevice("/dev", "random", e),
                    FS.createDevice("/dev", "urandom", e),
                    FS.mkdir("/dev/shm"),
                    FS.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var e = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd"),
                    FS.mount(
                      {
                        mount: () => {
                          var r = FS.createNode(e, "fd", 16895, 73);
                          return (
                            (r.node_ops = {
                              lookup: (e, r) => {
                                var t = +r,
                                  n = FS.getStream(t);
                                if (!n) throw new FS.ErrnoError(8);
                                var o = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => n.path },
                                };
                                return (o.parent = o), o;
                              },
                            }),
                            r
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  Module.stdin
                    ? FS.createDevice("/dev", "stdin", Module.stdin)
                    : FS.symlink("/dev/tty", "/dev/stdin"),
                    Module.stdout
                      ? FS.createDevice("/dev", "stdout", null, Module.stdout)
                      : FS.symlink("/dev/tty", "/dev/stdout"),
                    Module.stderr
                      ? FS.createDevice("/dev", "stderr", null, Module.stderr)
                      : FS.symlink("/dev/tty1", "/dev/stderr"),
                    FS.open("/dev/stdin", 0),
                    FS.open("/dev/stdout", 1),
                    FS.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  FS.ErrnoError ||
                    ((FS.ErrnoError = function (e, r) {
                      (this.node = r),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (FS.ErrnoError.prototype = new Error()),
                    (FS.ErrnoError.prototype.constructor = FS.ErrnoError),
                    [44].forEach((e) => {
                      (FS.genericErrors[e] = new FS.ErrnoError(e)),
                        (FS.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  FS.ensureErrnoError(),
                    (FS.nameTable = new Array(4096)),
                    FS.mount(MEMFS, {}, "/"),
                    FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    (FS.filesystems = { MEMFS, PROXYFS });
                },
                init: (e, r, t) => {
                  (FS.init.initialized = !0),
                    FS.ensureErrnoError(),
                    (Module.stdin = e || Module.stdin),
                    (Module.stdout = r || Module.stdout),
                    (Module.stderr = t || Module.stderr),
                    FS.createStandardStreams();
                },
                quit: () => {
                  FS.init.initialized = !1;
                  for (var e = 0; e < FS.streams.length; e++) {
                    var r = FS.streams[e];
                    r && FS.close(r);
                  }
                },
                getMode: (e, r) => {
                  var t = 0;
                  return e && (t |= 365), r && (t |= 146), t;
                },
                findObject: (e, r) => {
                  var t = FS.analyzePath(e, r);
                  return t.exists ? t.object : null;
                },
                analyzePath: (e, r) => {
                  try {
                    e = (n = FS.lookupPath(e, { follow: !r })).path;
                  } catch (e) {}
                  var t = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var n = FS.lookupPath(e, { parent: !0 });
                    (t.parentExists = !0),
                      (t.parentPath = n.path),
                      (t.parentObject = n.node),
                      (t.name = PATH.basename(e)),
                      (n = FS.lookupPath(e, { follow: !r })),
                      (t.exists = !0),
                      (t.path = n.path),
                      (t.object = n.node),
                      (t.name = n.node.name),
                      (t.isRoot = "/" === n.path);
                  } catch (e) {
                    t.error = e.errno;
                  }
                  return t;
                },
                createPath: (e, r, t, n) => {
                  e = "string" == typeof e ? e : FS.getPath(e);
                  for (var o = r.split("/").reverse(); o.length; ) {
                    var a = o.pop();
                    if (a) {
                      var i = PATH.join2(e, a);
                      try {
                        FS.mkdir(i);
                      } catch (e) {}
                      e = i;
                    }
                  }
                  return i;
                },
                createFile: (e, r, t, n, o) => {
                  var a = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    i = FS.getMode(n, o);
                  return FS.create(a, i);
                },
                createDataFile: (e, r, t, n, o, a) => {
                  var i = r;
                  e &&
                    ((e = "string" == typeof e ? e : FS.getPath(e)),
                    (i = r ? PATH.join2(e, r) : e));
                  var s = FS.getMode(n, o),
                    c = FS.create(i, s);
                  if (t) {
                    if ("string" == typeof t) {
                      for (
                        var u = new Array(t.length), l = 0, d = t.length;
                        l < d;
                        ++l
                      )
                        u[l] = t.charCodeAt(l);
                      t = u;
                    }
                    FS.chmod(c, 146 | s);
                    var f = FS.open(c, 577);
                    FS.write(f, t, 0, t.length, 0, a),
                      FS.close(f),
                      FS.chmod(c, s);
                  }
                  return c;
                },
                createDevice: (e, r, t, n) => {
                  var o = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    a = FS.getMode(!!t, !!n);
                  FS.createDevice.major || (FS.createDevice.major = 64);
                  var i = FS.makedev(FS.createDevice.major++, 0);
                  return (
                    FS.registerDevice(i, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        n && n.buffer && n.buffer.length && n(10);
                      },
                      read: (e, r, n, o, a) => {
                        for (var i = 0, s = 0; s < o; s++) {
                          var c;
                          try {
                            c = t();
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                          if (void 0 === c && 0 === i)
                            throw new FS.ErrnoError(6);
                          if (null == c) break;
                          i++, (r[n + s] = c);
                        }
                        return i && (e.node.timestamp = Date.now()), i;
                      },
                      write: (e, r, t, o, a) => {
                        for (var i = 0; i < o; i++)
                          try {
                            n(r[t + i]);
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                        return o && (e.node.timestamp = Date.now()), i;
                      },
                    }),
                    FS.mkdev(o, a, i)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!read_)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = intArrayFromString(read_(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                },
                createLazyFile: (e, r, t, n, o) => {
                  function a() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((a.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var r = e % this.chunkSize,
                          t = (e / this.chunkSize) | 0;
                        return this.getter(t)[r];
                      }
                    }),
                    (a.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (a.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", t, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + t + ". Status: " + e.status
                        );
                      var r,
                        n = Number(e.getResponseHeader("Content-length")),
                        o =
                          (r = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === r,
                        a =
                          (r = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === r,
                        i = 1048576;
                      o || (i = n);
                      var s = this;
                      s.setDataGetter((e) => {
                        var r = e * i,
                          o = (e + 1) * i - 1;
                        if (
                          ((o = Math.min(o, n - 1)),
                          void 0 === s.chunks[e] &&
                            (s.chunks[e] = ((e, r) => {
                              if (e > r)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    r +
                                    ") or no bytes requested!"
                                );
                              if (r > n - 1)
                                throw new Error(
                                  "only " +
                                    n +
                                    " bytes available! programmer error!"
                                );
                              var o = new XMLHttpRequest();
                              if (
                                (o.open("GET", t, !1),
                                n !== i &&
                                  o.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + r
                                  ),
                                (o.responseType = "arraybuffer"),
                                o.overrideMimeType &&
                                  o.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                o.send(null),
                                !(
                                  (o.status >= 200 && o.status < 300) ||
                                  304 === o.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + t + ". Status: " + o.status
                                );
                              return void 0 !== o.response
                                ? new Uint8Array(o.response || [])
                                : intArrayFromString(o.responseText || "", !0);
                            })(r, o)),
                          void 0 === s.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return s.chunks[e];
                      }),
                        (!a && n) ||
                          ((i = n = 1),
                          (n = this.getter(0).length),
                          (i = n),
                          out(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = n),
                        (this._chunkSize = i),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var i = new a();
                    Object.defineProperties(i, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var s = { isDevice: !1, contents: i };
                  } else s = { isDevice: !1, url: t };
                  var c = FS.createFile(e, r, s, n, o);
                  s.contents
                    ? (c.contents = s.contents)
                    : s.url && ((c.contents = null), (c.url = s.url)),
                    Object.defineProperties(c, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var u = {};
                  function l(e, r, t, n, o) {
                    var a = e.node.contents;
                    if (o >= a.length) return 0;
                    var i = Math.min(a.length - o, n);
                    if (a.slice)
                      for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                    else for (s = 0; s < i; s++) r[t + s] = a.get(o + s);
                    return i;
                  }
                  return (
                    Object.keys(c.stream_ops).forEach((e) => {
                      var r = c.stream_ops[e];
                      u[e] = function () {
                        return FS.forceLoadFile(c), r.apply(null, arguments);
                      };
                    }),
                    (u.read = (e, r, t, n, o) => (
                      FS.forceLoadFile(c), l(e, r, t, n, o)
                    )),
                    (u.mmap = (e, r, t, n, o) => {
                      FS.forceLoadFile(c);
                      var a = mmapAlloc(r);
                      if (!a) throw new FS.ErrnoError(48);
                      return l(e, HEAP8, a, r, t), { ptr: a, allocated: !0 };
                    }),
                    (c.stream_ops = u),
                    c
                  );
                },
                createPreloadedFile: (e, r, t, n, o, a, i, s, c, u) => {
                  var l = r ? PATH_FS.resolve(PATH.join2(e, r)) : e,
                    d = getUniqueRunDependency("cp " + l);
                  function f(t) {
                    function f(t) {
                      u && u(),
                        s || FS.createDataFile(e, r, t, n, o, c),
                        a && a(),
                        removeRunDependency(d);
                    }
                    Browser.handledByPreloadPlugin(t, l, f, () => {
                      i && i(), removeRunDependency(d);
                    }) || f(t);
                  }
                  addRunDependency(d),
                    "string" == typeof t ? asyncLoad(t, (e) => f(e), i) : f(t);
                },
                indexedDB: () =>
                  window.indexedDB ||
                  window.mozIndexedDB ||
                  window.webkitIndexedDB ||
                  window.msIndexedDB,
                DB_NAME: () => "EM_FS_" + window.location.pathname,
                DB_VERSION: 20,
                DB_STORE_NAME: "FILE_DATA",
                saveFilesToDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = () => {
                    out("creating db"),
                      o.result.createObjectStore(FS.DB_STORE_NAME);
                  }),
                    (o.onsuccess = () => {
                      var n = o.result.transaction(
                          [FS.DB_STORE_NAME],
                          "readwrite"
                        ),
                        a = n.objectStore(FS.DB_STORE_NAME),
                        i = 0,
                        s = 0,
                        c = e.length;
                      function u() {
                        0 == s ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = a.put(FS.analyzePath(e).object.contents, e);
                        (r.onsuccess = () => {
                          ++i + s == c && u();
                        }),
                          (r.onerror = () => {
                            s++, i + s == c && u();
                          });
                      }),
                        (n.onerror = t);
                    }),
                    (o.onerror = t);
                },
                loadFilesFromDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = t),
                    (o.onsuccess = () => {
                      var n = o.result;
                      try {
                        var a = n.transaction([FS.DB_STORE_NAME], "readonly");
                      } catch (e) {
                        return void t(e);
                      }
                      var i = a.objectStore(FS.DB_STORE_NAME),
                        s = 0,
                        c = 0,
                        u = e.length;
                      function l() {
                        0 == c ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = i.get(e);
                        (r.onsuccess = () => {
                          FS.analyzePath(e).exists && FS.unlink(e),
                            FS.createDataFile(
                              PATH.dirname(e),
                              PATH.basename(e),
                              r.result,
                              !0,
                              !0,
                              !0
                            ),
                            ++s + c == u && l();
                        }),
                          (r.onerror = () => {
                            c++, s + c == u && l();
                          });
                      }),
                        (a.onerror = t);
                    }),
                    (o.onerror = t);
                },
              },
              SYSCALLS = {
                DEFAULT_POLLMASK: 5,
                calculateAt: function (e, r, t) {
                  if (PATH.isAbs(r)) return r;
                  var n;
                  if (
                    ((n =
                      -100 === e ? FS.cwd() : SYSCALLS.getStreamFromFD(e).path),
                    0 == r.length)
                  ) {
                    if (!t) throw new FS.ErrnoError(44);
                    return n;
                  }
                  return PATH.join2(n, r);
                },
                doStat: function (e, r, t) {
                  try {
                    var n = e(r);
                  } catch (e) {
                    if (
                      e &&
                      e.node &&
                      PATH.normalize(r) !== PATH.normalize(FS.getPath(e.node))
                    )
                      return -54;
                    throw e;
                  }
                  return (
                    (HEAP32[t >> 2] = n.dev),
                    (HEAP32[(t + 8) >> 2] = n.ino),
                    (HEAP32[(t + 12) >> 2] = n.mode),
                    (HEAPU32[(t + 16) >> 2] = n.nlink),
                    (HEAP32[(t + 20) >> 2] = n.uid),
                    (HEAP32[(t + 24) >> 2] = n.gid),
                    (HEAP32[(t + 28) >> 2] = n.rdev),
                    (tempI64 = [
                      n.size >>> 0,
                      ((tempDouble = n.size),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 40) >> 2] = tempI64[0]),
                    (HEAP32[(t + 44) >> 2] = tempI64[1]),
                    (HEAP32[(t + 48) >> 2] = 4096),
                    (HEAP32[(t + 52) >> 2] = n.blocks),
                    (tempI64 = [
                      Math.floor(n.atime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.atime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 56) >> 2] = tempI64[0]),
                    (HEAP32[(t + 60) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 64) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.mtime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.mtime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 72) >> 2] = tempI64[0]),
                    (HEAP32[(t + 76) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 80) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.ctime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.ctime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 88) >> 2] = tempI64[0]),
                    (HEAP32[(t + 92) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 96) >> 2] = 0),
                    (tempI64 = [
                      n.ino >>> 0,
                      ((tempDouble = n.ino),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 104) >> 2] = tempI64[0]),
                    (HEAP32[(t + 108) >> 2] = tempI64[1]),
                    0
                  );
                },
                doMsync: function (e, r, t, n, o) {
                  if (!FS.isFile(r.node.mode)) throw new FS.ErrnoError(43);
                  if (2 & n) return 0;
                  var a = HEAPU8.slice(e, e + t);
                  FS.msync(r, a, o, t, n);
                },
                varargs: void 0,
                get: function () {
                  return (
                    (SYSCALLS.varargs += 4), HEAP32[(SYSCALLS.varargs - 4) >> 2]
                  );
                },
                getStr: function (e) {
                  return UTF8ToString(e);
                },
                getStreamFromFD: function (e) {
                  var r = FS.getStream(e);
                  if (!r) throw new FS.ErrnoError(8);
                  return r;
                },
              };
            function ___syscall_fcntl64(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 0:
                    return (o = SYSCALLS.get()) < 0
                      ? -28
                      : FS.createStream(n, o).fd;
                  case 1:
                  case 2:
                  case 6:
                  case 7:
                    return 0;
                  case 3:
                    return n.flags;
                  case 4:
                    var o = SYSCALLS.get();
                    return (n.flags |= o), 0;
                  case 5:
                    return (o = SYSCALLS.get()), (HEAP16[(o + 0) >> 1] = 2), 0;
                  case 16:
                  case 8:
                  default:
                    return -28;
                  case 9:
                    return setErrNo(28), -1;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_getcwd(e, r) {
              try {
                if (0 === r) return -28;
                var t = FS.cwd(),
                  n = lengthBytesUTF8(t) + 1;
                return r < n ? -68 : (stringToUTF8(t, e, r), n);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_ioctl(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 21509:
                  case 21505:
                  case 21510:
                  case 21511:
                  case 21512:
                  case 21506:
                  case 21507:
                  case 21508:
                  case 21523:
                  case 21524:
                    return n.tty ? 0 : -59;
                  case 21519:
                    if (!n.tty) return -59;
                    var o = SYSCALLS.get();
                    return (HEAP32[o >> 2] = 0), 0;
                  case 21520:
                    return n.tty ? -28 : -59;
                  case 21531:
                    return (o = SYSCALLS.get()), FS.ioctl(n, r, o);
                  default:
                    return -28;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_openat(e, r, t, n) {
              SYSCALLS.varargs = n;
              try {
                (r = SYSCALLS.getStr(r)), (r = SYSCALLS.calculateAt(e, r));
                var o = n ? SYSCALLS.get() : 0;
                return FS.open(r, t, o).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_readlinkat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  n <= 0)
                )
                  return -28;
                var o = FS.readlink(r),
                  a = Math.min(n, lengthBytesUTF8(o)),
                  i = HEAP8[t + a];
                return stringToUTF8(o, t, n + 1), (HEAP8[t + a] = i), a;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_stat64(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.stat, e, r);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function readI53FromI64(e) {
              return HEAPU32[e >> 2] + 4294967296 * HEAP32[(e + 4) >> 2];
            }
            function __localtime_js(e, r) {
              var t = new Date(1e3 * readI53FromI64(e));
              (HEAP32[r >> 2] = t.getSeconds()),
                (HEAP32[(r + 4) >> 2] = t.getMinutes()),
                (HEAP32[(r + 8) >> 2] = t.getHours()),
                (HEAP32[(r + 12) >> 2] = t.getDate()),
                (HEAP32[(r + 16) >> 2] = t.getMonth()),
                (HEAP32[(r + 20) >> 2] = t.getFullYear() - 1900),
                (HEAP32[(r + 24) >> 2] = t.getDay());
              var n = new Date(t.getFullYear(), 0, 1),
                o = ((t.getTime() - n.getTime()) / 864e5) | 0;
              (HEAP32[(r + 28) >> 2] = o),
                (HEAP32[(r + 36) >> 2] = -60 * t.getTimezoneOffset());
              var a = new Date(t.getFullYear(), 6, 1).getTimezoneOffset(),
                i = n.getTimezoneOffset(),
                s = 0 | (a != i && t.getTimezoneOffset() == Math.min(i, a));
              HEAP32[(r + 32) >> 2] = s;
            }
            function allocateUTF8(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = _malloc(r);
              return t && stringToUTF8Array(e, HEAP8, t, r), t;
            }
            function _tzset_impl(e, r, t) {
              var n = new Date().getFullYear(),
                o = new Date(n, 0, 1),
                a = new Date(n, 6, 1),
                i = o.getTimezoneOffset(),
                s = a.getTimezoneOffset(),
                c = Math.max(i, s);
              function u(e) {
                var r = e.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                return r ? r[1] : "GMT";
              }
              (HEAP32[e >> 2] = 60 * c), (HEAP32[r >> 2] = Number(i != s));
              var l = u(o),
                d = u(a),
                f = allocateUTF8(l),
                _ = allocateUTF8(d);
              s < i
                ? ((HEAPU32[t >> 2] = f), (HEAPU32[(t + 4) >> 2] = _))
                : ((HEAPU32[t >> 2] = _), (HEAPU32[(t + 4) >> 2] = f));
            }
            function __tzset_js(e, r, t) {
              __tzset_js.called ||
                ((__tzset_js.called = !0), _tzset_impl(e, r, t));
            }
            function _abort() {
              abort("");
            }
            function _emscripten_date_now() {
              return Date.now();
            }
            function _emscripten_memcpy_big(e, r, t) {
              HEAPU8.copyWithin(e, r, r + t);
            }
            function getHeapMax() {
              return 2147483648;
            }
            function emscripten_realloc_buffer(e) {
              try {
                return (
                  wasmMemory.grow((e - buffer.byteLength + 65535) >>> 16),
                  updateGlobalBufferAndViews(wasmMemory.buffer),
                  1
                );
              } catch (e) {}
            }
            function _emscripten_resize_heap(e) {
              var r = HEAPU8.length;
              e >>>= 0;
              var t,
                n = getHeapMax();
              if (e > n) return !1;
              for (var o = 1; o <= 4; o *= 2) {
                var a = r * (1 + 0.2 / o);
                if (
                  ((a = Math.min(a, e + 100663296)),
                  emscripten_realloc_buffer(
                    Math.min(
                      n,
                      (t = Math.max(e, a)) + ((65536 - (t % 65536)) % 65536)
                    )
                  ))
                )
                  return !0;
              }
              return !1;
            }
            var ENV = {};
            function getExecutableName() {
              return thisProgram || "./this.program";
            }
            function getEnvStrings() {
              if (!getEnvStrings.strings) {
                var e = {
                  USER: "web_user",
                  LOGNAME: "web_user",
                  PATH: "/",
                  PWD: "/",
                  HOME: "/home/web_user",
                  LANG:
                    (
                      ("object" == typeof navigator &&
                        navigator.languages &&
                        navigator.languages[0]) ||
                      "C"
                    ).replace("-", "_") + ".UTF-8",
                  _: getExecutableName(),
                };
                for (var r in ENV)
                  void 0 === ENV[r] ? delete e[r] : (e[r] = ENV[r]);
                var t = [];
                for (var r in e) t.push(r + "=" + e[r]);
                getEnvStrings.strings = t;
              }
              return getEnvStrings.strings;
            }
            function writeAsciiToMemory(e, r, t) {
              for (var n = 0; n < e.length; ++n)
                HEAP8[r++ >> 0] = e.charCodeAt(n);
              t || (HEAP8[r >> 0] = 0);
            }
            function _environ_get(e, r) {
              var t = 0;
              return (
                getEnvStrings().forEach(function (n, o) {
                  var a = r + t;
                  (HEAPU32[(e + 4 * o) >> 2] = a),
                    writeAsciiToMemory(n, a),
                    (t += n.length + 1);
                }),
                0
              );
            }
            function _environ_sizes_get(e, r) {
              var t = getEnvStrings();
              HEAPU32[e >> 2] = t.length;
              var n = 0;
              return (
                t.forEach(function (e) {
                  n += e.length + 1;
                }),
                (HEAPU32[r >> 2] = n),
                0
              );
            }
            function _proc_exit(e) {
              (EXITSTATUS = e),
                keepRuntimeAlive() ||
                  (Module.onExit && Module.onExit(e), (ABORT = !0)),
                quit_(e, new ExitStatus(e));
            }
            function exitJS(e, r) {
              (EXITSTATUS = e), _proc_exit(e);
            }
            var _exit = exitJS;
            function _fd_close(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return FS.close(r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doReadv(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.read(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                if (((o += c), c < s)) break;
              }
              return o;
            }
            function _fd_read(e, r, t, n) {
              try {
                var o = doReadv(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function convertI32PairToI53Checked(e, r) {
              return (r + 2097152) >>> 0 < 4194305 - !!e
                ? (e >>> 0) + 4294967296 * r
                : NaN;
            }
            function _fd_seek(e, r, t, n, o) {
              try {
                var a = convertI32PairToI53Checked(r, t);
                if (isNaN(a)) return 61;
                var i = SYSCALLS.getStreamFromFD(e);
                return (
                  FS.llseek(i, a, n),
                  (tempI64 = [
                    i.position >>> 0,
                    ((tempDouble = i.position),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                  (HEAP32[o >> 2] = tempI64[0]),
                  (HEAP32[(o + 4) >> 2] = tempI64[1]),
                  i.getdents && 0 === a && 0 === n && (i.getdents = null),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doWritev(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.write(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                o += c;
              }
              return o;
            }
            function _fd_write(e, r, t, n) {
              try {
                var o = doWritev(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function _llvm_eh_typeid_for(e) {
              return e;
            }
            function __isLeapYear(e) {
              return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
            }
            function __arraySum(e, r) {
              for (var t = 0, n = 0; n <= r; t += e[n++]);
              return t;
            }
            var __MONTH_DAYS_LEAP = [
                31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ],
              __MONTH_DAYS_REGULAR = [
                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ];
            function __addDays(e, r) {
              for (var t = new Date(e.getTime()); r > 0; ) {
                var n = __isLeapYear(t.getFullYear()),
                  o = t.getMonth(),
                  a = (n ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[o];
                if (!(r > a - t.getDate()))
                  return t.setDate(t.getDate() + r), t;
                (r -= a - t.getDate() + 1),
                  t.setDate(1),
                  o < 11
                    ? t.setMonth(o + 1)
                    : (t.setMonth(0), t.setFullYear(t.getFullYear() + 1));
              }
              return t;
            }
            function writeArrayToMemory(e, r) {
              HEAP8.set(e, r);
            }
            function _strftime(e, r, t, n) {
              var o = HEAP32[(n + 40) >> 2],
                a = {
                  tm_sec: HEAP32[n >> 2],
                  tm_min: HEAP32[(n + 4) >> 2],
                  tm_hour: HEAP32[(n + 8) >> 2],
                  tm_mday: HEAP32[(n + 12) >> 2],
                  tm_mon: HEAP32[(n + 16) >> 2],
                  tm_year: HEAP32[(n + 20) >> 2],
                  tm_wday: HEAP32[(n + 24) >> 2],
                  tm_yday: HEAP32[(n + 28) >> 2],
                  tm_isdst: HEAP32[(n + 32) >> 2],
                  tm_gmtoff: HEAP32[(n + 36) >> 2],
                  tm_zone: o ? UTF8ToString(o) : "",
                },
                i = UTF8ToString(t),
                s = {
                  "%c": "%a %b %d %H:%M:%S %Y",
                  "%D": "%m/%d/%y",
                  "%F": "%Y-%m-%d",
                  "%h": "%b",
                  "%r": "%I:%M:%S %p",
                  "%R": "%H:%M",
                  "%T": "%H:%M:%S",
                  "%x": "%m/%d/%y",
                  "%X": "%H:%M:%S",
                  "%Ec": "%c",
                  "%EC": "%C",
                  "%Ex": "%m/%d/%y",
                  "%EX": "%H:%M:%S",
                  "%Ey": "%y",
                  "%EY": "%Y",
                  "%Od": "%d",
                  "%Oe": "%e",
                  "%OH": "%H",
                  "%OI": "%I",
                  "%Om": "%m",
                  "%OM": "%M",
                  "%OS": "%S",
                  "%Ou": "%u",
                  "%OU": "%U",
                  "%OV": "%V",
                  "%Ow": "%w",
                  "%OW": "%W",
                  "%Oy": "%y",
                };
              for (var c in s) i = i.replace(new RegExp(c, "g"), s[c]);
              var u = [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ],
                l = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
              function d(e, r, t) {
                for (
                  var n = "number" == typeof e ? e.toString() : e || "";
                  n.length < r;

                )
                  n = t[0] + n;
                return n;
              }
              function f(e, r) {
                return d(e, r, "0");
              }
              function _(e, r) {
                function t(e) {
                  return e < 0 ? -1 : e > 0 ? 1 : 0;
                }
                var n;
                return (
                  0 === (n = t(e.getFullYear() - r.getFullYear())) &&
                    0 === (n = t(e.getMonth() - r.getMonth())) &&
                    (n = t(e.getDate() - r.getDate())),
                  n
                );
              }
              function m(e) {
                switch (e.getDay()) {
                  case 0:
                    return new Date(e.getFullYear() - 1, 11, 29);
                  case 1:
                    return e;
                  case 2:
                    return new Date(e.getFullYear(), 0, 3);
                  case 3:
                    return new Date(e.getFullYear(), 0, 2);
                  case 4:
                    return new Date(e.getFullYear(), 0, 1);
                  case 5:
                    return new Date(e.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(e.getFullYear() - 1, 11, 30);
                }
              }
              function p(e) {
                var r = __addDays(new Date(e.tm_year + 1900, 0, 1), e.tm_yday),
                  t = new Date(r.getFullYear(), 0, 4),
                  n = new Date(r.getFullYear() + 1, 0, 4),
                  o = m(t),
                  a = m(n);
                return _(o, r) <= 0
                  ? _(a, r) <= 0
                    ? r.getFullYear() + 1
                    : r.getFullYear()
                  : r.getFullYear() - 1;
              }
              var S = {
                "%a": function (e) {
                  return u[e.tm_wday].substring(0, 3);
                },
                "%A": function (e) {
                  return u[e.tm_wday];
                },
                "%b": function (e) {
                  return l[e.tm_mon].substring(0, 3);
                },
                "%B": function (e) {
                  return l[e.tm_mon];
                },
                "%C": function (e) {
                  return f(((e.tm_year + 1900) / 100) | 0, 2);
                },
                "%d": function (e) {
                  return f(e.tm_mday, 2);
                },
                "%e": function (e) {
                  return d(e.tm_mday, 2, " ");
                },
                "%g": function (e) {
                  return p(e).toString().substring(2);
                },
                "%G": function (e) {
                  return p(e);
                },
                "%H": function (e) {
                  return f(e.tm_hour, 2);
                },
                "%I": function (e) {
                  var r = e.tm_hour;
                  return 0 == r ? (r = 12) : r > 12 && (r -= 12), f(r, 2);
                },
                "%j": function (e) {
                  return f(
                    e.tm_mday +
                      __arraySum(
                        __isLeapYear(e.tm_year + 1900)
                          ? __MONTH_DAYS_LEAP
                          : __MONTH_DAYS_REGULAR,
                        e.tm_mon - 1
                      ),
                    3
                  );
                },
                "%m": function (e) {
                  return f(e.tm_mon + 1, 2);
                },
                "%M": function (e) {
                  return f(e.tm_min, 2);
                },
                "%n": function () {
                  return "\n";
                },
                "%p": function (e) {
                  return e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM";
                },
                "%S": function (e) {
                  return f(e.tm_sec, 2);
                },
                "%t": function () {
                  return "\t";
                },
                "%u": function (e) {
                  return e.tm_wday || 7;
                },
                "%U": function (e) {
                  var r = e.tm_yday + 7 - e.tm_wday;
                  return f(Math.floor(r / 7), 2);
                },
                "%V": function (e) {
                  var r = Math.floor(
                    (e.tm_yday + 7 - ((e.tm_wday + 6) % 7)) / 7
                  );
                  if (((e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && r++, r)) {
                    if (53 == r) {
                      var t = (e.tm_wday + 371 - e.tm_yday) % 7;
                      4 == t || (3 == t && __isLeapYear(e.tm_year)) || (r = 1);
                    }
                  } else {
                    r = 52;
                    var n = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                    (4 == n ||
                      (5 == n && __isLeapYear((e.tm_year % 400) - 1))) &&
                      r++;
                  }
                  return f(r, 2);
                },
                "%w": function (e) {
                  return e.tm_wday;
                },
                "%W": function (e) {
                  var r = e.tm_yday + 7 - ((e.tm_wday + 6) % 7);
                  return f(Math.floor(r / 7), 2);
                },
                "%y": function (e) {
                  return (e.tm_year + 1900).toString().substring(2);
                },
                "%Y": function (e) {
                  return e.tm_year + 1900;
                },
                "%z": function (e) {
                  var r = e.tm_gmtoff,
                    t = r >= 0;
                  return (
                    (r = ((r = Math.abs(r) / 60) / 60) * 100 + (r % 60)),
                    (t ? "+" : "-") + String("0000" + r).slice(-4)
                  );
                },
                "%Z": function (e) {
                  return e.tm_zone;
                },
                "%%": function () {
                  return "%";
                },
              };
              for (var c in ((i = i.replace(/%%/g, "\0\0")), S))
                i.includes(c) && (i = i.replace(new RegExp(c, "g"), S[c](a)));
              var E = intArrayFromString((i = i.replace(/\0\0/g, "%")), !1);
              return E.length > r
                ? 0
                : (writeArrayToMemory(E, e), E.length - 1);
            }
            function _strftime_l(e, r, t, n, o) {
              return _strftime(e, r, t, n);
            }
            function handleException(e) {
              if (e instanceof ExitStatus || "unwind" == e) return EXITSTATUS;
              quit_(1, e);
            }
            function allocateUTF8OnStack(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = stackAlloc(r);
              return stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSROOT = {
                staticInit: () => {
                  FS.root = null;
                  let opts = (Module.ROOT && Module.ROOT.opts) || {},
                    type = (Module.ROOT && Module.ROOT.type) || "MEMFS";
                  "string" == typeof type
                    ? (type = FS.filesystems[type] || eval(type))
                    : "function" == typeof type && (type = type(Module)),
                    FS.mount(type, opts, "/"),
                    FSROOT.createDefaultMountPoints();
                  const restore_mkdir = FSROOT.safeMkdir();
                  FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    restore_mkdir();
                },
                createDefaultMountPoints: () => {
                  FS.mkdirTree("/dev"),
                    FS.mount(MEMFS, {}, "/dev"),
                    FS.mkdirTree("/proc/self"),
                    FS.mount(MEMFS, {}, "/proc/self");
                },
                safeMkdir: () => {
                  const e = FS.mkdir;
                  return (
                    (FS.mkdir = (r, t) => {
                      try {
                        return e(r, t);
                      } catch {
                        return FS.lookupPath(r, { follow: !0 }).node;
                      }
                    }),
                    () => {
                      FS.mkdir = e;
                    }
                  );
                },
              },
              FSNode = function (e, r, t, n) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = FS.nextInode++),
                  (this.name = r),
                  (this.mode = t),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = n);
              },
              readMode = 365,
              writeMode = 146;
            Object.defineProperties(FSNode.prototype, {
              read: {
                get: function () {
                  return (this.mode & readMode) === readMode;
                },
                set: function (e) {
                  e ? (this.mode |= readMode) : (this.mode &= ~readMode);
                },
              },
              write: {
                get: function () {
                  return (this.mode & writeMode) === writeMode;
                },
                set: function (e) {
                  e ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
                },
              },
              isFolder: {
                get: function () {
                  return FS.isDir(this.mode);
                },
              },
              isDevice: {
                get: function () {
                  return FS.isChrdev(this.mode);
                },
              },
            }),
              (FS.FSNode = FSNode),
              FS.staticInit(),
              (ERRNO_CODES = {
                EPERM: 63,
                ENOENT: 44,
                ESRCH: 71,
                EINTR: 27,
                EIO: 29,
                ENXIO: 60,
                E2BIG: 1,
                ENOEXEC: 45,
                EBADF: 8,
                ECHILD: 12,
                EAGAIN: 6,
                EWOULDBLOCK: 6,
                ENOMEM: 48,
                EACCES: 2,
                EFAULT: 21,
                ENOTBLK: 105,
                EBUSY: 10,
                EEXIST: 20,
                EXDEV: 75,
                ENODEV: 43,
                ENOTDIR: 54,
                EISDIR: 31,
                EINVAL: 28,
                ENFILE: 41,
                EMFILE: 33,
                ENOTTY: 59,
                ETXTBSY: 74,
                EFBIG: 22,
                ENOSPC: 51,
                ESPIPE: 70,
                EROFS: 69,
                EMLINK: 34,
                EPIPE: 64,
                EDOM: 18,
                ERANGE: 68,
                ENOMSG: 49,
                EIDRM: 24,
                ECHRNG: 106,
                EL2NSYNC: 156,
                EL3HLT: 107,
                EL3RST: 108,
                ELNRNG: 109,
                EUNATCH: 110,
                ENOCSI: 111,
                EL2HLT: 112,
                EDEADLK: 16,
                ENOLCK: 46,
                EBADE: 113,
                EBADR: 114,
                EXFULL: 115,
                ENOANO: 104,
                EBADRQC: 103,
                EBADSLT: 102,
                EDEADLOCK: 16,
                EBFONT: 101,
                ENOSTR: 100,
                ENODATA: 116,
                ETIME: 117,
                ENOSR: 118,
                ENONET: 119,
                ENOPKG: 120,
                EREMOTE: 121,
                ENOLINK: 47,
                EADV: 122,
                ESRMNT: 123,
                ECOMM: 124,
                EPROTO: 65,
                EMULTIHOP: 36,
                EDOTDOT: 125,
                EBADMSG: 9,
                ENOTUNIQ: 126,
                EBADFD: 127,
                EREMCHG: 128,
                ELIBACC: 129,
                ELIBBAD: 130,
                ELIBSCN: 131,
                ELIBMAX: 132,
                ELIBEXEC: 133,
                ENOSYS: 52,
                ENOTEMPTY: 55,
                ENAMETOOLONG: 37,
                ELOOP: 32,
                EOPNOTSUPP: 138,
                EPFNOSUPPORT: 139,
                ECONNRESET: 15,
                ENOBUFS: 42,
                EAFNOSUPPORT: 5,
                EPROTOTYPE: 67,
                ENOTSOCK: 57,
                ENOPROTOOPT: 50,
                ESHUTDOWN: 140,
                ECONNREFUSED: 14,
                EADDRINUSE: 3,
                ECONNABORTED: 13,
                ENETUNREACH: 40,
                ENETDOWN: 38,
                ETIMEDOUT: 73,
                EHOSTDOWN: 142,
                EHOSTUNREACH: 23,
                EINPROGRESS: 26,
                EALREADY: 7,
                EDESTADDRREQ: 17,
                EMSGSIZE: 35,
                EPROTONOSUPPORT: 66,
                ESOCKTNOSUPPORT: 137,
                EADDRNOTAVAIL: 4,
                ENETRESET: 39,
                EISCONN: 30,
                ENOTCONN: 53,
                ETOOMANYREFS: 141,
                EUSERS: 136,
                EDQUOT: 19,
                ESTALE: 72,
                ENOTSUP: 138,
                ENOMEDIUM: 148,
                EILSEQ: 25,
                EOVERFLOW: 61,
                ECANCELED: 11,
                ENOTRECOVERABLE: 56,
                EOWNERDEAD: 62,
                ESTRPIPE: 135,
              }),
              FSROOT.staticInit();
            var asmLibraryArg = {
                i: ___cxa_allocate_exception,
                k: ___cxa_begin_catch,
                w: ___cxa_end_catch,
                a: ___cxa_find_matching_catch_2,
                e: ___cxa_find_matching_catch_3,
                t: ___cxa_find_matching_catch_4,
                p: ___cxa_find_matching_catch_5,
                u: ___cxa_free_exception,
                D: ___cxa_rethrow,
                q: ___cxa_throw,
                ca: ___cxa_uncaught_exceptions,
                b: ___resumeException,
                I: ___syscall_fcntl64,
                Z: ___syscall_getcwd,
                aa: ___syscall_ioctl,
                ba: ___syscall_openat,
                Y: ___syscall_readlinkat,
                X: ___syscall_stat64,
                fa: __localtime_js,
                ga: __tzset_js,
                m: _abort,
                ea: _emscripten_date_now,
                ha: _emscripten_memcpy_big,
                da: _emscripten_resize_heap,
                ia: _environ_get,
                ja: _environ_sizes_get,
                ka: _exit,
                H: _fd_close,
                $: _fd_read,
                L: _fd_seek,
                J: _fd_write,
                E: invoke_diii,
                F: invoke_fiii,
                s: invoke_i,
                g: invoke_ii,
                d: invoke_iii,
                h: invoke_iiii,
                o: invoke_iiiii,
                z: invoke_iiiiii,
                x: invoke_iiiiiii,
                G: invoke_iiiiiiii,
                B: invoke_iiiiiiiiiiii,
                N: invoke_iij,
                V: invoke_iijij,
                O: invoke_iji,
                W: invoke_ji,
                P: invoke_jii,
                Q: invoke_jiii,
                K: invoke_jiiii,
                R: invoke_jiiiii,
                T: invoke_jiji,
                j: invoke_v,
                n: invoke_vi,
                c: invoke_vii,
                f: invoke_viii,
                r: invoke_viiii,
                C: invoke_viiiii,
                v: invoke_viiiiiii,
                y: invoke_viiiiiiiiii,
                A: invoke_viiiiiiiiiiiiiii,
                S: invoke_viij,
                U: invoke_vij,
                M: invoke_vji,
                l: _llvm_eh_typeid_for,
                _: _strftime_l,
              },
              asm = createWasm(),
              ___wasm_call_ctors = (Module.___wasm_call_ctors = function () {
                return (___wasm_call_ctors = Module.___wasm_call_ctors =
                  Module.asm.ma).apply(null, arguments);
              }),
              _main = (Module._main = function () {
                return (_main = Module._main = Module.asm.na).apply(
                  null,
                  arguments
                );
              }),
              _malloc = (Module._malloc = function () {
                return (_malloc = Module._malloc = Module.asm.pa).apply(
                  null,
                  arguments
                );
              }),
              _free = (Module._free = function () {
                return (_free = Module._free = Module.asm.qa).apply(
                  null,
                  arguments
                );
              }),
              ___errno_location = (Module.___errno_location = function () {
                return (___errno_location = Module.___errno_location =
                  Module.asm.ra).apply(null, arguments);
              }),
              _setThrew = (Module._setThrew = function () {
                return (_setThrew = Module._setThrew = Module.asm.sa).apply(
                  null,
                  arguments
                );
              }),
              setTempRet0 = (Module.setTempRet0 = function () {
                return (setTempRet0 = Module.setTempRet0 = Module.asm.ta).apply(
                  null,
                  arguments
                );
              }),
              stackSave = (Module.stackSave = function () {
                return (stackSave = Module.stackSave = Module.asm.ua).apply(
                  null,
                  arguments
                );
              }),
              stackRestore = (Module.stackRestore = function () {
                return (stackRestore = Module.stackRestore =
                  Module.asm.va).apply(null, arguments);
              }),
              stackAlloc = (Module.stackAlloc = function () {
                return (stackAlloc = Module.stackAlloc = Module.asm.wa).apply(
                  null,
                  arguments
                );
              }),
              ___cxa_can_catch = (Module.___cxa_can_catch = function () {
                return (___cxa_can_catch = Module.___cxa_can_catch =
                  Module.asm.xa).apply(null, arguments);
              }),
              ___cxa_is_pointer_type = (Module.___cxa_is_pointer_type =
                function () {
                  return (___cxa_is_pointer_type =
                    Module.___cxa_is_pointer_type =
                      Module.asm.ya).apply(null, arguments);
                }),
              dynCall_ji = (Module.dynCall_ji = function () {
                return (dynCall_ji = Module.dynCall_ji = Module.asm.za).apply(
                  null,
                  arguments
                );
              }),
              dynCall_iijij = (Module.dynCall_iijij = function () {
                return (dynCall_iijij = Module.dynCall_iijij =
                  Module.asm.Aa).apply(null, arguments);
              }),
              dynCall_vij = (Module.dynCall_vij = function () {
                return (dynCall_vij = Module.dynCall_vij = Module.asm.Ba).apply(
                  null,
                  arguments
                );
              }),
              dynCall_jiji = (Module.dynCall_jiji = function () {
                return (dynCall_jiji = Module.dynCall_jiji =
                  Module.asm.Ca).apply(null, arguments);
              }),
              dynCall_viij = (Module.dynCall_viij = function () {
                return (dynCall_viij = Module.dynCall_viij =
                  Module.asm.Da).apply(null, arguments);
              }),
              dynCall_jiii = (Module.dynCall_jiii = function () {
                return (dynCall_jiii = Module.dynCall_jiii =
                  Module.asm.Ea).apply(null, arguments);
              }),
              dynCall_jiiiii = (Module.dynCall_jiiiii = function () {
                return (dynCall_jiiiii = Module.dynCall_jiiiii =
                  Module.asm.Fa).apply(null, arguments);
              }),
              dynCall_iij = (Module.dynCall_iij = function () {
                return (dynCall_iij = Module.dynCall_iij = Module.asm.Ga).apply(
                  null,
                  arguments
                );
              }),
              dynCall_jii = (Module.dynCall_jii = function () {
                return (dynCall_jii = Module.dynCall_jii = Module.asm.Ha).apply(
                  null,
                  arguments
                );
              }),
              dynCall_vji = (Module.dynCall_vji = function () {
                return (dynCall_vji = Module.dynCall_vji = Module.asm.Ia).apply(
                  null,
                  arguments
                );
              }),
              dynCall_iji = (Module.dynCall_iji = function () {
                return (dynCall_iji = Module.dynCall_iji = Module.asm.Ja).apply(
                  null,
                  arguments
                );
              }),
              dynCall_jiiii = (Module.dynCall_jiiii = function () {
                return (dynCall_jiiii = Module.dynCall_jiiii =
                  Module.asm.Ka).apply(null, arguments);
              }),
              calledRun;
            function invoke_iii(e, r, t) {
              var n = stackSave();
              try {
                return getWasmTableEntry(e)(r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vi(e, r) {
              var t = stackSave();
              try {
                getWasmTableEntry(e)(r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_ii(e, r) {
              var t = stackSave();
              try {
                return getWasmTableEntry(e)(r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viii(e, r, t, n) {
              var o = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiii(e, r, t, n) {
              var o = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_v(e) {
              var r = stackSave();
              try {
                getWasmTableEntry(e)();
              } catch (e) {
                if ((stackRestore(r), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiii(e, r, t, n, o) {
              var a = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiii(e, r, t, n, o, a) {
              var i = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a);
              } catch (e) {
                if ((stackRestore(i), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vii(e, r, t) {
              var n = stackSave();
              try {
                getWasmTableEntry(e)(r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiii(e, r, t, n, o, a) {
              var i = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a);
              } catch (e) {
                if ((stackRestore(i), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiii(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiii(e, r, t, n, o, a, i, s) {
              var c = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i, s);
              } catch (e) {
                if ((stackRestore(c), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiii(e, r, t, n, o) {
              var a = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_fiii(e, r, t, n) {
              var o = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_diii(e, r, t, n) {
              var o = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_i(e) {
              var r = stackSave();
              try {
                return getWasmTableEntry(e)();
              } catch (e) {
                if ((stackRestore(r), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiiii(e, r, t, n, o, a, i, s) {
              var c = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a, i, s);
              } catch (e) {
                if ((stackRestore(c), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iiiiiiiiiiii(e, r, t, n, o, a, i, s, c, u, l, d) {
              var f = stackSave();
              try {
                return getWasmTableEntry(e)(r, t, n, o, a, i, s, c, u, l, d);
              } catch (e) {
                if ((stackRestore(f), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiiiiiii(e, r, t, n, o, a, i, s, c, u, l) {
              var d = stackSave();
              try {
                getWasmTableEntry(e)(r, t, n, o, a, i, s, c, u, l);
              } catch (e) {
                if ((stackRestore(d), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viiiiiiiiiiiiiii(
              e,
              r,
              t,
              n,
              o,
              a,
              i,
              s,
              c,
              u,
              l,
              d,
              f,
              _,
              m,
              p
            ) {
              var S = stackSave();
              try {
                getWasmTableEntry(e)(
                  r,
                  t,
                  n,
                  o,
                  a,
                  i,
                  s,
                  c,
                  u,
                  l,
                  d,
                  f,
                  _,
                  m,
                  p
                );
              } catch (e) {
                if ((stackRestore(S), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_ji(e, r) {
              var t = stackSave();
              try {
                return dynCall_ji(e, r);
              } catch (e) {
                if ((stackRestore(t), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iijij(e, r, t, n, o, a, i) {
              var s = stackSave();
              try {
                return dynCall_iijij(e, r, t, n, o, a, i);
              } catch (e) {
                if ((stackRestore(s), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vij(e, r, t, n) {
              var o = stackSave();
              try {
                dynCall_vij(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiji(e, r, t, n, o) {
              var a = stackSave();
              try {
                return dynCall_jiji(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_viij(e, r, t, n, o) {
              var a = stackSave();
              try {
                dynCall_viij(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiiiii(e, r, t, n, o, a) {
              var i = stackSave();
              try {
                return dynCall_jiiiii(e, r, t, n, o, a);
              } catch (e) {
                if ((stackRestore(i), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiii(e, r, t, n) {
              var o = stackSave();
              try {
                return dynCall_jiii(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jii(e, r, t) {
              var n = stackSave();
              try {
                return dynCall_jii(e, r, t);
              } catch (e) {
                if ((stackRestore(n), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iji(e, r, t, n) {
              var o = stackSave();
              try {
                return dynCall_iji(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_iij(e, r, t, n) {
              var o = stackSave();
              try {
                return dynCall_iij(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_vji(e, r, t, n) {
              var o = stackSave();
              try {
                dynCall_vji(e, r, t, n);
              } catch (e) {
                if ((stackRestore(o), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function invoke_jiiii(e, r, t, n, o) {
              var a = stackSave();
              try {
                return dynCall_jiiii(e, r, t, n, o);
              } catch (e) {
                if ((stackRestore(a), e !== e + 0)) throw e;
                _setThrew(1, 0);
              }
            }
            function callMain(e) {
              var r = Module._main;
              (e = e || []).unshift(thisProgram);
              var t = e.length,
                n = stackAlloc(4 * (t + 1)),
                o = n >> 2;
              e.forEach((e) => {
                HEAP32[o++] = allocateUTF8OnStack(e);
              }),
                (HEAP32[o] = 0);
              try {
                var a = r(t, n);
                return exitJS(a, !0), a;
              } catch (e) {
                return handleException(e);
              }
            }
            function run(e) {
              function r() {
                calledRun ||
                  ((calledRun = !0),
                  (Module.calledRun = !0),
                  ABORT ||
                    (initRuntime(),
                    preMain(),
                    readyPromiseResolve(Module),
                    Module.onRuntimeInitialized &&
                      Module.onRuntimeInitialized(),
                    shouldRunNow && callMain(e),
                    postRun()));
              }
              (e = e || arguments_),
                runDependencies > 0 ||
                  (preRun(),
                  runDependencies > 0 ||
                    (Module.setStatus
                      ? (Module.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            Module.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
            }
            if (
              ((Module.ERRNO_CODES = ERRNO_CODES),
              (Module.allocateUTF8 = allocateUTF8),
              (Module.FS = FS),
              (Module.PROXYFS = PROXYFS),
              (dependenciesFulfilled = function e() {
                calledRun || run(), calledRun || (dependenciesFulfilled = e);
              }),
              Module.preInit)
            )
              for (
                "function" == typeof Module.preInit &&
                (Module.preInit = [Module.preInit]);
                Module.preInit.length > 0;

              )
                Module.preInit.pop()();
            var shouldRunNow = !0;
            return (
              Module.noInitialRun && (shouldRunNow = !1), run(), Module.ready
            );
          };
        })();
        const __WEBPACK_DEFAULT_EXPORT__ = Module;
      },
      6935: (
        __unused_webpack___webpack_module__,
        __webpack_exports__,
        __webpack_require__
      ) => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, {
          Z: () => __WEBPACK_DEFAULT_EXPORT__,
        });
        var Module = (() => {
          var _scriptDir =
            "file:///home/jprendes/Projects/emception/build/emception/wasm-package/wasm-package.mjs";
          return function (Module) {
            Module = Module || {};
            var Module = void 0 !== Module ? Module : {},
              readyPromiseResolve,
              readyPromiseReject;
            Module.ready = new Promise(function (e, r) {
              (readyPromiseResolve = e), (readyPromiseReject = r);
            });
            var moduleOverrides = Object.assign({}, Module),
              arguments_ = [],
              thisProgram = "./this.program",
              quit_ = (e, r) => {
                throw r;
              },
              ENVIRONMENT_IS_WEB = "object" == typeof window,
              ENVIRONMENT_IS_WORKER = "function" == typeof importScripts,
              ENVIRONMENT_IS_NODE =
                "object" == typeof process &&
                "object" == typeof process.versions &&
                "string" == typeof process.versions.node,
              scriptDirectory = "",
              read_,
              readAsync,
              readBinary,
              setWindowTitle,
              fs,
              nodePath;
            function locateFile(e) {
              return Module.locateFile
                ? Module.locateFile(e, scriptDirectory)
                : scriptDirectory + e;
            }
            function logExceptionOnExit(e) {
              e instanceof ExitStatus || err("exiting due to exception: " + e);
            }
            ENVIRONMENT_IS_NODE
              ? ((scriptDirectory = ENVIRONMENT_IS_WORKER
                  ? require("path").dirname(scriptDirectory) + "/"
                  : __dirname + "/"),
                "function" == typeof require &&
                  ((fs = require("fs")), (nodePath = require("path"))),
                (read_ = (e, r) => (
                  (e = nodePath.normalize(e)),
                  fs.readFileSync(e, r ? void 0 : "utf8")
                )),
                (readBinary = (e) => {
                  var r = read_(e, !0);
                  return r.buffer || (r = new Uint8Array(r)), r;
                }),
                (readAsync = (e, r, t) => {
                  (e = nodePath.normalize(e)),
                    fs.readFile(e, function (e, n) {
                      e ? t(e) : r(n.buffer);
                    });
                }),
                process.argv.length > 1 &&
                  (thisProgram = process.argv[1].replace(/\\/g, "/")),
                (arguments_ = process.argv.slice(2)),
                process.on("uncaughtException", function (e) {
                  if (!(e instanceof ExitStatus)) throw e;
                }),
                process.on("unhandledRejection", function (e) {
                  throw e;
                }),
                (quit_ = (e, r) => {
                  if (keepRuntimeAlive()) throw ((process.exitCode = e), r);
                  logExceptionOnExit(r), process.exit(e);
                }),
                (Module.inspect = function () {
                  return "[Emscripten Module object]";
                }))
              : (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) &&
                (ENVIRONMENT_IS_WORKER
                  ? (scriptDirectory = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (scriptDirectory = document.currentScript.src),
                _scriptDir && (scriptDirectory = _scriptDir),
                (scriptDirectory =
                  0 !== scriptDirectory.indexOf("blob:")
                    ? scriptDirectory.substr(
                        0,
                        scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") +
                          1
                      )
                    : ""),
                (read_ = (e) => {
                  var r = new XMLHttpRequest();
                  return r.open("GET", e, !1), r.send(null), r.responseText;
                }),
                ENVIRONMENT_IS_WORKER &&
                  (readBinary = (e) => {
                    var r = new XMLHttpRequest();
                    return (
                      r.open("GET", e, !1),
                      (r.responseType = "arraybuffer"),
                      r.send(null),
                      new Uint8Array(r.response)
                    );
                  }),
                (readAsync = (e, r, t) => {
                  var n = new XMLHttpRequest();
                  n.open("GET", e, !0),
                    (n.responseType = "arraybuffer"),
                    (n.onload = () => {
                      200 == n.status || (0 == n.status && n.response)
                        ? r(n.response)
                        : t();
                    }),
                    (n.onerror = t),
                    n.send(null);
                }),
                (setWindowTitle = (e) => (document.title = e)));
            var out = Module.print || console.log.bind(console),
              err = Module.printErr || console.warn.bind(console),
              wasmBinary;
            Object.assign(Module, moduleOverrides),
              (moduleOverrides = null),
              Module.arguments && (arguments_ = Module.arguments),
              Module.thisProgram && (thisProgram = Module.thisProgram),
              Module.quit && (quit_ = Module.quit),
              Module.wasmBinary && (wasmBinary = Module.wasmBinary);
            var noExitRuntime = Module.noExitRuntime || !0,
              wasmMemory;
            "object" != typeof WebAssembly &&
              abort("no native wasm support detected");
            var ABORT = !1,
              EXITSTATUS;
            function assert(e, r) {
              e || abort(r);
            }
            var UTF8Decoder =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0,
              buffer,
              HEAP8,
              HEAPU8,
              HEAP16,
              HEAPU16,
              HEAP32,
              HEAPU32,
              HEAPF32,
              HEAPF64;
            function UTF8ArrayToString(e, r, t) {
              for (var n = r + t, o = r; e[o] && !(o >= n); ) ++o;
              if (o - r > 16 && e.buffer && UTF8Decoder)
                return UTF8Decoder.decode(e.subarray(r, o));
              for (var a = ""; r < o; ) {
                var i = e[r++];
                if (128 & i) {
                  var s = 63 & e[r++];
                  if (192 != (224 & i)) {
                    var c = 63 & e[r++];
                    if (
                      (i =
                        224 == (240 & i)
                          ? ((15 & i) << 12) | (s << 6) | c
                          : ((7 & i) << 18) |
                            (s << 12) |
                            (c << 6) |
                            (63 & e[r++])) < 65536
                    )
                      a += String.fromCharCode(i);
                    else {
                      var u = i - 65536;
                      a += String.fromCharCode(
                        55296 | (u >> 10),
                        56320 | (1023 & u)
                      );
                    }
                  } else a += String.fromCharCode(((31 & i) << 6) | s);
                } else a += String.fromCharCode(i);
              }
              return a;
            }
            function UTF8ToString(e, r) {
              return e ? UTF8ArrayToString(HEAPU8, e, r) : "";
            }
            function stringToUTF8Array(e, r, t, n) {
              if (!(n > 0)) return 0;
              for (var o = t, a = t + n - 1, i = 0; i < e.length; ++i) {
                var s = e.charCodeAt(i);
                if (
                  (s >= 55296 &&
                    s <= 57343 &&
                    (s =
                      (65536 + ((1023 & s) << 10)) |
                      (1023 & e.charCodeAt(++i))),
                  s <= 127)
                ) {
                  if (t >= a) break;
                  r[t++] = s;
                } else if (s <= 2047) {
                  if (t + 1 >= a) break;
                  (r[t++] = 192 | (s >> 6)), (r[t++] = 128 | (63 & s));
                } else if (s <= 65535) {
                  if (t + 2 >= a) break;
                  (r[t++] = 224 | (s >> 12)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                } else {
                  if (t + 3 >= a) break;
                  (r[t++] = 240 | (s >> 18)),
                    (r[t++] = 128 | ((s >> 12) & 63)),
                    (r[t++] = 128 | ((s >> 6) & 63)),
                    (r[t++] = 128 | (63 & s));
                }
              }
              return (r[t] = 0), t - o;
            }
            function stringToUTF8(e, r, t) {
              return stringToUTF8Array(e, HEAPU8, r, t);
            }
            function lengthBytesUTF8(e) {
              for (var r = 0, t = 0; t < e.length; ++t) {
                var n = e.charCodeAt(t);
                n <= 127
                  ? r++
                  : n <= 2047
                  ? (r += 2)
                  : n >= 55296 && n <= 57343
                  ? ((r += 4), ++t)
                  : (r += 3);
              }
              return r;
            }
            function updateGlobalBufferAndViews(e) {
              (buffer = e),
                (Module.HEAP8 = HEAP8 = new Int8Array(e)),
                (Module.HEAP16 = HEAP16 = new Int16Array(e)),
                (Module.HEAP32 = HEAP32 = new Int32Array(e)),
                (Module.HEAPU8 = HEAPU8 = new Uint8Array(e)),
                (Module.HEAPU16 = HEAPU16 = new Uint16Array(e)),
                (Module.HEAPU32 = HEAPU32 = new Uint32Array(e)),
                (Module.HEAPF32 = HEAPF32 = new Float32Array(e)),
                (Module.HEAPF64 = HEAPF64 = new Float64Array(e));
            }
            var INITIAL_MEMORY = Module.INITIAL_MEMORY || 16777216,
              wasmTable,
              __ATPRERUN__ = [],
              __ATINIT__ = [],
              __ATMAIN__ = [],
              __ATPOSTRUN__ = [],
              runtimeInitialized = !1;
            function keepRuntimeAlive() {
              return noExitRuntime;
            }
            function preRun() {
              if (Module.preRun)
                for (
                  "function" == typeof Module.preRun &&
                  (Module.preRun = [Module.preRun]);
                  Module.preRun.length;

                )
                  addOnPreRun(Module.preRun.shift());
              callRuntimeCallbacks(__ATPRERUN__);
            }
            function initRuntime() {
              (runtimeInitialized = !0),
                Module.noFSInit || FS.init.initialized || FS.init(),
                (FS.ignorePermissions = !1),
                TTY.init(),
                callRuntimeCallbacks(__ATINIT__);
            }
            function preMain() {
              callRuntimeCallbacks(__ATMAIN__);
            }
            function postRun() {
              if (Module.postRun)
                for (
                  "function" == typeof Module.postRun &&
                  (Module.postRun = [Module.postRun]);
                  Module.postRun.length;

                )
                  addOnPostRun(Module.postRun.shift());
              callRuntimeCallbacks(__ATPOSTRUN__);
            }
            function addOnPreRun(e) {
              __ATPRERUN__.unshift(e);
            }
            function addOnInit(e) {
              __ATINIT__.unshift(e);
            }
            function addOnPostRun(e) {
              __ATPOSTRUN__.unshift(e);
            }
            var runDependencies = 0,
              runDependencyWatcher = null,
              dependenciesFulfilled = null;
            function getUniqueRunDependency(e) {
              return e;
            }
            function addRunDependency(e) {
              runDependencies++,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies);
            }
            function removeRunDependency(e) {
              if (
                (runDependencies--,
                Module.monitorRunDependencies &&
                  Module.monitorRunDependencies(runDependencies),
                0 == runDependencies &&
                  (null !== runDependencyWatcher &&
                    (clearInterval(runDependencyWatcher),
                    (runDependencyWatcher = null)),
                  dependenciesFulfilled))
              ) {
                var r = dependenciesFulfilled;
                (dependenciesFulfilled = null), r();
              }
            }
            function abort(e) {
              Module.onAbort && Module.onAbort(e),
                err((e = "Aborted(" + e + ")")),
                (ABORT = !0),
                (EXITSTATUS = 1),
                (e += ". Build with -sASSERTIONS for more info.");
              var r = new WebAssembly.RuntimeError(e);
              throw (readyPromiseReject(r), r);
            }
            var dataURIPrefix = "data:application/octet-stream;base64,",
              wasmBinaryFile,
              tempDouble,
              tempI64;
            function isDataURI(e) {
              return e.startsWith(dataURIPrefix);
            }
            function isFileURI(e) {
              return e.startsWith("file://");
            }
            function getBinary(e) {
              try {
                if (e == wasmBinaryFile && wasmBinary)
                  return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(e);
                throw "both async and sync fetching of the wasm failed";
              } catch (e) {
                abort(e);
              }
            }
            function getBinaryPromise() {
              if (
                !wasmBinary &&
                (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)
              ) {
                if ("function" == typeof fetch && !isFileURI(wasmBinaryFile))
                  return fetch(wasmBinaryFile, { credentials: "same-origin" })
                    .then(function (e) {
                      if (!e.ok)
                        throw (
                          "failed to load wasm binary file at '" +
                          wasmBinaryFile +
                          "'"
                        );
                      return e.arrayBuffer();
                    })
                    .catch(function () {
                      return getBinary(wasmBinaryFile);
                    });
                if (readAsync)
                  return new Promise(function (e, r) {
                    readAsync(
                      wasmBinaryFile,
                      function (r) {
                        e(new Uint8Array(r));
                      },
                      r
                    );
                  });
              }
              return Promise.resolve().then(function () {
                return getBinary(wasmBinaryFile);
              });
            }
            function createWasm() {
              var e = { a: asmLibraryArg };
              function r(e, r) {
                var t = e.exports;
                (Module.asm = t),
                  updateGlobalBufferAndViews(
                    (wasmMemory = Module.asm.x).buffer
                  ),
                  (wasmTable = Module.asm.E),
                  addOnInit(Module.asm.y),
                  removeRunDependency("wasm-instantiate");
              }
              function t(e) {
                r(e.instance);
              }
              function n(r) {
                return getBinaryPromise()
                  .then(function (r) {
                    return WebAssembly.instantiate(r, e);
                  })
                  .then(function (e) {
                    return e;
                  })
                  .then(r, function (e) {
                    err("failed to asynchronously prepare wasm: " + e),
                      abort(e);
                  });
              }
              if (
                (addRunDependency("wasm-instantiate"), Module.instantiateWasm)
              )
                try {
                  return Module.instantiateWasm(e, r);
                } catch (e) {
                  err(
                    "Module.instantiateWasm callback failed with error: " + e
                  ),
                    readyPromiseReject(e);
                }
              return (
                (wasmBinary ||
                "function" != typeof WebAssembly.instantiateStreaming ||
                isDataURI(wasmBinaryFile) ||
                isFileURI(wasmBinaryFile) ||
                ENVIRONMENT_IS_NODE ||
                "function" != typeof fetch
                  ? n(t)
                  : fetch(wasmBinaryFile, { credentials: "same-origin" }).then(
                      function (r) {
                        return WebAssembly.instantiateStreaming(r, e).then(
                          t,
                          function (e) {
                            return (
                              err("wasm streaming compile failed: " + e),
                              err("falling back to ArrayBuffer instantiation"),
                              n(t)
                            );
                          }
                        );
                      }
                    )
                ).catch(readyPromiseReject),
                {}
              );
            }
            function ExitStatus(e) {
              (this.name = "ExitStatus"),
                (this.message = "Program terminated with exit(" + e + ")"),
                (this.status = e);
            }
            function callRuntimeCallbacks(e) {
              for (; e.length > 0; ) e.shift()(Module);
            }
            function ___cxa_allocate_exception(e) {
              return _malloc(e + 24) + 24;
            }
            function ExceptionInfo(e) {
              (this.excPtr = e),
                (this.ptr = e - 24),
                (this.set_type = function (e) {
                  HEAPU32[(this.ptr + 4) >> 2] = e;
                }),
                (this.get_type = function () {
                  return HEAPU32[(this.ptr + 4) >> 2];
                }),
                (this.set_destructor = function (e) {
                  HEAPU32[(this.ptr + 8) >> 2] = e;
                }),
                (this.get_destructor = function () {
                  return HEAPU32[(this.ptr + 8) >> 2];
                }),
                (this.set_refcount = function (e) {
                  HEAP32[this.ptr >> 2] = e;
                }),
                (this.set_caught = function (e) {
                  (e = e ? 1 : 0), (HEAP8[(this.ptr + 12) >> 0] = e);
                }),
                (this.get_caught = function () {
                  return 0 != HEAP8[(this.ptr + 12) >> 0];
                }),
                (this.set_rethrown = function (e) {
                  (e = e ? 1 : 0), (HEAP8[(this.ptr + 13) >> 0] = e);
                }),
                (this.get_rethrown = function () {
                  return 0 != HEAP8[(this.ptr + 13) >> 0];
                }),
                (this.init = function (e, r) {
                  this.set_adjusted_ptr(0),
                    this.set_type(e),
                    this.set_destructor(r),
                    this.set_refcount(0),
                    this.set_caught(!1),
                    this.set_rethrown(!1);
                }),
                (this.add_ref = function () {
                  var e = HEAP32[this.ptr >> 2];
                  HEAP32[this.ptr >> 2] = e + 1;
                }),
                (this.release_ref = function () {
                  var e = HEAP32[this.ptr >> 2];
                  return (HEAP32[this.ptr >> 2] = e - 1), 1 === e;
                }),
                (this.set_adjusted_ptr = function (e) {
                  HEAPU32[(this.ptr + 16) >> 2] = e;
                }),
                (this.get_adjusted_ptr = function () {
                  return HEAPU32[(this.ptr + 16) >> 2];
                }),
                (this.get_exception_ptr = function () {
                  if (___cxa_is_pointer_type(this.get_type()))
                    return HEAPU32[this.excPtr >> 2];
                  var e = this.get_adjusted_ptr();
                  return 0 !== e ? e : this.excPtr;
                });
            }
            Module.locateFile
              ? ((wasmBinaryFile = "wasm-package.wasm"),
                isDataURI(wasmBinaryFile) ||
                  (wasmBinaryFile = locateFile(wasmBinaryFile)))
              : (wasmBinaryFile = new URL(
                  __webpack_require__(3810),
                  __webpack_require__.b
                ).toString());
            var exceptionLast = 0,
              uncaughtExceptionCount = 0;
            function ___cxa_throw(e, r, t) {
              throw (
                (new ExceptionInfo(e).init(r, t),
                (exceptionLast = e),
                uncaughtExceptionCount++,
                e)
              );
            }
            var PATH = {
              isAbs: (e) => "/" === e.charAt(0),
              splitPath: (e) =>
                /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                  .exec(e)
                  .slice(1),
              normalizeArray: (e, r) => {
                for (var t = 0, n = e.length - 1; n >= 0; n--) {
                  var o = e[n];
                  "." === o
                    ? e.splice(n, 1)
                    : ".." === o
                    ? (e.splice(n, 1), t++)
                    : t && (e.splice(n, 1), t--);
                }
                if (r) for (; t; t--) e.unshift("..");
                return e;
              },
              normalize: (e) => {
                var r = PATH.isAbs(e),
                  t = "/" === e.substr(-1);
                return (
                  (e = PATH.normalizeArray(
                    e.split("/").filter((e) => !!e),
                    !r
                  ).join("/")) ||
                    r ||
                    (e = "."),
                  e && t && (e += "/"),
                  (r ? "/" : "") + e
                );
              },
              dirname: (e) => {
                var r = PATH.splitPath(e),
                  t = r[0],
                  n = r[1];
                return t || n
                  ? (n && (n = n.substr(0, n.length - 1)), t + n)
                  : ".";
              },
              basename: (e) => {
                if ("/" === e) return "/";
                var r = (e = (e = PATH.normalize(e)).replace(
                  /\/$/,
                  ""
                )).lastIndexOf("/");
                return -1 === r ? e : e.substr(r + 1);
              },
              join: function () {
                var e = Array.prototype.slice.call(arguments);
                return PATH.normalize(e.join("/"));
              },
              join2: (e, r) => PATH.normalize(e + "/" + r),
            };
            function getRandomDevice() {
              if (
                "object" == typeof crypto &&
                "function" == typeof crypto.getRandomValues
              ) {
                var e = new Uint8Array(1);
                return () => (crypto.getRandomValues(e), e[0]);
              }
              if (ENVIRONMENT_IS_NODE)
                try {
                  var r = require("crypto");
                  return () => r.randomBytes(1)[0];
                } catch (e) {}
              return () => abort("randomDevice");
            }
            var PATH_FS = {
              resolve: function () {
                for (
                  var e = "", r = !1, t = arguments.length - 1;
                  t >= -1 && !r;
                  t--
                ) {
                  var n = t >= 0 ? arguments[t] : FS.cwd();
                  if ("string" != typeof n)
                    throw new TypeError(
                      "Arguments to path.resolve must be strings"
                    );
                  if (!n) return "";
                  (e = n + "/" + e), (r = PATH.isAbs(n));
                }
                return (
                  (r ? "/" : "") +
                    (e = PATH.normalizeArray(
                      e.split("/").filter((e) => !!e),
                      !r
                    ).join("/")) || "."
                );
              },
              relative: (e, r) => {
                function t(e) {
                  for (var r = 0; r < e.length && "" === e[r]; r++);
                  for (var t = e.length - 1; t >= 0 && "" === e[t]; t--);
                  return r > t ? [] : e.slice(r, t - r + 1);
                }
                (e = PATH_FS.resolve(e).substr(1)),
                  (r = PATH_FS.resolve(r).substr(1));
                for (
                  var n = t(e.split("/")),
                    o = t(r.split("/")),
                    a = Math.min(n.length, o.length),
                    i = a,
                    s = 0;
                  s < a;
                  s++
                )
                  if (n[s] !== o[s]) {
                    i = s;
                    break;
                  }
                var c = [];
                for (s = i; s < n.length; s++) c.push("..");
                return (c = c.concat(o.slice(i))).join("/");
              },
            };
            function intArrayFromString(e, r, t) {
              var n = t > 0 ? t : lengthBytesUTF8(e) + 1,
                o = new Array(n),
                a = stringToUTF8Array(e, o, 0, o.length);
              return r && (o.length = a), o;
            }
            var TTY = {
              ttys: [],
              init: function () {},
              shutdown: function () {},
              register: function (e, r) {
                (TTY.ttys[e] = { input: [], output: [], ops: r }),
                  FS.registerDevice(e, TTY.stream_ops);
              },
              stream_ops: {
                open: function (e) {
                  var r = TTY.ttys[e.node.rdev];
                  if (!r) throw new FS.ErrnoError(43);
                  (e.tty = r), (e.seekable = !1);
                },
                close: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                fsync: function (e) {
                  e.tty.ops.fsync(e.tty);
                },
                read: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.get_char)
                    throw new FS.ErrnoError(60);
                  for (var a = 0, i = 0; i < n; i++) {
                    var s;
                    try {
                      s = e.tty.ops.get_char(e.tty);
                    } catch (e) {
                      throw new FS.ErrnoError(29);
                    }
                    if (void 0 === s && 0 === a) throw new FS.ErrnoError(6);
                    if (null == s) break;
                    a++, (r[t + i] = s);
                  }
                  return a && (e.node.timestamp = Date.now()), a;
                },
                write: function (e, r, t, n, o) {
                  if (!e.tty || !e.tty.ops.put_char)
                    throw new FS.ErrnoError(60);
                  try {
                    for (var a = 0; a < n; a++)
                      e.tty.ops.put_char(e.tty, r[t + a]);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                  return n && (e.node.timestamp = Date.now()), a;
                },
              },
              default_tty_ops: {
                get_char: function (e) {
                  if (!e.input.length) {
                    var r = null;
                    if (ENVIRONMENT_IS_NODE) {
                      var t = Buffer.alloc(256),
                        n = 0;
                      try {
                        n = fs.readSync(process.stdin.fd, t, 0, 256, -1);
                      } catch (e) {
                        if (!e.toString().includes("EOF")) throw e;
                        n = 0;
                      }
                      r = n > 0 ? t.slice(0, n).toString("utf-8") : null;
                    } else
                      "undefined" != typeof window &&
                      "function" == typeof window.prompt
                        ? null !== (r = window.prompt("Input: ")) && (r += "\n")
                        : "function" == typeof readline &&
                          null !== (r = readline()) &&
                          (r += "\n");
                    if (!r) return null;
                    e.input = intArrayFromString(r, !0);
                  }
                  return e.input.shift();
                },
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (out(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (out(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
              default_tty1_ops: {
                put_char: function (e, r) {
                  null === r || 10 === r
                    ? (err(UTF8ArrayToString(e.output, 0)), (e.output = []))
                    : 0 != r && e.output.push(r);
                },
                fsync: function (e) {
                  e.output &&
                    e.output.length > 0 &&
                    (err(UTF8ArrayToString(e.output, 0)), (e.output = []));
                },
              },
            };
            function mmapAlloc(e) {
              abort();
            }
            var MEMFS = {
              ops_table: null,
              mount: function (e) {
                return MEMFS.createNode(null, "/", 16895, 0);
              },
              createNode: function (e, r, t, n) {
                if (FS.isBlkdev(t) || FS.isFIFO(t)) throw new FS.ErrnoError(63);
                MEMFS.ops_table ||
                  (MEMFS.ops_table = {
                    dir: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink,
                      },
                      stream: { llseek: MEMFS.stream_ops.llseek },
                    },
                    file: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync,
                      },
                    },
                    link: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink,
                      },
                      stream: {},
                    },
                    chrdev: {
                      node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                      },
                      stream: FS.chrdev_stream_ops,
                    },
                  });
                var o = FS.createNode(e, r, t, n);
                return (
                  FS.isDir(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.dir.node),
                      (o.stream_ops = MEMFS.ops_table.dir.stream),
                      (o.contents = {}))
                    : FS.isFile(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.file.node),
                      (o.stream_ops = MEMFS.ops_table.file.stream),
                      (o.usedBytes = 0),
                      (o.contents = null))
                    : FS.isLink(o.mode)
                    ? ((o.node_ops = MEMFS.ops_table.link.node),
                      (o.stream_ops = MEMFS.ops_table.link.stream))
                    : FS.isChrdev(o.mode) &&
                      ((o.node_ops = MEMFS.ops_table.chrdev.node),
                      (o.stream_ops = MEMFS.ops_table.chrdev.stream)),
                  (o.timestamp = Date.now()),
                  e && ((e.contents[r] = o), (e.timestamp = o.timestamp)),
                  o
                );
              },
              getFileDataAsTypedArray: function (e) {
                return e.contents
                  ? e.contents.subarray
                    ? e.contents.subarray(0, e.usedBytes)
                    : new Uint8Array(e.contents)
                  : new Uint8Array(0);
              },
              expandFileStorage: function (e, r) {
                var t = e.contents ? e.contents.length : 0;
                if (!(t >= r)) {
                  (r = Math.max(r, (t * (t < 1048576 ? 2 : 1.125)) >>> 0)),
                    0 != t && (r = Math.max(r, 256));
                  var n = e.contents;
                  (e.contents = new Uint8Array(r)),
                    e.usedBytes > 0 &&
                      e.contents.set(n.subarray(0, e.usedBytes), 0);
                }
              },
              resizeFileStorage: function (e, r) {
                if (e.usedBytes != r)
                  if (0 == r) (e.contents = null), (e.usedBytes = 0);
                  else {
                    var t = e.contents;
                    (e.contents = new Uint8Array(r)),
                      t &&
                        e.contents.set(t.subarray(0, Math.min(r, e.usedBytes))),
                      (e.usedBytes = r);
                  }
              },
              node_ops: {
                getattr: function (e) {
                  var r = {};
                  return (
                    (r.dev = FS.isChrdev(e.mode) ? e.id : 1),
                    (r.ino = e.id),
                    (r.mode = e.mode),
                    (r.nlink = 1),
                    (r.uid = 0),
                    (r.gid = 0),
                    (r.rdev = e.rdev),
                    FS.isDir(e.mode)
                      ? (r.size = 4096)
                      : FS.isFile(e.mode)
                      ? (r.size = e.usedBytes)
                      : FS.isLink(e.mode)
                      ? (r.size = e.link.length)
                      : (r.size = 0),
                    (r.atime = new Date(e.timestamp)),
                    (r.mtime = new Date(e.timestamp)),
                    (r.ctime = new Date(e.timestamp)),
                    (r.blksize = 4096),
                    (r.blocks = Math.ceil(r.size / r.blksize)),
                    r
                  );
                },
                setattr: function (e, r) {
                  void 0 !== r.mode && (e.mode = r.mode),
                    void 0 !== r.timestamp && (e.timestamp = r.timestamp),
                    void 0 !== r.size && MEMFS.resizeFileStorage(e, r.size);
                },
                lookup: function (e, r) {
                  throw FS.genericErrors[44];
                },
                mknod: function (e, r, t, n) {
                  return MEMFS.createNode(e, r, t, n);
                },
                rename: function (e, r, t) {
                  if (FS.isDir(e.mode)) {
                    var n;
                    try {
                      n = FS.lookupNode(r, t);
                    } catch (e) {}
                    if (n)
                      for (var o in n.contents) throw new FS.ErrnoError(55);
                  }
                  delete e.parent.contents[e.name],
                    (e.parent.timestamp = Date.now()),
                    (e.name = t),
                    (r.contents[t] = e),
                    (r.timestamp = e.parent.timestamp),
                    (e.parent = r);
                },
                unlink: function (e, r) {
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                rmdir: function (e, r) {
                  var t = FS.lookupNode(e, r);
                  for (var n in t.contents) throw new FS.ErrnoError(55);
                  delete e.contents[r], (e.timestamp = Date.now());
                },
                readdir: function (e) {
                  var r = [".", ".."];
                  for (var t in e.contents)
                    e.contents.hasOwnProperty(t) && r.push(t);
                  return r;
                },
                symlink: function (e, r, t) {
                  var n = MEMFS.createNode(e, r, 41471, 0);
                  return (n.link = t), n;
                },
                readlink: function (e) {
                  if (!FS.isLink(e.mode)) throw new FS.ErrnoError(28);
                  return e.link;
                },
              },
              stream_ops: {
                read: function (e, r, t, n, o) {
                  var a = e.node.contents;
                  if (o >= e.node.usedBytes) return 0;
                  var i = Math.min(e.node.usedBytes - o, n);
                  if (i > 8 && a.subarray) r.set(a.subarray(o, o + i), t);
                  else for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                  return i;
                },
                write: function (e, r, t, n, o, a) {
                  if ((r.buffer === HEAP8.buffer && (a = !1), !n)) return 0;
                  var i = e.node;
                  if (
                    ((i.timestamp = Date.now()),
                    r.subarray && (!i.contents || i.contents.subarray))
                  ) {
                    if (a)
                      return (
                        (i.contents = r.subarray(t, t + n)),
                        (i.usedBytes = n),
                        n
                      );
                    if (0 === i.usedBytes && 0 === o)
                      return (
                        (i.contents = r.slice(t, t + n)), (i.usedBytes = n), n
                      );
                    if (o + n <= i.usedBytes)
                      return i.contents.set(r.subarray(t, t + n), o), n;
                  }
                  if (
                    (MEMFS.expandFileStorage(i, o + n),
                    i.contents.subarray && r.subarray)
                  )
                    i.contents.set(r.subarray(t, t + n), o);
                  else for (var s = 0; s < n; s++) i.contents[o + s] = r[t + s];
                  return (i.usedBytes = Math.max(i.usedBytes, o + n)), n;
                },
                llseek: function (e, r, t) {
                  var n = r;
                  if (
                    (1 === t
                      ? (n += e.position)
                      : 2 === t &&
                        FS.isFile(e.node.mode) &&
                        (n += e.node.usedBytes),
                    n < 0)
                  )
                    throw new FS.ErrnoError(28);
                  return n;
                },
                allocate: function (e, r, t) {
                  MEMFS.expandFileStorage(e.node, r + t),
                    (e.node.usedBytes = Math.max(e.node.usedBytes, r + t));
                },
                mmap: function (e, r, t, n, o) {
                  if (!FS.isFile(e.node.mode)) throw new FS.ErrnoError(43);
                  var a,
                    i,
                    s = e.node.contents;
                  if (2 & o || s.buffer !== buffer) {
                    if (
                      ((t > 0 || t + r < s.length) &&
                        (s = s.subarray
                          ? s.subarray(t, t + r)
                          : Array.prototype.slice.call(s, t, t + r)),
                      (i = !0),
                      !(a = mmapAlloc(r)))
                    )
                      throw new FS.ErrnoError(48);
                    HEAP8.set(s, a);
                  } else (i = !1), (a = s.byteOffset);
                  return { ptr: a, allocated: i };
                },
                msync: function (e, r, t, n, o) {
                  return MEMFS.stream_ops.write(e, r, 0, n, t, !1), 0;
                },
              },
            };
            function asyncLoad(e, r, t, n) {
              var o = n ? "" : getUniqueRunDependency("al " + e);
              readAsync(
                e,
                (t) => {
                  assert(
                    t,
                    'Loading data file "' + e + '" failed (no arrayBuffer).'
                  ),
                    r(new Uint8Array(t)),
                    o && removeRunDependency(o);
                },
                (r) => {
                  if (!t) throw 'Loading data file "' + e + '" failed.';
                  t();
                }
              ),
                o && addRunDependency(o);
            }
            var IDBFS = {
                dbs: {},
                indexedDB: () => {
                  if ("undefined" != typeof indexedDB) return indexedDB;
                  var e = null;
                  return (
                    "object" == typeof window &&
                      (e =
                        window.indexedDB ||
                        window.mozIndexedDB ||
                        window.webkitIndexedDB ||
                        window.msIndexedDB),
                    assert(e, "IDBFS used, but indexedDB not supported"),
                    e
                  );
                },
                DB_VERSION: 21,
                DB_STORE_NAME: "FILE_DATA",
                mount: function (e) {
                  return MEMFS.mount.apply(null, arguments);
                },
                syncfs: (e, r, t) => {
                  IDBFS.getLocalSet(e, (n, o) => {
                    if (n) return t(n);
                    IDBFS.getRemoteSet(e, (e, n) => {
                      if (e) return t(e);
                      var a = r ? n : o,
                        i = r ? o : n;
                      IDBFS.reconcile(a, i, t);
                    });
                  });
                },
                quit: () => {
                  Object.values(IDBFS.dbs).forEach((e) => e.close()),
                    (IDBFS.dbs = {});
                },
                getDB: (e, r) => {
                  var t,
                    n = IDBFS.dbs[e];
                  if (n) return r(null, n);
                  try {
                    t = IDBFS.indexedDB().open(e, IDBFS.DB_VERSION);
                  } catch (e) {
                    return r(e);
                  }
                  if (!t) return r("Unable to connect to IndexedDB");
                  (t.onupgradeneeded = (e) => {
                    var r,
                      t = e.target.result,
                      n = e.target.transaction;
                    (r = t.objectStoreNames.contains(IDBFS.DB_STORE_NAME)
                      ? n.objectStore(IDBFS.DB_STORE_NAME)
                      : t.createObjectStore(
                          IDBFS.DB_STORE_NAME
                        )).indexNames.contains("timestamp") ||
                      r.createIndex("timestamp", "timestamp", { unique: !1 });
                  }),
                    (t.onsuccess = () => {
                      (n = t.result), (IDBFS.dbs[e] = n), r(null, n);
                    }),
                    (t.onerror = (e) => {
                      r(this.error), e.preventDefault();
                    });
                },
                getLocalSet: (e, r) => {
                  var t = {};
                  function n(e) {
                    return "." !== e && ".." !== e;
                  }
                  function o(e) {
                    return (r) => PATH.join2(e, r);
                  }
                  for (
                    var a = FS.readdir(e.mountpoint)
                      .filter(n)
                      .map(o(e.mountpoint));
                    a.length;

                  ) {
                    var i,
                      s = a.pop();
                    try {
                      i = FS.stat(s);
                    } catch (e) {
                      return r(e);
                    }
                    FS.isDir(i.mode) &&
                      a.push.apply(a, FS.readdir(s).filter(n).map(o(s))),
                      (t[s] = { timestamp: i.mtime });
                  }
                  return r(null, { type: "local", entries: t });
                },
                getRemoteSet: (e, r) => {
                  var t = {};
                  IDBFS.getDB(e.mountpoint, (e, n) => {
                    if (e) return r(e);
                    try {
                      var o = n.transaction([IDBFS.DB_STORE_NAME], "readonly");
                      (o.onerror = (e) => {
                        r(this.error), e.preventDefault();
                      }),
                        (o
                          .objectStore(IDBFS.DB_STORE_NAME)
                          .index("timestamp")
                          .openKeyCursor().onsuccess = (e) => {
                          var o = e.target.result;
                          if (!o)
                            return r(null, {
                              type: "remote",
                              db: n,
                              entries: t,
                            });
                          (t[o.primaryKey] = { timestamp: o.key }),
                            o.continue();
                        });
                    } catch (e) {
                      return r(e);
                    }
                  });
                },
                loadLocalEntry: (e, r) => {
                  var t, n;
                  try {
                    (n = FS.lookupPath(e).node), (t = FS.stat(e));
                  } catch (e) {
                    return r(e);
                  }
                  return FS.isDir(t.mode)
                    ? r(null, { timestamp: t.mtime, mode: t.mode })
                    : FS.isFile(t.mode)
                    ? ((n.contents = MEMFS.getFileDataAsTypedArray(n)),
                      r(null, {
                        timestamp: t.mtime,
                        mode: t.mode,
                        contents: n.contents,
                      }))
                    : r(new Error("node type not supported"));
                },
                storeLocalEntry: (e, r, t) => {
                  try {
                    if (FS.isDir(r.mode)) FS.mkdirTree(e, r.mode);
                    else {
                      if (!FS.isFile(r.mode))
                        return t(new Error("node type not supported"));
                      FS.writeFile(e, r.contents, { canOwn: !0 });
                    }
                    FS.chmod(e, r.mode), FS.utime(e, r.timestamp, r.timestamp);
                  } catch (e) {
                    return t(e);
                  }
                  t(null);
                },
                removeLocalEntry: (e, r) => {
                  try {
                    var t = FS.stat(e);
                    FS.isDir(t.mode)
                      ? FS.rmdir(e)
                      : FS.isFile(t.mode) && FS.unlink(e);
                  } catch (e) {
                    return r(e);
                  }
                  r(null);
                },
                loadRemoteEntry: (e, r, t) => {
                  var n = e.get(r);
                  (n.onsuccess = (e) => {
                    t(null, e.target.result);
                  }),
                    (n.onerror = (e) => {
                      t(this.error), e.preventDefault();
                    });
                },
                storeRemoteEntry: (e, r, t, n) => {
                  try {
                    var o = e.put(t, r);
                  } catch (e) {
                    return void n(e);
                  }
                  (o.onsuccess = () => {
                    n(null);
                  }),
                    (o.onerror = (e) => {
                      n(this.error), e.preventDefault();
                    });
                },
                removeRemoteEntry: (e, r, t) => {
                  var n = e.delete(r);
                  (n.onsuccess = () => {
                    t(null);
                  }),
                    (n.onerror = (e) => {
                      t(this.error), e.preventDefault();
                    });
                },
                reconcile: (e, r, t) => {
                  var n = 0,
                    o = [];
                  Object.keys(e.entries).forEach(function (t) {
                    var a = e.entries[t],
                      i = r.entries[t];
                    (i && a.timestamp.getTime() == i.timestamp.getTime()) ||
                      (o.push(t), n++);
                  });
                  var a = [];
                  if (
                    (Object.keys(r.entries).forEach(function (r) {
                      e.entries[r] || (a.push(r), n++);
                    }),
                    !n)
                  )
                    return t(null);
                  var i = !1,
                    s = ("remote" === e.type ? e.db : r.db).transaction(
                      [IDBFS.DB_STORE_NAME],
                      "readwrite"
                    ),
                    c = s.objectStore(IDBFS.DB_STORE_NAME);
                  function u(e) {
                    if (e && !i) return (i = !0), t(e);
                  }
                  (s.onerror = (e) => {
                    u(this.error), e.preventDefault();
                  }),
                    (s.oncomplete = (e) => {
                      i || t(null);
                    }),
                    o.sort().forEach((e) => {
                      "local" === r.type
                        ? IDBFS.loadRemoteEntry(c, e, (r, t) => {
                            if (r) return u(r);
                            IDBFS.storeLocalEntry(e, t, u);
                          })
                        : IDBFS.loadLocalEntry(e, (r, t) => {
                            if (r) return u(r);
                            IDBFS.storeRemoteEntry(c, e, t, u);
                          });
                    }),
                    a
                      .sort()
                      .reverse()
                      .forEach((e) => {
                        "local" === r.type
                          ? IDBFS.removeLocalEntry(e, u)
                          : IDBFS.removeRemoteEntry(c, e, u);
                      });
                },
              },
              ERRNO_CODES = {},
              PROXYFS = {
                mount: function (e) {
                  return PROXYFS.createNode(
                    null,
                    "/",
                    e.opts.fs.lstat(e.opts.root).mode,
                    0
                  );
                },
                createNode: function (e, r, t, n) {
                  if (!FS.isDir(t) && !FS.isFile(t) && !FS.isLink(t))
                    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                  var o = FS.createNode(e, r, t);
                  return (
                    (o.node_ops = PROXYFS.node_ops),
                    (o.stream_ops = PROXYFS.stream_ops),
                    o
                  );
                },
                realPath: function (e) {
                  for (var r = []; e.parent !== e; )
                    r.push(e.name), (e = e.parent);
                  return (
                    r.push(e.mount.opts.root),
                    r.reverse(),
                    PATH.join.apply(null, r)
                  );
                },
                node_ops: {
                  getattr: function (e) {
                    var r,
                      t = PROXYFS.realPath(e);
                    try {
                      r = e.mount.opts.fs.lstat(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return {
                      dev: r.dev,
                      ino: r.ino,
                      mode: r.mode,
                      nlink: r.nlink,
                      uid: r.uid,
                      gid: r.gid,
                      rdev: r.rdev,
                      size: r.size,
                      atime: r.atime,
                      mtime: r.mtime,
                      ctime: r.ctime,
                      blksize: r.blksize,
                      blocks: r.blocks,
                    };
                  },
                  setattr: function (e, r) {
                    var t = PROXYFS.realPath(e);
                    try {
                      if (
                        (void 0 !== r.mode &&
                          (e.mount.opts.fs.chmod(t, r.mode), (e.mode = r.mode)),
                        void 0 !== r.timestamp)
                      ) {
                        var n = new Date(r.timestamp);
                        e.mount.opts.fs.utime(t, n, n);
                      }
                      void 0 !== r.size && e.mount.opts.fs.truncate(t, r.size);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  lookup: function (e, r) {
                    try {
                      var t = PATH.join2(PROXYFS.realPath(e), r),
                        n = e.mount.opts.fs.lstat(t).mode;
                      return PROXYFS.createNode(e, r, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  mknod: function (e, r, t, n) {
                    var o = PROXYFS.createNode(e, r, t, n),
                      a = PROXYFS.realPath(o);
                    try {
                      FS.isDir(o.mode)
                        ? o.mount.opts.fs.mkdir(a, o.mode)
                        : o.mount.opts.fs.writeFile(a, "", { mode: o.mode });
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                    return o;
                  },
                  rename: function (e, r, t) {
                    var n = PROXYFS.realPath(e),
                      o = PATH.join2(PROXYFS.realPath(r), t);
                    try {
                      e.mount.opts.fs.rename(n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  unlink: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.unlink(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  rmdir: function (e, r) {
                    var t = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.rmdir(t);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readdir: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readdir(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  symlink: function (e, r, t) {
                    var n = PATH.join2(PROXYFS.realPath(e), r);
                    try {
                      e.mount.opts.fs.symlink(t, n);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  readlink: function (e) {
                    var r = PROXYFS.realPath(e);
                    try {
                      return e.mount.opts.fs.readlink(r);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                },
                stream_ops: {
                  open: function (e) {
                    var r = PROXYFS.realPath(e.node);
                    try {
                      e.nfd = e.node.mount.opts.fs.open(r, e.flags);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  close: function (e) {
                    try {
                      e.node.mount.opts.fs.close(e.nfd);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  read: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.read(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  write: function (e, r, t, n, o) {
                    try {
                      return e.node.mount.opts.fs.write(e.nfd, r, t, n, o);
                    } catch (e) {
                      if (!e.code) throw e;
                      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                    }
                  },
                  llseek: function (e, r, t) {
                    var n = r;
                    if (1 === t) n += e.position;
                    else if (2 === t && FS.isFile(e.node.mode))
                      try {
                        n += e.node.node_ops.getattr(e.node).size;
                      } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code]);
                      }
                    if (n < 0) throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
                    return n;
                  },
                },
              },
              FS = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, r = {}) => {
                  if (!(e = PATH_FS.resolve(FS.cwd(), e)))
                    return { path: "", node: null };
                  if (
                    (r = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      r
                    )).recurse_count > 8
                  )
                    throw new FS.ErrnoError(32);
                  for (
                    var t = PATH.normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !1
                      ),
                      n = FS.root,
                      o = "/",
                      a = 0;
                    a < t.length;
                    a++
                  ) {
                    var i = a === t.length - 1;
                    if (i && r.parent) break;
                    if (
                      ((n = FS.lookupNode(n, t[a])),
                      (o = PATH.join2(o, t[a])),
                      FS.isMountpoint(n) &&
                        (!i || (i && r.follow_mount)) &&
                        (n = n.mounted.root),
                      !i || r.follow)
                    )
                      for (var s = 0; FS.isLink(n.mode); ) {
                        var c = FS.readlink(o);
                        if (
                          ((o = PATH_FS.resolve(PATH.dirname(o), c)),
                          (n = FS.lookupPath(o, {
                            recurse_count: r.recurse_count + 1,
                          }).node),
                          s++ > 40)
                        )
                          throw new FS.ErrnoError(32);
                      }
                  }
                  return { path: o, node: n };
                },
                getPath: (e) => {
                  for (var r; ; ) {
                    if (FS.isRoot(e)) {
                      var t = e.mount.mountpoint;
                      return r
                        ? "/" !== t[t.length - 1]
                          ? t + "/" + r
                          : t + r
                        : t;
                    }
                    (r = r ? e.name + "/" + r : e.name), (e = e.parent);
                  }
                },
                hashName: (e, r) => {
                  for (var t = 0, n = 0; n < r.length; n++)
                    t = ((t << 5) - t + r.charCodeAt(n)) | 0;
                  return ((e + t) >>> 0) % FS.nameTable.length;
                },
                hashAddNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  (e.name_next = FS.nameTable[r]), (FS.nameTable[r] = e);
                },
                hashRemoveNode: (e) => {
                  var r = FS.hashName(e.parent.id, e.name);
                  if (FS.nameTable[r] === e) FS.nameTable[r] = e.name_next;
                  else
                    for (var t = FS.nameTable[r]; t; ) {
                      if (t.name_next === e) {
                        t.name_next = e.name_next;
                        break;
                      }
                      t = t.name_next;
                    }
                },
                lookupNode: (e, r) => {
                  var t = FS.mayLookup(e);
                  if (t) throw new FS.ErrnoError(t, e);
                  for (
                    var n = FS.hashName(e.id, r), o = FS.nameTable[n];
                    o;
                    o = o.name_next
                  ) {
                    var a = o.name;
                    if (o.parent.id === e.id && a === r) return o;
                  }
                  return FS.lookup(e, r);
                },
                createNode: (e, r, t, n) => {
                  var o = new FS.FSNode(e, r, t, n);
                  return FS.hashAddNode(o), o;
                },
                destroyNode: (e) => {
                  FS.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagModes: {
                  r: 0,
                  "r+": 2,
                  w: 577,
                  "w+": 578,
                  a: 1089,
                  "a+": 1090,
                },
                modeStringToFlags: (e) => {
                  var r = FS.flagModes[e];
                  if (void 0 === r)
                    throw new Error("Unknown file open mode: " + e);
                  return r;
                },
                flagsToPermissionString: (e) => {
                  var r = ["r", "w", "rw"][3 & e];
                  return 512 & e && (r += "w"), r;
                },
                nodePermissions: (e, r) =>
                  FS.ignorePermissions ||
                  ((!r.includes("r") || 292 & e.mode) &&
                    (!r.includes("w") || 146 & e.mode) &&
                    (!r.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  FS.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, r) => {
                  try {
                    return FS.lookupNode(e, r), 20;
                  } catch (e) {}
                  return FS.nodePermissions(e, "wx");
                },
                mayDelete: (e, r, t) => {
                  var n;
                  try {
                    n = FS.lookupNode(e, r);
                  } catch (e) {
                    return e.errno;
                  }
                  var o = FS.nodePermissions(e, "wx");
                  if (o) return o;
                  if (t) {
                    if (!FS.isDir(n.mode)) return 54;
                    if (FS.isRoot(n) || FS.getPath(n) === FS.cwd()) return 10;
                  } else if (FS.isDir(n.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, r) =>
                  e
                    ? FS.isLink(e.mode)
                      ? 32
                      : FS.isDir(e.mode) &&
                        ("r" !== FS.flagsToPermissionString(r) || 512 & r)
                      ? 31
                      : FS.nodePermissions(e, FS.flagsToPermissionString(r))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: (e = 0, r = FS.MAX_OPEN_FDS) => {
                  for (var t = e; t <= r; t++) if (!FS.streams[t]) return t;
                  throw new FS.ErrnoError(33);
                },
                getStream: (e) => FS.streams[e],
                createStream: (e, r, t) => {
                  FS.FSStream ||
                    ((FS.FSStream = function () {
                      this.shared = {};
                    }),
                    (FS.FSStream.prototype = {}),
                    Object.defineProperties(FS.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                    (e = Object.assign(new FS.FSStream(), e));
                  var n = FS.nextfd(r, t);
                  return (e.fd = n), (FS.streams[n] = e), e;
                },
                closeStream: (e) => {
                  FS.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var r = FS.getDevice(e.node.rdev);
                    (e.stream_ops = r.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new FS.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, r) => (e << 8) | r,
                registerDevice: (e, r) => {
                  FS.devices[e] = { stream_ops: r };
                },
                getDevice: (e) => FS.devices[e],
                getMounts: (e) => {
                  for (var r = [], t = [e]; t.length; ) {
                    var n = t.pop();
                    r.push(n), t.push.apply(t, n.mounts);
                  }
                  return r;
                },
                syncfs: (e, r) => {
                  "function" == typeof e && ((r = e), (e = !1)),
                    FS.syncFSRequests++,
                    FS.syncFSRequests > 1 &&
                      err(
                        "warning: " +
                          FS.syncFSRequests +
                          " FS.syncfs operations in flight at once, probably just doing extra work"
                      );
                  var t = FS.getMounts(FS.root.mount),
                    n = 0;
                  function o(e) {
                    return FS.syncFSRequests--, r(e);
                  }
                  function a(e) {
                    if (e) return a.errored ? void 0 : ((a.errored = !0), o(e));
                    ++n >= t.length && o(null);
                  }
                  t.forEach((r) => {
                    if (!r.type.syncfs) return a(null);
                    r.type.syncfs(r, e, a);
                  });
                },
                mount: (e, r, t) => {
                  var n,
                    o = "/" === t,
                    a = !t;
                  if (o && FS.root) throw new FS.ErrnoError(10);
                  if (!o && !a) {
                    var i = FS.lookupPath(t, { follow_mount: !1 });
                    if (((t = i.path), (n = i.node), FS.isMountpoint(n)))
                      throw new FS.ErrnoError(10);
                    if (!FS.isDir(n.mode)) throw new FS.ErrnoError(54);
                  }
                  var s = { type: e, opts: r, mountpoint: t, mounts: [] },
                    c = e.mount(s);
                  return (
                    (c.mount = s),
                    (s.root = c),
                    o
                      ? (FS.root = c)
                      : n &&
                        ((n.mounted = s), n.mount && n.mount.mounts.push(s)),
                    c
                  );
                },
                unmount: (e) => {
                  var r = FS.lookupPath(e, { follow_mount: !1 });
                  if (!FS.isMountpoint(r.node)) throw new FS.ErrnoError(28);
                  var t = r.node,
                    n = t.mounted,
                    o = FS.getMounts(n);
                  Object.keys(FS.nameTable).forEach((e) => {
                    for (var r = FS.nameTable[e]; r; ) {
                      var t = r.name_next;
                      o.includes(r.mount) && FS.destroyNode(r), (r = t);
                    }
                  }),
                    (t.mounted = null);
                  var a = t.mount.mounts.indexOf(n);
                  t.mount.mounts.splice(a, 1);
                },
                lookup: (e, r) => e.node_ops.lookup(e, r),
                mknod: (e, r, t) => {
                  var n = FS.lookupPath(e, { parent: !0 }).node,
                    o = PATH.basename(e);
                  if (!o || "." === o || ".." === o)
                    throw new FS.ErrnoError(28);
                  var a = FS.mayCreate(n, o);
                  if (a) throw new FS.ErrnoError(a);
                  if (!n.node_ops.mknod) throw new FS.ErrnoError(63);
                  return n.node_ops.mknod(n, o, r, t);
                },
                create: (e, r) => (
                  (r = void 0 !== r ? r : 438),
                  (r &= 4095),
                  (r |= 32768),
                  FS.mknod(e, r, 0)
                ),
                mkdir: (e, r) => (
                  (r = void 0 !== r ? r : 511),
                  (r &= 1023),
                  (r |= 16384),
                  FS.mknod(e, r, 0)
                ),
                mkdirTree: (e, r) => {
                  for (var t = e.split("/"), n = "", o = 0; o < t.length; ++o)
                    if (t[o]) {
                      n += "/" + t[o];
                      try {
                        FS.mkdir(n, r);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, r, t) => (
                  void 0 === t && ((t = r), (r = 438)),
                  (r |= 8192),
                  FS.mknod(e, r, t)
                ),
                symlink: (e, r) => {
                  if (!PATH_FS.resolve(e)) throw new FS.ErrnoError(44);
                  var t = FS.lookupPath(r, { parent: !0 }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  var n = PATH.basename(r),
                    o = FS.mayCreate(t, n);
                  if (o) throw new FS.ErrnoError(o);
                  if (!t.node_ops.symlink) throw new FS.ErrnoError(63);
                  return t.node_ops.symlink(t, n, e);
                },
                rename: (e, r) => {
                  var t,
                    n,
                    o = PATH.dirname(e),
                    a = PATH.dirname(r),
                    i = PATH.basename(e),
                    s = PATH.basename(r);
                  if (
                    ((t = FS.lookupPath(e, { parent: !0 }).node),
                    (n = FS.lookupPath(r, { parent: !0 }).node),
                    !t || !n)
                  )
                    throw new FS.ErrnoError(44);
                  if (t.mount !== n.mount) throw new FS.ErrnoError(75);
                  var c,
                    u = FS.lookupNode(t, i),
                    l = PATH_FS.relative(e, a);
                  if ("." !== l.charAt(0)) throw new FS.ErrnoError(28);
                  if ("." !== (l = PATH_FS.relative(r, o)).charAt(0))
                    throw new FS.ErrnoError(55);
                  try {
                    c = FS.lookupNode(n, s);
                  } catch (e) {}
                  if (u !== c) {
                    var d = FS.isDir(u.mode),
                      f = FS.mayDelete(t, i, d);
                    if (f) throw new FS.ErrnoError(f);
                    if ((f = c ? FS.mayDelete(n, s, d) : FS.mayCreate(n, s)))
                      throw new FS.ErrnoError(f);
                    if (!t.node_ops.rename) throw new FS.ErrnoError(63);
                    if (FS.isMountpoint(u) || (c && FS.isMountpoint(c)))
                      throw new FS.ErrnoError(10);
                    if (n !== t && (f = FS.nodePermissions(t, "w")))
                      throw new FS.ErrnoError(f);
                    FS.hashRemoveNode(u);
                    try {
                      t.node_ops.rename(u, n, s);
                    } catch (e) {
                      throw e;
                    } finally {
                      FS.hashAddNode(u);
                    }
                  }
                },
                rmdir: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node,
                    t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !0);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.rmdir) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.rmdir(r, t), FS.destroyNode(n);
                },
                readdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 }).node;
                  if (!r.node_ops.readdir) throw new FS.ErrnoError(54);
                  return r.node_ops.readdir(r);
                },
                unlink: (e) => {
                  var r = FS.lookupPath(e, { parent: !0 }).node;
                  if (!r) throw new FS.ErrnoError(44);
                  var t = PATH.basename(e),
                    n = FS.lookupNode(r, t),
                    o = FS.mayDelete(r, t, !1);
                  if (o) throw new FS.ErrnoError(o);
                  if (!r.node_ops.unlink) throw new FS.ErrnoError(63);
                  if (FS.isMountpoint(n)) throw new FS.ErrnoError(10);
                  r.node_ops.unlink(r, t), FS.destroyNode(n);
                },
                readlink: (e) => {
                  var r = FS.lookupPath(e).node;
                  if (!r) throw new FS.ErrnoError(44);
                  if (!r.node_ops.readlink) throw new FS.ErrnoError(28);
                  return PATH_FS.resolve(
                    FS.getPath(r.parent),
                    r.node_ops.readlink(r)
                  );
                },
                stat: (e, r) => {
                  var t = FS.lookupPath(e, { follow: !r }).node;
                  if (!t) throw new FS.ErrnoError(44);
                  if (!t.node_ops.getattr) throw new FS.ErrnoError(63);
                  return t.node_ops.getattr(t);
                },
                lstat: (e) => FS.stat(e, !0),
                chmod: (e, r, t) => {
                  var n;
                  if (
                    !(n =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !t }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  n.node_ops.setattr(n, {
                    mode: (4095 & r) | (-4096 & n.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, r) => {
                  FS.chmod(e, r, !0);
                },
                fchmod: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  FS.chmod(t.node, r);
                },
                chown: (e, r, t, n) => {
                  var o;
                  if (
                    !(o =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !n }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  o.node_ops.setattr(o, { timestamp: Date.now() });
                },
                lchown: (e, r, t) => {
                  FS.chown(e, r, t, !0);
                },
                fchown: (e, r, t) => {
                  var n = FS.getStream(e);
                  if (!n) throw new FS.ErrnoError(8);
                  FS.chown(n.node, r, t);
                },
                truncate: (e, r) => {
                  if (r < 0) throw new FS.ErrnoError(28);
                  var t;
                  if (
                    !(t =
                      "string" == typeof e
                        ? FS.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new FS.ErrnoError(63);
                  if (FS.isDir(t.mode)) throw new FS.ErrnoError(31);
                  if (!FS.isFile(t.mode)) throw new FS.ErrnoError(28);
                  var n = FS.nodePermissions(t, "w");
                  if (n) throw new FS.ErrnoError(n);
                  t.node_ops.setattr(t, { size: r, timestamp: Date.now() });
                },
                ftruncate: (e, r) => {
                  var t = FS.getStream(e);
                  if (!t) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & t.flags)) throw new FS.ErrnoError(28);
                  FS.truncate(t.node, r);
                },
                utime: (e, r, t) => {
                  var n = FS.lookupPath(e, { follow: !0 }).node;
                  n.node_ops.setattr(n, { timestamp: Math.max(r, t) });
                },
                open: (e, r, t) => {
                  if ("" === e) throw new FS.ErrnoError(44);
                  var n;
                  if (
                    ((t = void 0 === t ? 438 : t),
                    (t =
                      64 &
                      (r = "string" == typeof r ? FS.modeStringToFlags(r) : r)
                        ? (4095 & t) | 32768
                        : 0),
                    "object" == typeof e)
                  )
                    n = e;
                  else {
                    e = PATH.normalize(e);
                    try {
                      n = FS.lookupPath(e, { follow: !(131072 & r) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & r)
                    if (n) {
                      if (128 & r) throw new FS.ErrnoError(20);
                    } else (n = FS.mknod(e, t, 0)), (o = !0);
                  if (!n) throw new FS.ErrnoError(44);
                  if (
                    (FS.isChrdev(n.mode) && (r &= -513),
                    65536 & r && !FS.isDir(n.mode))
                  )
                    throw new FS.ErrnoError(54);
                  if (!o) {
                    var a = FS.mayOpen(n, r);
                    if (a) throw new FS.ErrnoError(a);
                  }
                  512 & r && !o && FS.truncate(n, 0), (r &= -131713);
                  var i = FS.createStream({
                    node: n,
                    path: FS.getPath(n),
                    flags: r,
                    seekable: !0,
                    position: 0,
                    stream_ops: n.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    i.stream_ops.open && i.stream_ops.open(i),
                    !Module.logReadFiles ||
                      1 & r ||
                      (FS.readFiles || (FS.readFiles = {}),
                      e in FS.readFiles || (FS.readFiles[e] = 1)),
                    i
                  );
                },
                close: (e) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    FS.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new FS.ErrnoError(70);
                  if (0 != t && 1 != t && 2 != t) throw new FS.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, r, t)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, r, t, n, o) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.read) throw new FS.ErrnoError(28);
                  var a = void 0 !== o;
                  if (a) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var i = e.stream_ops.read(e, r, t, n, o);
                  return a || (e.position += i), i;
                },
                write: (e, r, t, n, o, a) => {
                  if (n < 0 || o < 0) throw new FS.ErrnoError(28);
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (FS.isDir(e.node.mode)) throw new FS.ErrnoError(31);
                  if (!e.stream_ops.write) throw new FS.ErrnoError(28);
                  e.seekable && 1024 & e.flags && FS.llseek(e, 0, 2);
                  var i = void 0 !== o;
                  if (i) {
                    if (!e.seekable) throw new FS.ErrnoError(70);
                  } else o = e.position;
                  var s = e.stream_ops.write(e, r, t, n, o, a);
                  return i || (e.position += s), s;
                },
                allocate: (e, r, t) => {
                  if (FS.isClosed(e)) throw new FS.ErrnoError(8);
                  if (r < 0 || t <= 0) throw new FS.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new FS.ErrnoError(8);
                  if (!FS.isFile(e.node.mode) && !FS.isDir(e.node.mode))
                    throw new FS.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new FS.ErrnoError(138);
                  e.stream_ops.allocate(e, r, t);
                },
                mmap: (e, r, t, n, o) => {
                  if (0 != (2 & n) && 0 == (2 & o) && 2 != (2097155 & e.flags))
                    throw new FS.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new FS.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new FS.ErrnoError(43);
                  return e.stream_ops.mmap(e, r, t, n, o);
                },
                msync: (e, r, t, n, o) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, r, t, n, o) : 0,
                munmap: (e) => 0,
                ioctl: (e, r, t) => {
                  if (!e.stream_ops.ioctl) throw new FS.ErrnoError(59);
                  return e.stream_ops.ioctl(e, r, t);
                },
                readFile: (e, r = {}) => {
                  if (
                    ((r.flags = r.flags || 0),
                    (r.encoding = r.encoding || "binary"),
                    "utf8" !== r.encoding && "binary" !== r.encoding)
                  )
                    throw new Error(
                      'Invalid encoding type "' + r.encoding + '"'
                    );
                  var t,
                    n = FS.open(e, r.flags),
                    o = FS.stat(e).size,
                    a = new Uint8Array(o);
                  return (
                    FS.read(n, a, 0, o, 0),
                    "utf8" === r.encoding
                      ? (t = UTF8ArrayToString(a, 0))
                      : "binary" === r.encoding && (t = a),
                    FS.close(n),
                    t
                  );
                },
                writeFile: (e, r, t = {}) => {
                  t.flags = t.flags || 577;
                  var n = FS.open(e, t.flags, t.mode);
                  if ("string" == typeof r) {
                    var o = new Uint8Array(lengthBytesUTF8(r) + 1),
                      a = stringToUTF8Array(r, o, 0, o.length);
                    FS.write(n, o, 0, a, void 0, t.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(r))
                      throw new Error("Unsupported data type");
                    FS.write(n, r, 0, r.byteLength, void 0, t.canOwn);
                  }
                  FS.close(n);
                },
                cwd: () => FS.currentPath,
                chdir: (e) => {
                  var r = FS.lookupPath(e, { follow: !0 });
                  if (null === r.node) throw new FS.ErrnoError(44);
                  if (!FS.isDir(r.node.mode)) throw new FS.ErrnoError(54);
                  var t = FS.nodePermissions(r.node, "x");
                  if (t) throw new FS.ErrnoError(t);
                  FS.currentPath = r.path;
                },
                createDefaultDirectories: () => {
                  FS.mkdir("/tmp"),
                    FS.mkdir("/home"),
                    FS.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  FS.mkdir("/dev"),
                    FS.registerDevice(FS.makedev(1, 3), {
                      read: () => 0,
                      write: (e, r, t, n, o) => n,
                    }),
                    FS.mkdev("/dev/null", FS.makedev(1, 3)),
                    TTY.register(FS.makedev(5, 0), TTY.default_tty_ops),
                    TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops),
                    FS.mkdev("/dev/tty", FS.makedev(5, 0)),
                    FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                  var e = getRandomDevice();
                  FS.createDevice("/dev", "random", e),
                    FS.createDevice("/dev", "urandom", e),
                    FS.mkdir("/dev/shm"),
                    FS.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  FS.mkdir("/proc");
                  var e = FS.mkdir("/proc/self");
                  FS.mkdir("/proc/self/fd"),
                    FS.mount(
                      {
                        mount: () => {
                          var r = FS.createNode(e, "fd", 16895, 73);
                          return (
                            (r.node_ops = {
                              lookup: (e, r) => {
                                var t = +r,
                                  n = FS.getStream(t);
                                if (!n) throw new FS.ErrnoError(8);
                                var o = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => n.path },
                                };
                                return (o.parent = o), o;
                              },
                            }),
                            r
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  Module.stdin
                    ? FS.createDevice("/dev", "stdin", Module.stdin)
                    : FS.symlink("/dev/tty", "/dev/stdin"),
                    Module.stdout
                      ? FS.createDevice("/dev", "stdout", null, Module.stdout)
                      : FS.symlink("/dev/tty", "/dev/stdout"),
                    Module.stderr
                      ? FS.createDevice("/dev", "stderr", null, Module.stderr)
                      : FS.symlink("/dev/tty1", "/dev/stderr"),
                    FS.open("/dev/stdin", 0),
                    FS.open("/dev/stdout", 1),
                    FS.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  FS.ErrnoError ||
                    ((FS.ErrnoError = function (e, r) {
                      (this.node = r),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (FS.ErrnoError.prototype = new Error()),
                    (FS.ErrnoError.prototype.constructor = FS.ErrnoError),
                    [44].forEach((e) => {
                      (FS.genericErrors[e] = new FS.ErrnoError(e)),
                        (FS.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  FS.ensureErrnoError(),
                    (FS.nameTable = new Array(4096)),
                    FS.mount(MEMFS, {}, "/"),
                    FS.createDefaultDirectories(),
                    FS.createDefaultDevices(),
                    FS.createSpecialDirectories(),
                    (FS.filesystems = { MEMFS, IDBFS, PROXYFS });
                },
                init: (e, r, t) => {
                  (FS.init.initialized = !0),
                    FS.ensureErrnoError(),
                    (Module.stdin = e || Module.stdin),
                    (Module.stdout = r || Module.stdout),
                    (Module.stderr = t || Module.stderr),
                    FS.createStandardStreams();
                },
                quit: () => {
                  FS.init.initialized = !1;
                  for (var e = 0; e < FS.streams.length; e++) {
                    var r = FS.streams[e];
                    r && FS.close(r);
                  }
                },
                getMode: (e, r) => {
                  var t = 0;
                  return e && (t |= 365), r && (t |= 146), t;
                },
                findObject: (e, r) => {
                  var t = FS.analyzePath(e, r);
                  return t.exists ? t.object : null;
                },
                analyzePath: (e, r) => {
                  try {
                    e = (n = FS.lookupPath(e, { follow: !r })).path;
                  } catch (e) {}
                  var t = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var n = FS.lookupPath(e, { parent: !0 });
                    (t.parentExists = !0),
                      (t.parentPath = n.path),
                      (t.parentObject = n.node),
                      (t.name = PATH.basename(e)),
                      (n = FS.lookupPath(e, { follow: !r })),
                      (t.exists = !0),
                      (t.path = n.path),
                      (t.object = n.node),
                      (t.name = n.node.name),
                      (t.isRoot = "/" === n.path);
                  } catch (e) {
                    t.error = e.errno;
                  }
                  return t;
                },
                createPath: (e, r, t, n) => {
                  e = "string" == typeof e ? e : FS.getPath(e);
                  for (var o = r.split("/").reverse(); o.length; ) {
                    var a = o.pop();
                    if (a) {
                      var i = PATH.join2(e, a);
                      try {
                        FS.mkdir(i);
                      } catch (e) {}
                      e = i;
                    }
                  }
                  return i;
                },
                createFile: (e, r, t, n, o) => {
                  var a = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    i = FS.getMode(n, o);
                  return FS.create(a, i);
                },
                createDataFile: (e, r, t, n, o, a) => {
                  var i = r;
                  e &&
                    ((e = "string" == typeof e ? e : FS.getPath(e)),
                    (i = r ? PATH.join2(e, r) : e));
                  var s = FS.getMode(n, o),
                    c = FS.create(i, s);
                  if (t) {
                    if ("string" == typeof t) {
                      for (
                        var u = new Array(t.length), l = 0, d = t.length;
                        l < d;
                        ++l
                      )
                        u[l] = t.charCodeAt(l);
                      t = u;
                    }
                    FS.chmod(c, 146 | s);
                    var f = FS.open(c, 577);
                    FS.write(f, t, 0, t.length, 0, a),
                      FS.close(f),
                      FS.chmod(c, s);
                  }
                  return c;
                },
                createDevice: (e, r, t, n) => {
                  var o = PATH.join2(
                      "string" == typeof e ? e : FS.getPath(e),
                      r
                    ),
                    a = FS.getMode(!!t, !!n);
                  FS.createDevice.major || (FS.createDevice.major = 64);
                  var i = FS.makedev(FS.createDevice.major++, 0);
                  return (
                    FS.registerDevice(i, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        n && n.buffer && n.buffer.length && n(10);
                      },
                      read: (e, r, n, o, a) => {
                        for (var i = 0, s = 0; s < o; s++) {
                          var c;
                          try {
                            c = t();
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                          if (void 0 === c && 0 === i)
                            throw new FS.ErrnoError(6);
                          if (null == c) break;
                          i++, (r[n + s] = c);
                        }
                        return i && (e.node.timestamp = Date.now()), i;
                      },
                      write: (e, r, t, o, a) => {
                        for (var i = 0; i < o; i++)
                          try {
                            n(r[t + i]);
                          } catch (e) {
                            throw new FS.ErrnoError(29);
                          }
                        return o && (e.node.timestamp = Date.now()), i;
                      },
                    }),
                    FS.mkdev(o, a, i)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!read_)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = intArrayFromString(read_(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new FS.ErrnoError(29);
                  }
                },
                createLazyFile: (e, r, t, n, o) => {
                  function a() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((a.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var r = e % this.chunkSize,
                          t = (e / this.chunkSize) | 0;
                        return this.getter(t)[r];
                      }
                    }),
                    (a.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (a.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", t, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + t + ". Status: " + e.status
                        );
                      var r,
                        n = Number(e.getResponseHeader("Content-length")),
                        o =
                          (r = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === r,
                        a =
                          (r = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === r,
                        i = 1048576;
                      o || (i = n);
                      var s = this;
                      s.setDataGetter((e) => {
                        var r = e * i,
                          o = (e + 1) * i - 1;
                        if (
                          ((o = Math.min(o, n - 1)),
                          void 0 === s.chunks[e] &&
                            (s.chunks[e] = ((e, r) => {
                              if (e > r)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    r +
                                    ") or no bytes requested!"
                                );
                              if (r > n - 1)
                                throw new Error(
                                  "only " +
                                    n +
                                    " bytes available! programmer error!"
                                );
                              var o = new XMLHttpRequest();
                              if (
                                (o.open("GET", t, !1),
                                n !== i &&
                                  o.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + r
                                  ),
                                (o.responseType = "arraybuffer"),
                                o.overrideMimeType &&
                                  o.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                o.send(null),
                                !(
                                  (o.status >= 200 && o.status < 300) ||
                                  304 === o.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + t + ". Status: " + o.status
                                );
                              return void 0 !== o.response
                                ? new Uint8Array(o.response || [])
                                : intArrayFromString(o.responseText || "", !0);
                            })(r, o)),
                          void 0 === s.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return s.chunks[e];
                      }),
                        (!a && n) ||
                          ((i = n = 1),
                          (n = this.getter(0).length),
                          (i = n),
                          out(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = n),
                        (this._chunkSize = i),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!ENVIRONMENT_IS_WORKER)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var i = new a();
                    Object.defineProperties(i, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var s = { isDevice: !1, contents: i };
                  } else s = { isDevice: !1, url: t };
                  var c = FS.createFile(e, r, s, n, o);
                  s.contents
                    ? (c.contents = s.contents)
                    : s.url && ((c.contents = null), (c.url = s.url)),
                    Object.defineProperties(c, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var u = {};
                  function l(e, r, t, n, o) {
                    var a = e.node.contents;
                    if (o >= a.length) return 0;
                    var i = Math.min(a.length - o, n);
                    if (a.slice)
                      for (var s = 0; s < i; s++) r[t + s] = a[o + s];
                    else for (s = 0; s < i; s++) r[t + s] = a.get(o + s);
                    return i;
                  }
                  return (
                    Object.keys(c.stream_ops).forEach((e) => {
                      var r = c.stream_ops[e];
                      u[e] = function () {
                        return FS.forceLoadFile(c), r.apply(null, arguments);
                      };
                    }),
                    (u.read = (e, r, t, n, o) => (
                      FS.forceLoadFile(c), l(e, r, t, n, o)
                    )),
                    (u.mmap = (e, r, t, n, o) => {
                      FS.forceLoadFile(c);
                      var a = mmapAlloc(r);
                      if (!a) throw new FS.ErrnoError(48);
                      return l(e, HEAP8, a, r, t), { ptr: a, allocated: !0 };
                    }),
                    (c.stream_ops = u),
                    c
                  );
                },
                createPreloadedFile: (e, r, t, n, o, a, i, s, c, u) => {
                  var l = r ? PATH_FS.resolve(PATH.join2(e, r)) : e,
                    d = getUniqueRunDependency("cp " + l);
                  function f(t) {
                    function f(t) {
                      u && u(),
                        s || FS.createDataFile(e, r, t, n, o, c),
                        a && a(),
                        removeRunDependency(d);
                    }
                    Browser.handledByPreloadPlugin(t, l, f, () => {
                      i && i(), removeRunDependency(d);
                    }) || f(t);
                  }
                  addRunDependency(d),
                    "string" == typeof t ? asyncLoad(t, (e) => f(e), i) : f(t);
                },
                indexedDB: () =>
                  window.indexedDB ||
                  window.mozIndexedDB ||
                  window.webkitIndexedDB ||
                  window.msIndexedDB,
                DB_NAME: () => "EM_FS_" + window.location.pathname,
                DB_VERSION: 20,
                DB_STORE_NAME: "FILE_DATA",
                saveFilesToDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = () => {
                    out("creating db"),
                      o.result.createObjectStore(FS.DB_STORE_NAME);
                  }),
                    (o.onsuccess = () => {
                      var n = o.result.transaction(
                          [FS.DB_STORE_NAME],
                          "readwrite"
                        ),
                        a = n.objectStore(FS.DB_STORE_NAME),
                        i = 0,
                        s = 0,
                        c = e.length;
                      function u() {
                        0 == s ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = a.put(FS.analyzePath(e).object.contents, e);
                        (r.onsuccess = () => {
                          ++i + s == c && u();
                        }),
                          (r.onerror = () => {
                            s++, i + s == c && u();
                          });
                      }),
                        (n.onerror = t);
                    }),
                    (o.onerror = t);
                },
                loadFilesFromDB: (e, r, t) => {
                  (r = r || (() => {})), (t = t || (() => {}));
                  var n = FS.indexedDB();
                  try {
                    var o = n.open(FS.DB_NAME(), FS.DB_VERSION);
                  } catch (e) {
                    return t(e);
                  }
                  (o.onupgradeneeded = t),
                    (o.onsuccess = () => {
                      var n = o.result;
                      try {
                        var a = n.transaction([FS.DB_STORE_NAME], "readonly");
                      } catch (e) {
                        return void t(e);
                      }
                      var i = a.objectStore(FS.DB_STORE_NAME),
                        s = 0,
                        c = 0,
                        u = e.length;
                      function l() {
                        0 == c ? r() : t();
                      }
                      e.forEach((e) => {
                        var r = i.get(e);
                        (r.onsuccess = () => {
                          FS.analyzePath(e).exists && FS.unlink(e),
                            FS.createDataFile(
                              PATH.dirname(e),
                              PATH.basename(e),
                              r.result,
                              !0,
                              !0,
                              !0
                            ),
                            ++s + c == u && l();
                        }),
                          (r.onerror = () => {
                            c++, s + c == u && l();
                          });
                      }),
                        (a.onerror = t);
                    }),
                    (o.onerror = t);
                },
              },
              SYSCALLS = {
                DEFAULT_POLLMASK: 5,
                calculateAt: function (e, r, t) {
                  if (PATH.isAbs(r)) return r;
                  var n;
                  if (
                    ((n =
                      -100 === e ? FS.cwd() : SYSCALLS.getStreamFromFD(e).path),
                    0 == r.length)
                  ) {
                    if (!t) throw new FS.ErrnoError(44);
                    return n;
                  }
                  return PATH.join2(n, r);
                },
                doStat: function (e, r, t) {
                  try {
                    var n = e(r);
                  } catch (e) {
                    if (
                      e &&
                      e.node &&
                      PATH.normalize(r) !== PATH.normalize(FS.getPath(e.node))
                    )
                      return -54;
                    throw e;
                  }
                  return (
                    (HEAP32[t >> 2] = n.dev),
                    (HEAP32[(t + 8) >> 2] = n.ino),
                    (HEAP32[(t + 12) >> 2] = n.mode),
                    (HEAPU32[(t + 16) >> 2] = n.nlink),
                    (HEAP32[(t + 20) >> 2] = n.uid),
                    (HEAP32[(t + 24) >> 2] = n.gid),
                    (HEAP32[(t + 28) >> 2] = n.rdev),
                    (tempI64 = [
                      n.size >>> 0,
                      ((tempDouble = n.size),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 40) >> 2] = tempI64[0]),
                    (HEAP32[(t + 44) >> 2] = tempI64[1]),
                    (HEAP32[(t + 48) >> 2] = 4096),
                    (HEAP32[(t + 52) >> 2] = n.blocks),
                    (tempI64 = [
                      Math.floor(n.atime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.atime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 56) >> 2] = tempI64[0]),
                    (HEAP32[(t + 60) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 64) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.mtime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.mtime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 72) >> 2] = tempI64[0]),
                    (HEAP32[(t + 76) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 80) >> 2] = 0),
                    (tempI64 = [
                      Math.floor(n.ctime.getTime() / 1e3) >>> 0,
                      ((tempDouble = Math.floor(n.ctime.getTime() / 1e3)),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 88) >> 2] = tempI64[0]),
                    (HEAP32[(t + 92) >> 2] = tempI64[1]),
                    (HEAPU32[(t + 96) >> 2] = 0),
                    (tempI64 = [
                      n.ino >>> 0,
                      ((tempDouble = n.ino),
                      +Math.abs(tempDouble) >= 1
                        ? tempDouble > 0
                          ? (0 |
                              Math.min(
                                +Math.floor(tempDouble / 4294967296),
                                4294967295
                              )) >>>
                            0
                          : ~~+Math.ceil(
                              (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                            ) >>> 0
                        : 0),
                    ]),
                    (HEAP32[(t + 104) >> 2] = tempI64[0]),
                    (HEAP32[(t + 108) >> 2] = tempI64[1]),
                    0
                  );
                },
                doMsync: function (e, r, t, n, o) {
                  if (!FS.isFile(r.node.mode)) throw new FS.ErrnoError(43);
                  if (2 & n) return 0;
                  var a = HEAPU8.slice(e, e + t);
                  FS.msync(r, a, o, t, n);
                },
                varargs: void 0,
                get: function () {
                  return (
                    (SYSCALLS.varargs += 4), HEAP32[(SYSCALLS.varargs - 4) >> 2]
                  );
                },
                getStr: function (e) {
                  return UTF8ToString(e);
                },
                getStreamFromFD: function (e) {
                  var r = FS.getStream(e);
                  if (!r) throw new FS.ErrnoError(8);
                  return r;
                },
              };
            function ___syscall_chmod(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), FS.chmod(e, r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function setErrNo(e) {
              return (HEAP32[___errno_location() >> 2] = e), e;
            }
            function ___syscall_fcntl64(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 0:
                    return (o = SYSCALLS.get()) < 0
                      ? -28
                      : FS.createStream(n, o).fd;
                  case 1:
                  case 2:
                  case 6:
                  case 7:
                    return 0;
                  case 3:
                    return n.flags;
                  case 4:
                    var o = SYSCALLS.get();
                    return (n.flags |= o), 0;
                  case 5:
                    return (o = SYSCALLS.get()), (HEAP16[(o + 0) >> 1] = 2), 0;
                  case 16:
                  case 8:
                  default:
                    return -28;
                  case 9:
                    return setErrNo(28), -1;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_ioctl(e, r, t) {
              SYSCALLS.varargs = t;
              try {
                var n = SYSCALLS.getStreamFromFD(e);
                switch (r) {
                  case 21509:
                  case 21505:
                  case 21510:
                  case 21511:
                  case 21512:
                  case 21506:
                  case 21507:
                  case 21508:
                  case 21523:
                  case 21524:
                    return n.tty ? 0 : -59;
                  case 21519:
                    if (!n.tty) return -59;
                    var o = SYSCALLS.get();
                    return (HEAP32[o >> 2] = 0), 0;
                  case 21520:
                    return n.tty ? -28 : -59;
                  case 21531:
                    return (o = SYSCALLS.get()), FS.ioctl(n, r, o);
                  default:
                    return -28;
                }
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_lstat64(e, r) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.lstat, e, r)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_mkdirat(e, r, t) {
              try {
                return (
                  (r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  "/" === (r = PATH.normalize(r))[r.length - 1] &&
                    (r = r.substr(0, r.length - 1)),
                  FS.mkdir(r, t, 0),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_newfstatat(e, r, t, n) {
              try {
                r = SYSCALLS.getStr(r);
                var o = 256 & n,
                  a = 4096 & n;
                return (
                  (n &= -4353),
                  (r = SYSCALLS.calculateAt(e, r, a)),
                  SYSCALLS.doStat(o ? FS.lstat : FS.stat, r, t)
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_openat(e, r, t, n) {
              SYSCALLS.varargs = n;
              try {
                (r = SYSCALLS.getStr(r)), (r = SYSCALLS.calculateAt(e, r));
                var o = n ? SYSCALLS.get() : 0;
                return FS.open(r, t, o).fd;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_readlinkat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r)),
                  n <= 0)
                )
                  return -28;
                var o = FS.readlink(r),
                  a = Math.min(n, lengthBytesUTF8(o)),
                  i = HEAP8[t + a];
                return stringToUTF8(o, t, n + 1), (HEAP8[t + a] = i), a;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_stat64(e, r) {
              try {
                return (e = SYSCALLS.getStr(e)), SYSCALLS.doStat(FS.stat, e, r);
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function ___syscall_symlink(e, r) {
              try {
                return (
                  (e = SYSCALLS.getStr(e)),
                  (r = SYSCALLS.getStr(r)),
                  FS.symlink(e, r),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function readI53FromI64(e) {
              return HEAPU32[e >> 2] + 4294967296 * HEAP32[(e + 4) >> 2];
            }
            function ___syscall_utimensat(e, r, t, n) {
              try {
                if (
                  ((r = SYSCALLS.getStr(r)),
                  (r = SYSCALLS.calculateAt(e, r, !0)),
                  t)
                ) {
                  var o = readI53FromI64(t),
                    a = HEAP32[(t + 8) >> 2];
                  (i = 1e3 * o + a / 1e6),
                    (s =
                      1e3 * (o = readI53FromI64((t += 16))) +
                      (a = HEAP32[(t + 8) >> 2]) / 1e6);
                } else
                  var i = Date.now(),
                    s = i;
                return FS.utime(r, i, s), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return -e.errno;
              }
            }
            function _abort() {
              abort("");
            }
            function _emscripten_memcpy_big(e, r, t) {
              HEAPU8.copyWithin(e, r, r + t);
            }
            function getHeapMax() {
              return 2147483648;
            }
            function emscripten_realloc_buffer(e) {
              try {
                return (
                  wasmMemory.grow((e - buffer.byteLength + 65535) >>> 16),
                  updateGlobalBufferAndViews(wasmMemory.buffer),
                  1
                );
              } catch (e) {}
            }
            function _emscripten_resize_heap(e) {
              var r = HEAPU8.length;
              e >>>= 0;
              var t,
                n = getHeapMax();
              if (e > n) return !1;
              for (var o = 1; o <= 4; o *= 2) {
                var a = r * (1 + 0.2 / o);
                if (
                  ((a = Math.min(a, e + 100663296)),
                  emscripten_realloc_buffer(
                    Math.min(
                      n,
                      (t = Math.max(e, a)) + ((65536 - (t % 65536)) % 65536)
                    )
                  ))
                )
                  return !0;
              }
              return !1;
            }
            var ENV = {};
            function getExecutableName() {
              return thisProgram || "./this.program";
            }
            function getEnvStrings() {
              if (!getEnvStrings.strings) {
                var e = {
                  USER: "web_user",
                  LOGNAME: "web_user",
                  PATH: "/",
                  PWD: "/",
                  HOME: "/home/web_user",
                  LANG:
                    (
                      ("object" == typeof navigator &&
                        navigator.languages &&
                        navigator.languages[0]) ||
                      "C"
                    ).replace("-", "_") + ".UTF-8",
                  _: getExecutableName(),
                };
                for (var r in ENV)
                  void 0 === ENV[r] ? delete e[r] : (e[r] = ENV[r]);
                var t = [];
                for (var r in e) t.push(r + "=" + e[r]);
                getEnvStrings.strings = t;
              }
              return getEnvStrings.strings;
            }
            function writeAsciiToMemory(e, r, t) {
              for (var n = 0; n < e.length; ++n)
                HEAP8[r++ >> 0] = e.charCodeAt(n);
              t || (HEAP8[r >> 0] = 0);
            }
            function _environ_get(e, r) {
              var t = 0;
              return (
                getEnvStrings().forEach(function (n, o) {
                  var a = r + t;
                  (HEAPU32[(e + 4 * o) >> 2] = a),
                    writeAsciiToMemory(n, a),
                    (t += n.length + 1);
                }),
                0
              );
            }
            function _environ_sizes_get(e, r) {
              var t = getEnvStrings();
              HEAPU32[e >> 2] = t.length;
              var n = 0;
              return (
                t.forEach(function (e) {
                  n += e.length + 1;
                }),
                (HEAPU32[r >> 2] = n),
                0
              );
            }
            function _fd_close(e) {
              try {
                var r = SYSCALLS.getStreamFromFD(e);
                return FS.close(r), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doReadv(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.read(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                if (((o += c), c < s)) break;
              }
              return o;
            }
            function _fd_read(e, r, t, n) {
              try {
                var o = doReadv(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function convertI32PairToI53Checked(e, r) {
              return (r + 2097152) >>> 0 < 4194305 - !!e
                ? (e >>> 0) + 4294967296 * r
                : NaN;
            }
            function _fd_seek(e, r, t, n, o) {
              try {
                var a = convertI32PairToI53Checked(r, t);
                if (isNaN(a)) return 61;
                var i = SYSCALLS.getStreamFromFD(e);
                return (
                  FS.llseek(i, a, n),
                  (tempI64 = [
                    i.position >>> 0,
                    ((tempDouble = i.position),
                    +Math.abs(tempDouble) >= 1
                      ? tempDouble > 0
                        ? (0 |
                            Math.min(
                              +Math.floor(tempDouble / 4294967296),
                              4294967295
                            )) >>>
                          0
                        : ~~+Math.ceil(
                            (tempDouble - +(~~tempDouble >>> 0)) / 4294967296
                          ) >>> 0
                      : 0),
                  ]),
                  (HEAP32[o >> 2] = tempI64[0]),
                  (HEAP32[(o + 4) >> 2] = tempI64[1]),
                  i.getdents && 0 === a && 0 === n && (i.getdents = null),
                  0
                );
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function doWritev(e, r, t, n) {
              for (var o = 0, a = 0; a < t; a++) {
                var i = HEAPU32[r >> 2],
                  s = HEAPU32[(r + 4) >> 2];
                r += 8;
                var c = FS.write(e, HEAP8, i, s, n);
                if (c < 0) return -1;
                o += c;
              }
              return o;
            }
            function _fd_write(e, r, t, n) {
              try {
                var o = doWritev(SYSCALLS.getStreamFromFD(e), r, t);
                return (HEAPU32[n >> 2] = o), 0;
              } catch (e) {
                if (void 0 === FS || !(e instanceof FS.ErrnoError)) throw e;
                return e.errno;
              }
            }
            function __isLeapYear(e) {
              return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
            }
            function __arraySum(e, r) {
              for (var t = 0, n = 0; n <= r; t += e[n++]);
              return t;
            }
            var __MONTH_DAYS_LEAP = [
                31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ],
              __MONTH_DAYS_REGULAR = [
                31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
              ];
            function __addDays(e, r) {
              for (var t = new Date(e.getTime()); r > 0; ) {
                var n = __isLeapYear(t.getFullYear()),
                  o = t.getMonth(),
                  a = (n ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[o];
                if (!(r > a - t.getDate()))
                  return t.setDate(t.getDate() + r), t;
                (r -= a - t.getDate() + 1),
                  t.setDate(1),
                  o < 11
                    ? t.setMonth(o + 1)
                    : (t.setMonth(0), t.setFullYear(t.getFullYear() + 1));
              }
              return t;
            }
            function writeArrayToMemory(e, r) {
              HEAP8.set(e, r);
            }
            function _strftime(e, r, t, n) {
              var o = HEAP32[(n + 40) >> 2],
                a = {
                  tm_sec: HEAP32[n >> 2],
                  tm_min: HEAP32[(n + 4) >> 2],
                  tm_hour: HEAP32[(n + 8) >> 2],
                  tm_mday: HEAP32[(n + 12) >> 2],
                  tm_mon: HEAP32[(n + 16) >> 2],
                  tm_year: HEAP32[(n + 20) >> 2],
                  tm_wday: HEAP32[(n + 24) >> 2],
                  tm_yday: HEAP32[(n + 28) >> 2],
                  tm_isdst: HEAP32[(n + 32) >> 2],
                  tm_gmtoff: HEAP32[(n + 36) >> 2],
                  tm_zone: o ? UTF8ToString(o) : "",
                },
                i = UTF8ToString(t),
                s = {
                  "%c": "%a %b %d %H:%M:%S %Y",
                  "%D": "%m/%d/%y",
                  "%F": "%Y-%m-%d",
                  "%h": "%b",
                  "%r": "%I:%M:%S %p",
                  "%R": "%H:%M",
                  "%T": "%H:%M:%S",
                  "%x": "%m/%d/%y",
                  "%X": "%H:%M:%S",
                  "%Ec": "%c",
                  "%EC": "%C",
                  "%Ex": "%m/%d/%y",
                  "%EX": "%H:%M:%S",
                  "%Ey": "%y",
                  "%EY": "%Y",
                  "%Od": "%d",
                  "%Oe": "%e",
                  "%OH": "%H",
                  "%OI": "%I",
                  "%Om": "%m",
                  "%OM": "%M",
                  "%OS": "%S",
                  "%Ou": "%u",
                  "%OU": "%U",
                  "%OV": "%V",
                  "%Ow": "%w",
                  "%OW": "%W",
                  "%Oy": "%y",
                };
              for (var c in s) i = i.replace(new RegExp(c, "g"), s[c]);
              var u = [
                  "Sunday",
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                ],
                l = [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ];
              function d(e, r, t) {
                for (
                  var n = "number" == typeof e ? e.toString() : e || "";
                  n.length < r;

                )
                  n = t[0] + n;
                return n;
              }
              function f(e, r) {
                return d(e, r, "0");
              }
              function _(e, r) {
                function t(e) {
                  return e < 0 ? -1 : e > 0 ? 1 : 0;
                }
                var n;
                return (
                  0 === (n = t(e.getFullYear() - r.getFullYear())) &&
                    0 === (n = t(e.getMonth() - r.getMonth())) &&
                    (n = t(e.getDate() - r.getDate())),
                  n
                );
              }
              function m(e) {
                switch (e.getDay()) {
                  case 0:
                    return new Date(e.getFullYear() - 1, 11, 29);
                  case 1:
                    return e;
                  case 2:
                    return new Date(e.getFullYear(), 0, 3);
                  case 3:
                    return new Date(e.getFullYear(), 0, 2);
                  case 4:
                    return new Date(e.getFullYear(), 0, 1);
                  case 5:
                    return new Date(e.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(e.getFullYear() - 1, 11, 30);
                }
              }
              function p(e) {
                var r = __addDays(new Date(e.tm_year + 1900, 0, 1), e.tm_yday),
                  t = new Date(r.getFullYear(), 0, 4),
                  n = new Date(r.getFullYear() + 1, 0, 4),
                  o = m(t),
                  a = m(n);
                return _(o, r) <= 0
                  ? _(a, r) <= 0
                    ? r.getFullYear() + 1
                    : r.getFullYear()
                  : r.getFullYear() - 1;
              }
              var S = {
                "%a": function (e) {
                  return u[e.tm_wday].substring(0, 3);
                },
                "%A": function (e) {
                  return u[e.tm_wday];
                },
                "%b": function (e) {
                  return l[e.tm_mon].substring(0, 3);
                },
                "%B": function (e) {
                  return l[e.tm_mon];
                },
                "%C": function (e) {
                  return f(((e.tm_year + 1900) / 100) | 0, 2);
                },
                "%d": function (e) {
                  return f(e.tm_mday, 2);
                },
                "%e": function (e) {
                  return d(e.tm_mday, 2, " ");
                },
                "%g": function (e) {
                  return p(e).toString().substring(2);
                },
                "%G": function (e) {
                  return p(e);
                },
                "%H": function (e) {
                  return f(e.tm_hour, 2);
                },
                "%I": function (e) {
                  var r = e.tm_hour;
                  return 0 == r ? (r = 12) : r > 12 && (r -= 12), f(r, 2);
                },
                "%j": function (e) {
                  return f(
                    e.tm_mday +
                      __arraySum(
                        __isLeapYear(e.tm_year + 1900)
                          ? __MONTH_DAYS_LEAP
                          : __MONTH_DAYS_REGULAR,
                        e.tm_mon - 1
                      ),
                    3
                  );
                },
                "%m": function (e) {
                  return f(e.tm_mon + 1, 2);
                },
                "%M": function (e) {
                  return f(e.tm_min, 2);
                },
                "%n": function () {
                  return "\n";
                },
                "%p": function (e) {
                  return e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM";
                },
                "%S": function (e) {
                  return f(e.tm_sec, 2);
                },
                "%t": function () {
                  return "\t";
                },
                "%u": function (e) {
                  return e.tm_wday || 7;
                },
                "%U": function (e) {
                  var r = e.tm_yday + 7 - e.tm_wday;
                  return f(Math.floor(r / 7), 2);
                },
                "%V": function (e) {
                  var r = Math.floor(
                    (e.tm_yday + 7 - ((e.tm_wday + 6) % 7)) / 7
                  );
                  if (((e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && r++, r)) {
                    if (53 == r) {
                      var t = (e.tm_wday + 371 - e.tm_yday) % 7;
                      4 == t || (3 == t && __isLeapYear(e.tm_year)) || (r = 1);
                    }
                  } else {
                    r = 52;
                    var n = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                    (4 == n ||
                      (5 == n && __isLeapYear((e.tm_year % 400) - 1))) &&
                      r++;
                  }
                  return f(r, 2);
                },
                "%w": function (e) {
                  return e.tm_wday;
                },
                "%W": function (e) {
                  var r = e.tm_yday + 7 - ((e.tm_wday + 6) % 7);
                  return f(Math.floor(r / 7), 2);
                },
                "%y": function (e) {
                  return (e.tm_year + 1900).toString().substring(2);
                },
                "%Y": function (e) {
                  return e.tm_year + 1900;
                },
                "%z": function (e) {
                  var r = e.tm_gmtoff,
                    t = r >= 0;
                  return (
                    (r = ((r = Math.abs(r) / 60) / 60) * 100 + (r % 60)),
                    (t ? "+" : "-") + String("0000" + r).slice(-4)
                  );
                },
                "%Z": function (e) {
                  return e.tm_zone;
                },
                "%%": function () {
                  return "%";
                },
              };
              for (var c in ((i = i.replace(/%%/g, "\0\0")), S))
                i.includes(c) && (i = i.replace(new RegExp(c, "g"), S[c](a)));
              var E = intArrayFromString((i = i.replace(/\0\0/g, "%")), !1);
              return E.length > r
                ? 0
                : (writeArrayToMemory(E, e), E.length - 1);
            }
            function _strftime_l(e, r, t, n, o) {
              return _strftime(e, r, t, n);
            }
            function _proc_exit(e) {
              (EXITSTATUS = e),
                keepRuntimeAlive() ||
                  (Module.onExit && Module.onExit(e), (ABORT = !0)),
                quit_(e, new ExitStatus(e));
            }
            function exitJS(e, r) {
              (EXITSTATUS = e), _proc_exit(e);
            }
            function handleException(e) {
              if (e instanceof ExitStatus || "unwind" == e) return EXITSTATUS;
              quit_(1, e);
            }
            function allocateUTF8OnStack(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = stackAlloc(r);
              return stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSROOT = {
              staticInit: () => {
                FS.root = null;
                let opts = (Module.ROOT && Module.ROOT.opts) || {},
                  type = (Module.ROOT && Module.ROOT.type) || "MEMFS";
                "string" == typeof type
                  ? (type = FS.filesystems[type] || eval(type))
                  : "function" == typeof type && (type = type(Module)),
                  FS.mount(type, opts, "/"),
                  FSROOT.createDefaultMountPoints();
                const restore_mkdir = FSROOT.safeMkdir();
                FS.createDefaultDirectories(),
                  FS.createDefaultDevices(),
                  FS.createSpecialDirectories(),
                  restore_mkdir();
              },
              createDefaultMountPoints: () => {
                FS.mkdirTree("/dev"),
                  FS.mount(MEMFS, {}, "/dev"),
                  FS.mkdirTree("/proc/self"),
                  FS.mount(MEMFS, {}, "/proc/self");
              },
              safeMkdir: () => {
                const e = FS.mkdir;
                return (
                  (FS.mkdir = (r, t) => {
                    try {
                      return e(r, t);
                    } catch {
                      return FS.lookupPath(r, { follow: !0 }).node;
                    }
                  }),
                  () => {
                    FS.mkdir = e;
                  }
                );
              },
            };
            function allocateUTF8(e) {
              var r = lengthBytesUTF8(e) + 1,
                t = _malloc(r);
              return t && stringToUTF8Array(e, HEAP8, t, r), t;
            }
            var FSNode = function (e, r, t, n) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = FS.nextInode++),
                  (this.name = r),
                  (this.mode = t),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = n);
              },
              readMode = 365,
              writeMode = 146;
            Object.defineProperties(FSNode.prototype, {
              read: {
                get: function () {
                  return (this.mode & readMode) === readMode;
                },
                set: function (e) {
                  e ? (this.mode |= readMode) : (this.mode &= ~readMode);
                },
              },
              write: {
                get: function () {
                  return (this.mode & writeMode) === writeMode;
                },
                set: function (e) {
                  e ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
                },
              },
              isFolder: {
                get: function () {
                  return FS.isDir(this.mode);
                },
              },
              isDevice: {
                get: function () {
                  return FS.isChrdev(this.mode);
                },
              },
            }),
              (FS.FSNode = FSNode),
              FS.staticInit(),
              (ERRNO_CODES = {
                EPERM: 63,
                ENOENT: 44,
                ESRCH: 71,
                EINTR: 27,
                EIO: 29,
                ENXIO: 60,
                E2BIG: 1,
                ENOEXEC: 45,
                EBADF: 8,
                ECHILD: 12,
                EAGAIN: 6,
                EWOULDBLOCK: 6,
                ENOMEM: 48,
                EACCES: 2,
                EFAULT: 21,
                ENOTBLK: 105,
                EBUSY: 10,
                EEXIST: 20,
                EXDEV: 75,
                ENODEV: 43,
                ENOTDIR: 54,
                EISDIR: 31,
                EINVAL: 28,
                ENFILE: 41,
                EMFILE: 33,
                ENOTTY: 59,
                ETXTBSY: 74,
                EFBIG: 22,
                ENOSPC: 51,
                ESPIPE: 70,
                EROFS: 69,
                EMLINK: 34,
                EPIPE: 64,
                EDOM: 18,
                ERANGE: 68,
                ENOMSG: 49,
                EIDRM: 24,
                ECHRNG: 106,
                EL2NSYNC: 156,
                EL3HLT: 107,
                EL3RST: 108,
                ELNRNG: 109,
                EUNATCH: 110,
                ENOCSI: 111,
                EL2HLT: 112,
                EDEADLK: 16,
                ENOLCK: 46,
                EBADE: 113,
                EBADR: 114,
                EXFULL: 115,
                ENOANO: 104,
                EBADRQC: 103,
                EBADSLT: 102,
                EDEADLOCK: 16,
                EBFONT: 101,
                ENOSTR: 100,
                ENODATA: 116,
                ETIME: 117,
                ENOSR: 118,
                ENONET: 119,
                ENOPKG: 120,
                EREMOTE: 121,
                ENOLINK: 47,
                EADV: 122,
                ESRMNT: 123,
                ECOMM: 124,
                EPROTO: 65,
                EMULTIHOP: 36,
                EDOTDOT: 125,
                EBADMSG: 9,
                ENOTUNIQ: 126,
                EBADFD: 127,
                EREMCHG: 128,
                ELIBACC: 129,
                ELIBBAD: 130,
                ELIBSCN: 131,
                ELIBMAX: 132,
                ELIBEXEC: 133,
                ENOSYS: 52,
                ENOTEMPTY: 55,
                ENAMETOOLONG: 37,
                ELOOP: 32,
                EOPNOTSUPP: 138,
                EPFNOSUPPORT: 139,
                ECONNRESET: 15,
                ENOBUFS: 42,
                EAFNOSUPPORT: 5,
                EPROTOTYPE: 67,
                ENOTSOCK: 57,
                ENOPROTOOPT: 50,
                ESHUTDOWN: 140,
                ECONNREFUSED: 14,
                EADDRINUSE: 3,
                ECONNABORTED: 13,
                ENETUNREACH: 40,
                ENETDOWN: 38,
                ETIMEDOUT: 73,
                EHOSTDOWN: 142,
                EHOSTUNREACH: 23,
                EINPROGRESS: 26,
                EALREADY: 7,
                EDESTADDRREQ: 17,
                EMSGSIZE: 35,
                EPROTONOSUPPORT: 66,
                ESOCKTNOSUPPORT: 137,
                EADDRNOTAVAIL: 4,
                ENETRESET: 39,
                EISCONN: 30,
                ENOTCONN: 53,
                ETOOMANYREFS: 141,
                EUSERS: 136,
                EDQUOT: 19,
                ESTALE: 72,
                ENOTSUP: 138,
                ENOMEDIUM: 148,
                EILSEQ: 25,
                EOVERFLOW: 61,
                ECANCELED: 11,
                ENOTRECOVERABLE: 56,
                EOWNERDEAD: 62,
                ESTRPIPE: 135,
              }),
              FSROOT.staticInit();
            var asmLibraryArg = {
                b: ___cxa_allocate_exception,
                a: ___cxa_throw,
                p: ___syscall_chmod,
                e: ___syscall_fcntl64,
                t: ___syscall_ioctl,
                k: ___syscall_lstat64,
                i: ___syscall_mkdirat,
                j: ___syscall_newfstatat,
                w: ___syscall_openat,
                h: ___syscall_readlinkat,
                l: ___syscall_stat64,
                g: ___syscall_symlink,
                f: ___syscall_utimensat,
                c: _abort,
                u: _emscripten_memcpy_big,
                v: _emscripten_resize_heap,
                o: _environ_get,
                q: _environ_sizes_get,
                d: _fd_close,
                s: _fd_read,
                m: _fd_seek,
                r: _fd_write,
                n: _strftime_l,
              },
              asm = createWasm(),
              ___wasm_call_ctors = (Module.___wasm_call_ctors = function () {
                return (___wasm_call_ctors = Module.___wasm_call_ctors =
                  Module.asm.y).apply(null, arguments);
              }),
              _main = (Module._main = function () {
                return (_main = Module._main = Module.asm.z).apply(
                  null,
                  arguments
                );
              }),
              ___errno_location = (Module.___errno_location = function () {
                return (___errno_location = Module.___errno_location =
                  Module.asm.A).apply(null, arguments);
              }),
              _malloc = (Module._malloc = function () {
                return (_malloc = Module._malloc = Module.asm.B).apply(
                  null,
                  arguments
                );
              }),
              _free = (Module._free = function () {
                return (_free = Module._free = Module.asm.C).apply(
                  null,
                  arguments
                );
              }),
              stackAlloc = (Module.stackAlloc = function () {
                return (stackAlloc = Module.stackAlloc = Module.asm.D).apply(
                  null,
                  arguments
                );
              }),
              ___cxa_is_pointer_type = (Module.___cxa_is_pointer_type =
                function () {
                  return (___cxa_is_pointer_type =
                    Module.___cxa_is_pointer_type =
                      Module.asm.F).apply(null, arguments);
                }),
              calledRun;
            function callMain(e) {
              var r = Module._main;
              (e = e || []).unshift(thisProgram);
              var t = e.length,
                n = stackAlloc(4 * (t + 1)),
                o = n >> 2;
              e.forEach((e) => {
                HEAP32[o++] = allocateUTF8OnStack(e);
              }),
                (HEAP32[o] = 0);
              try {
                var a = r(t, n);
                return exitJS(a, !0), a;
              } catch (e) {
                return handleException(e);
              }
            }
            function run(e) {
              function r() {
                calledRun ||
                  ((calledRun = !0),
                  (Module.calledRun = !0),
                  ABORT ||
                    (initRuntime(),
                    preMain(),
                    readyPromiseResolve(Module),
                    Module.onRuntimeInitialized &&
                      Module.onRuntimeInitialized(),
                    shouldRunNow && callMain(e),
                    postRun()));
              }
              (e = e || arguments_),
                runDependencies > 0 ||
                  (preRun(),
                  runDependencies > 0 ||
                    (Module.setStatus
                      ? (Module.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            Module.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
            }
            if (
              ((Module.ERRNO_CODES = ERRNO_CODES),
              (Module.allocateUTF8 = allocateUTF8),
              (Module.FS = FS),
              (Module.PROXYFS = PROXYFS),
              (dependenciesFulfilled = function e() {
                calledRun || run(), calledRun || (dependenciesFulfilled = e);
              }),
              Module.preInit)
            )
              for (
                "function" == typeof Module.preInit &&
                (Module.preInit = [Module.preInit]);
                Module.preInit.length > 0;

              )
                Module.preInit.pop()();
            var shouldRunNow = !0;
            return (
              Module.noInitialRun && (shouldRunNow = !1), run(), Module.ready
            );
          };
        })();
        const __WEBPACK_DEFAULT_EXPORT__ = Module;
      },
    },
    __webpack_module_cache__ = {};
  function __webpack_require__(e) {
    var r = __webpack_module_cache__[e];
    if (void 0 !== r) return r.exports;
    var t = (__webpack_module_cache__[e] = { exports: {} });
    return __webpack_modules__[e](t, t.exports, __webpack_require__), t.exports;
  }
  (__webpack_require__.m = __webpack_modules__),
    (__webpack_require__.d = (e, r) => {
      for (var t in r)
        __webpack_require__.o(r, t) &&
          !__webpack_require__.o(e, t) &&
          Object.defineProperty(e, t, { enumerable: !0, get: r[t] });
    }),
    (__webpack_require__.g = (function () {
      if ("object" == typeof globalThis) return globalThis;
      try {
        return this || new Function("return this")();
      } catch (e) {
        if ("object" == typeof window) return window;
      }
    })()),
    (__webpack_require__.o = (e, r) =>
      Object.prototype.hasOwnProperty.call(e, r)),
    (() => {
      var e;
      __webpack_require__.g.importScripts &&
        (e = __webpack_require__.g.location + "");
      var r = __webpack_require__.g.document;
      if (!e && r && (r.currentScript && (e = r.currentScript.src), !e)) {
        var t = r.getElementsByTagName("script");
        t.length && (e = t[t.length - 1].src);
      }
      if (!e)
        throw new Error(
          "Automatic publicPath is not supported in this browser"
        );
      (e = e
        .replace(/#.*$/, "")
        .replace(/\?.*$/, "")
        .replace(/\/[^\/]+$/, "/")),
        (__webpack_require__.p = e);
    })(),
    (__webpack_require__.b = self.location + "");
  var __webpack_exports__ = {};
  (() => {
    "use strict";
    const e = Symbol("Comlink.proxy"),
      r = Symbol("Comlink.endpoint"),
      t = Symbol("Comlink.releaseProxy"),
      n = Symbol("Comlink.thrown"),
      o = (e) => ("object" == typeof e && null !== e) || "function" == typeof e,
      a = new Map([
        [
          "proxy",
          {
            canHandle: (r) => o(r) && r[e],
            serialize(e) {
              const { port1: r, port2: t } = new MessageChannel();
              return i(e, r), [t, [t]];
            },
            deserialize: (e) => (e.start(), u(e, [], undefined)),
          },
        ],
        [
          "throw",
          {
            canHandle: (e) => o(e) && n in e,
            serialize({ value: e }) {
              let r;
              return (
                (r =
                  e instanceof Error
                    ? {
                        isError: !0,
                        value: {
                          message: e.message,
                          name: e.name,
                          stack: e.stack,
                        },
                      }
                    : { isError: !1, value: e }),
                [r, []]
              );
            },
            deserialize(e) {
              if (e.isError)
                throw Object.assign(new Error(e.value.message), e.value);
              throw e.value;
            },
          },
        ],
      ]);
    function i(r, t = self) {
      t.addEventListener("message", function o(a) {
        if (!a || !a.data) return;
        const { id: c, type: u, path: l } = Object.assign({ path: [] }, a.data),
          m = (a.data.argumentList || []).map(_);
        let p;
        try {
          const t = l.slice(0, -1).reduce((e, r) => e[r], r),
            n = l.reduce((e, r) => e[r], r);
          switch (u) {
            case "GET":
              p = n;
              break;
            case "SET":
              (t[l.slice(-1)[0]] = _(a.data.value)), (p = !0);
              break;
            case "APPLY":
              p = n.apply(t, m);
              break;
            case "CONSTRUCT":
              p = (function (r) {
                return Object.assign(r, { [e]: !0 });
              })(new n(...m));
              break;
            case "ENDPOINT":
              {
                const { port1: e, port2: t } = new MessageChannel();
                i(r, t),
                  (p = (function (e, r) {
                    return d.set(e, r), e;
                  })(e, [e]));
              }
              break;
            case "RELEASE":
              p = void 0;
              break;
            default:
              return;
          }
        } catch (e) {
          p = { value: e, [n]: 0 };
        }
        Promise.resolve(p)
          .catch((e) => ({ value: e, [n]: 0 }))
          .then((e) => {
            const [r, n] = f(e);
            t.postMessage(Object.assign(Object.assign({}, r), { id: c }), n),
              "RELEASE" === u && (t.removeEventListener("message", o), s(t));
          });
      }),
        t.start && t.start();
    }
    function s(e) {
      (function (e) {
        return "MessagePort" === e.constructor.name;
      })(e) && e.close();
    }
    function c(e) {
      if (e) throw new Error("Proxy has been released and is not useable");
    }
    function u(e, n = [], o = function () {}) {
      let a = !1;
      const i = new Proxy(o, {
        get(r, o) {
          if ((c(a), o === t))
            return () =>
              m(e, { type: "RELEASE", path: n.map((e) => e.toString()) }).then(
                () => {
                  s(e), (a = !0);
                }
              );
          if ("then" === o) {
            if (0 === n.length) return { then: () => i };
            const r = m(e, {
              type: "GET",
              path: n.map((e) => e.toString()),
            }).then(_);
            return r.then.bind(r);
          }
          return u(e, [...n, o]);
        },
        set(r, t, o) {
          c(a);
          const [i, s] = f(o);
          return m(
            e,
            { type: "SET", path: [...n, t].map((e) => e.toString()), value: i },
            s
          ).then(_);
        },
        apply(t, o, i) {
          c(a);
          const s = n[n.length - 1];
          if (s === r) return m(e, { type: "ENDPOINT" }).then(_);
          if ("bind" === s) return u(e, n.slice(0, -1));
          const [d, f] = l(i);
          return m(
            e,
            {
              type: "APPLY",
              path: n.map((e) => e.toString()),
              argumentList: d,
            },
            f
          ).then(_);
        },
        construct(r, t) {
          c(a);
          const [o, i] = l(t);
          return m(
            e,
            {
              type: "CONSTRUCT",
              path: n.map((e) => e.toString()),
              argumentList: o,
            },
            i
          ).then(_);
        },
      });
      return i;
    }
    function l(e) {
      const r = e.map(f);
      return [
        r.map((e) => e[0]),
        ((t = r.map((e) => e[1])), Array.prototype.concat.apply([], t)),
      ];
      var t;
    }
    const d = new WeakMap();
    function f(e) {
      for (const [r, t] of a)
        if (t.canHandle(e)) {
          const [n, o] = t.serialize(e);
          return [{ type: "HANDLER", name: r, value: n }, o];
        }
      return [{ type: "RAW", value: e }, d.get(e) || []];
    }
    function _(e) {
      switch (e.type) {
        case "HANDLER":
          return a.get(e.name).deserialize(e.value);
        case "RAW":
          return e.value;
      }
    }
    function m(e, r, t) {
      return new Promise((n) => {
        const o = new Array(4)
          .fill(0)
          .map(() =>
            Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)
          )
          .join("-");
        e.addEventListener("message", function r(t) {
          t.data &&
            t.data.id &&
            t.data.id === o &&
            (e.removeEventListener("message", r), n(t.data));
        }),
          e.start && e.start(),
          e.postMessage(Object.assign({ id: o }, r), t);
      });
    }
    class p {
      constructor({
        onrunprocess: e = () => ({
          returncode: 1,
          stdout: "",
          stderr: "Not implemented",
        }),
        onprint: r = () => {},
        onprintErr: t = () => {},
      }) {
        Object.assign(this, { onrunprocess: e, onprint: r, onprintErr: t });
      }
      onrunprocess = () => {};
      onprint = () => {};
      onprintErr = () => {};
      get FS() {
        throw new Error("unimplemented");
      }
      get cwd() {
        return this.FS.cwd();
      }
      set cwd(e) {
        this.FS.chdir(e);
      }
    }
    class S extends p {
      _module = null;
      _memory = null;
      _print = (...e) => console.log(...e);
      _printErr = (...e) => console.warn(...e);
      constructor(
        e,
        { FS: r, onrunprocess: t, onprint: n, onprintErr: o, ...a } = {}
      ) {
        super({ onrunprocess: t, onprint: n, onprintErr: o }),
          (this.ready = this.#e(e, r, { onrunprocess: t, ...a }));
        const i = this.ready.then(() => (delete this.then, this));
        this.then = (...e) => i.then(...e);
      }
      #e = async (e, r, t) => {
        const n = r && {
          ROOT: { type: "PROXYFS", opts: { root: "/", fs: r } },
        };
        if (
          ((this._module = await new e({
            ...t,
            ...n,
            noInitialRun: !0,
            noExitRuntime: !0,
            print: (...e) => this._print(...e),
            printErr: (...e) => this._printErr(...e),
          })),
          (this._memory = this._module.HEAPU8.slice()),
          n)
        ) {
          const e = this._module.FS.hashAddNode;
          this._module.FS.hashAddNode = (r) => {
            "/" !== r.mount.mountpoint && e(r);
          };
        }
        this.#r();
      };
      #r = () => {
        const e = this._module.FS,
          r = Object.fromEntries(
            Object.entries(this._module.ERRNO_CODES).map(([e, r]) => [r, e])
          );
        Object.defineProperty(e.ErrnoError.prototype, "code", {
          get: function () {
            return r[this.errno];
          },
        });
      };
      get FS() {
        return this._module.FS;
      }
      _callMain(e, r) {
        return this._module._main(e, r);
      }
      exec(e, r = {}) {
        "string" == typeof e && (e = e.split(/ +/g)),
          this._module.HEAPU8.fill(0),
          this._module.HEAPU8.set(this._memory);
        const t = e.length,
          n = this._module._malloc(4 * (t + 1)),
          o = [n];
        for (let r = 0; r < t; r++) {
          const t = (this._module.HEAP32[(n >> 2) + r] =
            this._module.allocateUTF8(e[r]));
          o.push(t);
        }
        this._module.HEAP32[(n >> 2) + t] = 0;
        let a = 0;
        const i = [],
          s = [];
        (this._print = (...e) => {
          this.onprint(...e), r.print && r.print(...e), i.push(...e);
        }),
          (this._printErr = (...e) => {
            this.onprintErr(...e), r.printErr && r.printErr(...e), s.push(...e);
          });
        try {
          r.cwd && (this.cwd = r.cwd), (a = this._module._main(t, n));
        } catch (e) {
          a = "number" == typeof e ? -84 : "status" in e ? e.status : -42;
        } finally {
          o.forEach((e) => this._module._free(e));
        }
        return { returncode: a, stdout: i.join("\n"), stderr: s.join("\n") };
      }
    }
    var E = __webpack_require__(6935);
    var h = __webpack_require__(2406);
    class F extends S {
      constructor(e) {
        super(h.Z, { ...e });
      }
    }
    class w extends S {
      _brotli = null;
      _cache = null;
      constructor({ cache: e = "/cache", ...r } = {}) {
        super(E.Z, { ...r }), this.#e(e, r);
      }
      #e = async (e, r) => {
        await this,
          (this._brotli = new F({ FS: this.FS, ...r })),
          (this._cache = (async () => {
            for (; e.endsWith("/"); ) e = e.slice(0, -1);
            return this.exists(e) || (this.persist(e), await this.pull()), e;
          })());
      };
      async unpack(...e) {
        return Promise.all(
          e.flat().map(async (e) => {
            const r = this.FS.readFile(e, { encoding: "binary" });
            if (e.endsWith(".br")) {
              const e = await this._brotli;
              this.FS.writeFile("/tmp/archive.pack.br", r),
                await e.exec(
                  ["brotli", "--decompress", "/tmp/archive.pack.br"],
                  { cwd: "/tmp/" }
                ),
                this.FS.unlink("/tmp/archive.pack.br");
            } else this.FS.writeFile("/tmp/archive.pack", r);
            await this.exec(["wasm-package", "unpack", "/tmp/archive.pack"], {
              cwd: "/",
            }),
              this.FS.unlink("/tmp/archive.pack");
          })
        );
      }
      async cachedLazyFile(e, r, t, n) {
        const o = await this._cache;
        if ((this.exists(e) && this.unlink(e), this.exists(`${o}/${t}`))) {
          const r = this.readFile(`${o}/${t}`, { encoding: "binary" });
          this.writeFile(e, r);
        } else {
          const [, a = "", i] = /(.*\/)?([^\/]*)/.exec(e);
          !(function (e, r, t, n, o, a, i, s) {
            function c() {
              (this.lengthKnown = !1), (this.content = null);
            }
            if (
              ((c.prototype.cacheLength = function () {
                (this.get = () => {
                  if (
                    (this.content ||
                      ((this.content = (() => {
                        var e = new XMLHttpRequest();
                        if (
                          (e.open("GET", o, !1),
                          (e.responseType = "arraybuffer"),
                          e.overrideMimeType &&
                            e.overrideMimeType(
                              "text/plain; charset=x-user-defined"
                            ),
                          e.send(null),
                          !(
                            (e.status >= 200 && e.status < 300) ||
                            304 === e.status
                          ))
                        )
                          throw new Error(
                            "Couldn't load " + o + ". Status: " + e.status
                          );
                        return void 0 !== e.response
                          ? new Uint8Array(e.response || [])
                          : intArrayFromString(e.responseText || "", !0);
                      })()),
                      s && this.content && s(this.content)),
                    !this.content)
                  )
                    throw new Error("doXHR failed!");
                  return this.content;
                }),
                  (this._length = n),
                  (this.lengthKnown = !0);
              }),
              "undefined" == typeof XMLHttpRequest)
            )
              throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers.";
            var u = new c();
            Object.defineProperties(u, {
              length: {
                get: function () {
                  return this.lengthKnown || this.cacheLength(), this._length;
                },
              },
            });
            var l = { isDevice: !1, contents: u },
              d = e.createFile(r, t, l, a, i);
            (d.contents = u),
              Object.defineProperties(d, {
                usedBytes: {
                  get: function () {
                    return this.contents.length;
                  },
                },
              });
            var f = {};
            function _(e, r, t, n, o) {
              var a = e.node.contents;
              if (o >= a.length) return 0;
              for (
                var i = Math.min(a.length - o, n), s = a.get(), c = 0;
                c < i;
                c++
              )
                r[t + c] = s[o + c];
              return i;
            }
            Object.keys(d.stream_ops).forEach((r) => {
              var t = d.stream_ops[r];
              f[r] = function () {
                return e.forceLoadFile(d), t.apply(null, arguments);
              };
            }),
              (f.read = (r, t, n, o, a) => (
                e.forceLoadFile(d), _(r, t, n, o, a)
              )),
              (f.mmap = (r, t, n, o, a) => {
                e.forceLoadFile(d);
                var i = mmapAlloc(t);
                if (!i) {
                  const r = 48;
                  throw new e.ErrnoError(r);
                }
                return _(r, HEAP8, i, t, n), { ptr: i, allocated: !0 };
              }),
              (d.stream_ops = f),
              u.cacheLength();
          })(this.FS, a, i, r, n, !0, !1, async (e) => {
            this.writeFile(`${o}/${t}`, e), await this.push();
          });
        }
      }
      persist(e) {
        this.FS.mkdirTree(e), this.FS.mount(this.FS.filesystems.IDBFS, {}, e);
      }
      exists(e) {
        return this.analyzePath(e).exists;
      }
      analyzePath(...e) {
        return this.FS.analyzePath(...e);
      }
      mkdirTree(...e) {
        return this.FS.mkdirTree(...e);
      }
      mkdir(...e) {
        return this.FS.mkdir(...e);
      }
      unlink(...e) {
        return this.FS.unlink(...e);
      }
      readFile(...e) {
        return this.FS.readFile(...e);
      }
      writeFile(...e) {
        return this.FS.writeFile(...e);
      }
      pull() {
        return new Promise((e, r) =>
          this.FS.syncfs(!0, function (t) {
            t ? r(t) : e();
          })
        );
      }
      push() {
        return new Promise((e, r) =>
          this.FS.syncfs(!1, function (t) {
            t ? r(t) : e();
          })
        );
      }
    }
    var y = __webpack_require__(1193);
    class b extends S {
      constructor(e) {
        const r = e.FS.readFile("/wasm/llvm-box.wasm");
        super(y.Z, { ...e, wasmBinary: r });
      }
    }
    var v = __webpack_require__(6361);
    class g extends S {
      constructor(e) {
        const r = e.FS.readFile("/wasm/binaryen-box.wasm");
        super(v.Z, { ...e, wasmBinary: r });
      }
    }
    var M = __webpack_require__(3576);
    class A extends S {
      constructor(e) {
        const r = e.FS.readFile("/wasm/python.wasm");
        super(M.Z, { ...e, wasmBinary: r });
      }
    }
    var k = __webpack_require__(3679);
    class P extends S {
      constructor(e) {
        const r = e.FS.readFile("/wasm/quicknode.wasm");
        super(k.Z, { ...e, wasmBinary: r });
      }
    }
    const T = [
      "/root.pack.br",
      23510428,
      "39c2281aaa4a773df15a4532deb9d010",
      __webpack_require__(4790),
    ];
    var D = __webpack_require__(8399),
      R = __webpack_require__(9061),
      O = __webpack_require__(2762),
      N = __webpack_require__(2238),
      H = __webpack_require__(7305),
      L = __webpack_require__(2905),
      I = __webpack_require__(8475),
      C = __webpack_require__(3803),
      x = __webpack_require__(588),
      U = __webpack_require__(3766),
      B = __webpack_require__(1920),
      j = __webpack_require__(3508),
      Y = __webpack_require__(8114),
      q = __webpack_require__(9629),
      z = __webpack_require__(3544),
      W = __webpack_require__(2510),
      X = __webpack_require__(98),
      V = __webpack_require__(6437),
      G = __webpack_require__(2220),
      K = __webpack_require__(3697),
      Z = __webpack_require__(635),
      J = __webpack_require__(6307),
      Q = __webpack_require__(8377),
      $ = __webpack_require__(7419),
      ee = __webpack_require__(8934),
      re = __webpack_require__(1096),
      te = __webpack_require__(9871),
      ne = __webpack_require__(4293),
      oe = __webpack_require__(1997),
      ae = __webpack_require__(6209),
      ie = __webpack_require__(9411),
      se = __webpack_require__(8089),
      ce = __webpack_require__(8804),
      ue = __webpack_require__(2604),
      le = __webpack_require__(7987),
      de = __webpack_require__(2909),
      fe = __webpack_require__(1083),
      _e = __webpack_require__(2971),
      me = __webpack_require__(5441),
      pe = __webpack_require__(6848),
      Se = __webpack_require__(4282),
      Ee = __webpack_require__(4329),
      he = __webpack_require__(5898),
      Fe = __webpack_require__(6835),
      we = __webpack_require__(8841),
      ye = __webpack_require__(9868),
      be = __webpack_require__(1237),
      ve = __webpack_require__(5425),
      ge = __webpack_require__(2090),
      Me = __webpack_require__(8440),
      Ae = __webpack_require__(7983),
      ke = __webpack_require__(1952),
      Pe = __webpack_require__(589),
      Te = __webpack_require__(3289),
      De = __webpack_require__(7946),
      Re = __webpack_require__(5052),
      Oe = __webpack_require__(9783),
      Ne = __webpack_require__(5693),
      He = __webpack_require__(2399),
      Le = __webpack_require__(7036),
      Ie = __webpack_require__(2156),
      Ce = __webpack_require__(7012),
      xe = __webpack_require__(1653),
      Ue = __webpack_require__(8437),
      Be = __webpack_require__(3906),
      je = __webpack_require__(9884),
      Ye = __webpack_require__(7117),
      qe = __webpack_require__(7190),
      ze = __webpack_require__(4859),
      We = __webpack_require__(3476),
      Xe = __webpack_require__(9414),
      Ve = __webpack_require__(5552),
      Ge = __webpack_require__(159),
      Ke = __webpack_require__(730),
      Ze = __webpack_require__(6335),
      Je = __webpack_require__(4806),
      Qe = __webpack_require__(4108),
      $e = __webpack_require__(8981),
      er = __webpack_require__(1809),
      rr = __webpack_require__(1137),
      tr = __webpack_require__(5006),
      nr = __webpack_require__(8671),
      or = __webpack_require__(7421),
      ar = __webpack_require__(3309),
      ir = __webpack_require__(3181),
      sr = __webpack_require__(9200),
      cr = __webpack_require__(231),
      ur = __webpack_require__(8984),
      lr = __webpack_require__(1998),
      dr = __webpack_require__(3831),
      fr = __webpack_require__(316),
      _r = __webpack_require__(1590),
      mr = __webpack_require__(979),
      pr = __webpack_require__(691),
      Sr = __webpack_require__(9748),
      Er = __webpack_require__(4337),
      hr = __webpack_require__(1428),
      Fr = __webpack_require__(7022),
      wr = __webpack_require__(9375),
      yr = __webpack_require__(3380),
      br = __webpack_require__(1390),
      vr = __webpack_require__(5046),
      gr = __webpack_require__(3184),
      Mr = __webpack_require__(4722),
      Ar = __webpack_require__(4779),
      kr = __webpack_require__(6498),
      Pr = __webpack_require__(4881),
      Tr = __webpack_require__(9709),
      Dr = __webpack_require__(684),
      Rr = __webpack_require__(1006),
      Or = __webpack_require__(6744),
      Nr = __webpack_require__(0),
      Hr = __webpack_require__(6474),
      Lr = __webpack_require__(2120),
      Ir = __webpack_require__(1320),
      Cr = __webpack_require__(3743),
      xr = __webpack_require__(1085),
      Ur = __webpack_require__(4820),
      Br = __webpack_require__(359),
      jr = __webpack_require__(8160),
      Yr = __webpack_require__(698),
      qr = __webpack_require__(1555),
      zr = __webpack_require__(260),
      Wr = __webpack_require__(4786),
      Xr = __webpack_require__(9002),
      Vr = __webpack_require__(8763),
      Gr = __webpack_require__(1558),
      Kr = __webpack_require__(8848),
      Zr = __webpack_require__(7050),
      Jr = __webpack_require__(6929),
      Qr = __webpack_require__(7078),
      $r = __webpack_require__(6269),
      et = __webpack_require__(7058),
      rt = __webpack_require__(8839),
      tt = __webpack_require__(4401),
      nt = __webpack_require__(9056),
      ot = __webpack_require__(5638),
      at = __webpack_require__(3138),
      it = __webpack_require__(5015),
      st = __webpack_require__(1280),
      ct = __webpack_require__(9262),
      ut = __webpack_require__(6500),
      lt = __webpack_require__(9153),
      dt = __webpack_require__(1751),
      ft = __webpack_require__(2900),
      _t = __webpack_require__(2778),
      mt = __webpack_require__(6083),
      pt = __webpack_require__(9739),
      St = __webpack_require__(8740),
      Et = __webpack_require__(2136),
      ht = __webpack_require__(843),
      Ft = __webpack_require__(9805),
      wt = __webpack_require__(1837),
      yt = __webpack_require__(2631),
      bt = __webpack_require__(6226),
      vt = __webpack_require__(7509),
      gt = __webpack_require__(297),
      Mt = __webpack_require__(4080),
      At = __webpack_require__(5084),
      kt = __webpack_require__(7410),
      Pt = __webpack_require__(3717),
      Tt = __webpack_require__(426),
      Dt = __webpack_require__(6214),
      Rt = __webpack_require__(4853),
      Ot = __webpack_require__(4229),
      Nt = __webpack_require__(491),
      Ht = __webpack_require__(1414),
      Lt = __webpack_require__(198),
      It = __webpack_require__(2323),
      Ct = __webpack_require__(1940),
      xt = __webpack_require__(7488),
      Ut = __webpack_require__(1155),
      Bt = __webpack_require__(8072),
      jt = __webpack_require__(943),
      Yt = __webpack_require__(6170),
      qt = __webpack_require__(3361),
      zt = __webpack_require__(6997),
      Wt = __webpack_require__(4251),
      Xt = __webpack_require__(8565),
      Vt = __webpack_require__(5443),
      Gt = __webpack_require__(1780),
      Kt = __webpack_require__(7982),
      Zt = __webpack_require__(7538),
      Jt = __webpack_require__(4216),
      Qt = __webpack_require__(6982),
      $t = __webpack_require__(6722),
      en = __webpack_require__(481),
      rn = __webpack_require__(5134),
      tn = __webpack_require__(7107),
      nn = __webpack_require__(8305),
      on = __webpack_require__(6973),
      an = __webpack_require__(2663),
      sn = __webpack_require__(2621),
      cn = __webpack_require__(4503),
      un = __webpack_require__(9398),
      ln = __webpack_require__(4956),
      dn = __webpack_require__(1077),
      fn = __webpack_require__(3538),
      _n = __webpack_require__(7007),
      mn = __webpack_require__(1426),
      pn = __webpack_require__(4809),
      Sn = __webpack_require__(9659),
      En = __webpack_require__(5709),
      hn = __webpack_require__(4086),
      Fn = __webpack_require__(6989),
      wn = __webpack_require__(3794),
      yn = __webpack_require__(5799),
      bn = __webpack_require__(8277),
      vn = __webpack_require__(6124),
      gn = __webpack_require__(1699),
      Mn = __webpack_require__(6037),
      An = __webpack_require__(2433),
      kn = __webpack_require__(9982),
      Pn = __webpack_require__(2326),
      Tn = __webpack_require__(7493),
      Dn = __webpack_require__(7301),
      Rn = __webpack_require__(3808),
      On = __webpack_require__(6093);
    const Nn = [
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu-full_es3.a",
          89856,
          "67e272a1c11015f9a41f297dec1e7acd",
          D,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu-ofb-full_es3.a",
          89856,
          "67e272a1c11015f9a41f297dec1e7acd",
          D,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu-ofb.a",
          58514,
          "78672ab9ca77e30e7612a8b69d1e646a",
          R,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu-webgl2-full_es3.a",
          90234,
          "7ddf7d97a171acd2d646df324f9f8716",
          O,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu-webgl2-ofb-full_es3.a",
          90234,
          "7ddf7d97a171acd2d646df324f9f8716",
          O,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu-webgl2-ofb.a",
          89480,
          "4c7e5182422c985a6b626ff97c3c281b",
          N,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu-webgl2.a",
          89480,
          "4c7e5182422c985a6b626ff97c3c281b",
          N,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-emu.a",
          58514,
          "78672ab9ca77e30e7612a8b69d1e646a",
          R,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-full_es3.a",
          70440,
          "87740152a7780245a1c76150fe5c3af3",
          H,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu-full_es3.a",
          90144,
          "4959f3129bf7d372b8b5648c8984fc4f",
          L,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu-ofb-full_es3.a",
          266074,
          "f1eb83cef5d96847b1aaf5e2b2634ad2",
          I,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu-ofb.a",
          166554,
          "9d56f70bd1bacf65aefd66fd64e90f9b",
          C,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu-webgl2-full_es3.a",
          90522,
          "2ee6618e092e9b93c45d2655463d6086",
          x,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu-webgl2-ofb-full_es3.a",
          266452,
          "1f6e691a9d3c168554dc5830a671a495",
          U,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu-webgl2-ofb.a",
          263214,
          "833075262bfd39a04036ce075b0e82a7",
          B,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu-webgl2.a",
          89768,
          "7a3646f594b3e19ae7ae7ef2a122c92d",
          j,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-emu.a",
          58730,
          "cae1b46806c231362f6b6136a2dc9ff8",
          Y,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-full_es3.a",
          70728,
          "d0c7f6fa9f5f25916aa9456d18da6c69",
          q,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-ofb-full_es3.a",
          246658,
          "851a239e4b49e1bc96b29a49f6343152",
          z,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-ofb.a",
          147138,
          "2a57eccfdb5683a5bf37662d5ee216cf",
          W,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-webgl2-full_es3.a",
          71098,
          "d341521caf96daba22b0e8fb6e3c65f7",
          X,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-webgl2-ofb-full_es3.a",
          247028,
          "16ebbccec1c1bb5b7516c5773ac78597",
          V,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-webgl2-ofb.a",
          243790,
          "0147b3c3e1105bf812c94a073dc43f24",
          G,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt-webgl2.a",
          70344,
          "b8ed641358b8ae2e53fe822f1913f4a6",
          K,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-mt.a",
          39314,
          "91b468acb638eaa87926057c7982b859",
          Z,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ofb-full_es3.a",
          70440,
          "87740152a7780245a1c76150fe5c3af3",
          H,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ofb.a",
          39098,
          "b8c76d5f85c8bbef9dd7966810c24bcb",
          J,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-webgl2-full_es3.a",
          70810,
          "75372d2b218590a585c4ce0793690699",
          Q,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-webgl2-ofb-full_es3.a",
          70810,
          "75372d2b218590a585c4ce0793690699",
          Q,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-webgl2-ofb.a",
          70056,
          "7bfacbb039c26b44224fed4b7660f8f0",
          $,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-webgl2.a",
          70056,
          "7bfacbb039c26b44224fed4b7660f8f0",
          $,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu-full_es3.a",
          90038,
          "ec12e6563a4132e9a0c9fac67bb920c6",
          ee,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu-ofb-full_es3.a",
          90038,
          "ec12e6563a4132e9a0c9fac67bb920c6",
          ee,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu-ofb.a",
          58650,
          "b41248d84238533be0cb2f8babe8ff49",
          re,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu-webgl2-full_es3.a",
          90416,
          "f9e4ea177f3afcc3c4efc7cab3fedbe4",
          te,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu-webgl2-ofb-full_es3.a",
          90416,
          "f9e4ea177f3afcc3c4efc7cab3fedbe4",
          te,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu-webgl2-ofb.a",
          89660,
          "b31473635ae63975ed76fa14e39f507c",
          ne,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu-webgl2.a",
          89660,
          "b31473635ae63975ed76fa14e39f507c",
          ne,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-emu.a",
          58650,
          "b41248d84238533be0cb2f8babe8ff49",
          re,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-full_es3.a",
          70620,
          "c5c66b802a0680775650fd1485b6d1ca",
          oe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-ofb-full_es3.a",
          70620,
          "c5c66b802a0680775650fd1485b6d1ca",
          oe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-ofb.a",
          39232,
          "2dfa77c642581693b4df09fc1ef09faf",
          ae,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-webgl2-full_es3.a",
          70990,
          "7bad320aca57700d16e8c53dc987add2",
          ie,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-webgl2-ofb-full_es3.a",
          70990,
          "7bad320aca57700d16e8c53dc987add2",
          ie,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-webgl2-ofb.a",
          70234,
          "95c9bf05cc59bdec5d591a946ed2dbb3",
          se,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww-webgl2.a",
          70234,
          "95c9bf05cc59bdec5d591a946ed2dbb3",
          se,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL-ww.a",
          39232,
          "2dfa77c642581693b4df09fc1ef09faf",
          ae,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libGL.a",
          39098,
          "b8c76d5f85c8bbef9dd7966810c24bcb",
          J,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libal.a",
          18656,
          "7e4fc0e6a6e871ff6ef69158127f7535",
          ce,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libasan_js.a",
          7898,
          "4c5036ca39e24b15d7618eac8907b198",
          ue,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libasan_rt-mt.a",
          1674326,
          "5306c80d0657c56435f628fba93623a8",
          le,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libasan_rt-ww.a",
          1673730,
          "5b3a63370bd34b358e71051cdded3a96",
          de,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libasan_rt.a",
          1677340,
          "d826f4d2fef306fe888fb7aa63b9e1f3",
          fe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-except.a",
          6437758,
          "f550c2d7e4ef2a975f9f47ab05bb06df",
          _e,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-mt-except.a",
          6442030,
          "c18f8e0d725bd1ee41b1b41f022f1816",
          me,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-mt-noexcept.a",
          6211864,
          "deb516921775a9169b282ff83db9145d",
          pe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-mt.a",
          6583348,
          "d2350672afcd7be92f81adc614f14582",
          Se,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-noexcept.a",
          6209488,
          "0a46b0190999baab70e9d5a5a6000da2",
          Ee,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-ww-except.a",
          6441072,
          "d59d4b42a84da2e4bb8e520bf50ae5dd",
          he,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-ww-noexcept.a",
          6210918,
          "ef0e27928f857475dae386cbe7adfa48",
          Fe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++-ww.a",
          6582366,
          "9feb1ed5c92fabd93f448dc154babb8a",
          we,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++.a",
          6641068,
          "7f0f63af51d880cdd2996983d627357c",
          ye,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-except.a",
          1324238,
          "3b0272fae1c70748ab0dd1448c7860af",
          be,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-mt-except.a",
          1344780,
          "453c30f086c10b17aa65d4367a6be84a",
          ve,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-mt-noexcept.a",
          1255620,
          "81effd1cf4c86b7d10398f1e4b45e437",
          ge,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-mt.a",
          1262194,
          "d20e952acdea910c75a04cb97dc785e4",
          Me,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-noexcept.a",
          1239542,
          "8c3865e2c44d709f1443462018e8383b",
          Ae,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-ww-except.a",
          1344346,
          "4a124d06b94a6331bf8896d28de65375",
          ke,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-ww-noexcept.a",
          1255220,
          "54ff55d98b26f130c31359c7e6270040",
          Pe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug-ww.a",
          1261822,
          "1cd6df80325b9daaea2f9d32dc1f713d",
          Te,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-debug.a",
          1246268,
          "9ed3c10f8d95aa6e7f1ade7bfe14178d",
          De,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-except.a",
          1000732,
          "1ff318d7409dabb95f950a541315edcd",
          Re,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-mt-except.a",
          1021280,
          "2513fcc59d6cc5e468daf29b6b10338e",
          Oe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-mt-noexcept.a",
          934376,
          "7f665d094d5a65d50dab1a15dcaaac3e",
          Ne,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-mt.a",
          939898,
          "070359500dc960418d7d8f34dc420eee",
          He,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-noexcept.a",
          918294,
          "1ddbd451cc4db7159c8bf8a11b423840",
          Le,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-ww-except.a",
          1020828,
          "040bfad62672f56230948b0eeab2d6e2",
          Ie,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-ww-noexcept.a",
          933960,
          "f53afcf9ac54f12afaeeee0197972eaf",
          Ce,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi-ww.a",
          939508,
          "9dfe4b79ed0b53be3f26cba517a2dd56",
          xe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc++abi.a",
          923732,
          "a068c2e2ac626de87f03488352a3237c",
          Ue,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-asan-debug.a",
          4158968,
          "5599624329030e042138b1193025b0ed",
          Be,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-asan.a",
          4151650,
          "39970629e6f0275439f90a25a291a8ca",
          je,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-debug.a",
          3128288,
          "046210061d6b6e0bcd6139b27ebba4c2",
          Ye,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-mt-asan-debug.a",
          4687278,
          "a21c558651c2f2f0aa5d78cf4e76fa56",
          qe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-mt-asan.a",
          4661804,
          "d46eabec99a99a7226b5182d548897a4",
          ze,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-mt-debug.a",
          3537434,
          "c568ebd1d6459575931e6def98c4aa57",
          We,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-mt.a",
          3523698,
          "8b830e3b53a183b19e1f36a01f7ecb68",
          Xe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-ww-asan-debug.a",
          4202764,
          "a1391c7292b2f4f7b8a7e79d6d819cb5",
          Ve,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-ww-asan.a",
          4195460,
          "9d0578d2feff938e5f6e9fd742465ad5",
          Ge,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-ww-debug.a",
          3171358,
          "4a8dc5e04f1145739232f5b017668e89",
          Ke,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc-ww.a",
          3166834,
          "4cb884f311841123686dfb93dda20d6a",
          Ze,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc.a",
          3123758,
          "b25179671552cce3604a0f7b0c8a8963",
          Je,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-asan-debug.a",
          26570,
          "7001efb36f7fdacfb52f95bb44cca129",
          Qe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-asan.a",
          26570,
          "7001efb36f7fdacfb52f95bb44cca129",
          Qe,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-debug.a",
          24338,
          "c03f4ec05c1944aa9bd66f298c93a234",
          $e,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-mt-asan-debug.a",
          27074,
          "2e678fa051d9f7468561ca572f060d4f",
          er,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-mt-asan.a",
          27074,
          "2e678fa051d9f7468561ca572f060d4f",
          er,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-mt-debug.a",
          24842,
          "50d129b29e1f302ace4f665b0434c6ce",
          rr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-mt.a",
          24842,
          "50d129b29e1f302ace4f665b0434c6ce",
          rr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-ww-asan-debug.a",
          26884,
          "10cc8ee166e38e9a30821cc0a4996fb1",
          tr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-ww-asan.a",
          26884,
          "10cc8ee166e38e9a30821cc0a4996fb1",
          tr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-ww-debug.a",
          24656,
          "39f6864c363b8d4201ab2a363fd58a3e",
          nr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz-ww.a",
          24656,
          "39f6864c363b8d4201ab2a363fd58a3e",
          nr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libc_optz.a",
          24338,
          "c03f4ec05c1944aa9bd66f298c93a234",
          $e,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libcompiler_rt-mt.a",
          539682,
          "a9a75cf2ecc424255a665b2b23849a3a",
          or,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libcompiler_rt-wasm-sjlj-mt.a",
          543354,
          "6543be5ce2334bcbf5f21002732a7ad9",
          ar,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libcompiler_rt-wasm-sjlj-ww.a",
          538724,
          "18b911523a3514e00b9a997978140930",
          ir,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libcompiler_rt-wasm-sjlj.a",
          538266,
          "2672ffe6faed07e5c751173b6f5571fe",
          sr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libcompiler_rt-ww.a",
          535052,
          "30f2166d0dbdeee01a246156333fedbc",
          cr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libcompiler_rt.a",
          530834,
          "be9f2672774270314485e6028dd8f64a",
          ur,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-debug-noerrno-tracing.a",
          84782,
          "b1b00d4a8b79d75824522f3049daf9ac",
          lr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-debug-noerrno.a",
          84026,
          "88257e4d61e7dfd747c8ae3b1f7f469a",
          dr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-debug-tracing.a",
          85456,
          "ee7bccd4528b2ca20d9ab30f63ed175c",
          fr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-debug.a",
          84590,
          "0bd1ce855314ca5ad860dfc70c27ead2",
          _r,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt-debug-noerrno-tracing.a",
          84858,
          "3b12389fcae76b98e9ee664fdb5b01c8",
          mr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt-debug-noerrno.a",
          84144,
          "bc5228af558b84e67d7096a067ce3b22",
          pr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt-debug-tracing.a",
          85330,
          "ba39fc5895efb65c3822db88c47115d9",
          Sr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt-debug.a",
          84576,
          "1981b585b84ddf1c37c8aa6396397374",
          Er,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt-noerrno-tracing.a",
          81602,
          "52752761edf9197eb4555c3c66b1cfc7",
          hr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt-noerrno.a",
          80888,
          "c57fbf3695ad8bd31662d565201c19c4",
          Fr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt-tracing.a",
          82032,
          "e12cb4403d1c10841267f22cfb5b1f1b",
          wr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-mt.a",
          81278,
          "545e98f635cff8e7002285b817b61506",
          yr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-noerrno-tracing.a",
          81438,
          "7ba0c7cffc40ab5ebeeee874a4b876c5",
          br,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-noerrno.a",
          80682,
          "bbf296bdcc528ce683b34d4c05aa93e1",
          vr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-tracing.a",
          82070,
          "bb4717a108d4edaa7cb9f5be0b7665ef",
          gr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww-debug-noerrno-tracing.a",
          84872,
          "1e68b3e9635fbbe0c543b7102f20cbc8",
          Mr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww-debug-noerrno.a",
          84116,
          "ada197b345ee1027cd196dee44e5cd6a",
          Ar,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww-debug-tracing.a",
          85546,
          "34dc3a9a0e14e1d90e09781662ce4f8c",
          kr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww-debug.a",
          84678,
          "6d8a521077ee58bf016eaadcb5382241",
          Pr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww-noerrno-tracing.a",
          81526,
          "f025ac5a2ab661c0e88d5f77eee078b2",
          Tr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww-noerrno.a",
          80770,
          "38c9debbddbc60a9517a1dfbfc543ebc",
          Dr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww-tracing.a",
          82162,
          "5405ebc6484cbd5f34d26849669c2b96",
          Rr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc-ww.a",
          81292,
          "35526b09e03adf6680098cc667c911de",
          Or,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libdlmalloc.a",
          81204,
          "e9baf86a3644c2e97580741d4086238a",
          Nr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libembind-rtti.a",
          60404,
          "2b0083efb63467f4500da0fb7ccced51",
          Hr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libembind.a",
          69976,
          "28dcc1410a7f959a3e4d2ba2435c2a32",
          Lr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-debug-noerrno-tracing.a",
          69520,
          "7996331874a7dba13059e97a81c89285",
          Ir,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-debug-noerrno.a",
          68188,
          "095eb3c22cc70ccedb382bccbb3d5286",
          Cr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-debug-tracing.a",
          69726,
          "26be4a1c38f52c834a8cd0e69f38af6f",
          xr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-debug.a",
          68324,
          "bf7c88407e1961a8f41ed2fc8dc4d944",
          Ur,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-mt-noerrno-tracing.a",
          70436,
          "5a45db3dab38d5f2f9bb3f5fd5ef4bf7",
          Br,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-mt-noerrno.a",
          69512,
          "75f75f9c496cb32ba7a5fdeef17f11df",
          jr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-mt-tracing.a",
          70492,
          "a156dc97239ffb3bcf34355d302ec23b",
          Yr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-mt.a",
          69568,
          "aed7c32cd96a1013d2f1066f4ca0f7de",
          qr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-noerrno-tracing.a",
          70070,
          "d5e8c205953dc737bbef0ffce6b25588",
          zr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-noerrno.a",
          68820,
          "b9549002504d3dd0f7d18e0066d246f9",
          Wr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-tracing.a",
          70276,
          "b7187ed2e622a157137e5d367b956b4d",
          Xr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-mt-noerrno-tracing.a",
          78716,
          "569a4e9dc8225b0727310f4136fbe47d",
          Vr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-mt-noerrno.a",
          77744,
          "a9e688346e5e8936352a504c86ec0a5c",
          Gr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-mt-tracing.a",
          78772,
          "1bd2b4c69ceda8b546e390780c8a0656",
          Kr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-mt.a",
          77800,
          "c2bd218abb71572833ba951ec874a144",
          Zr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-noerrno-tracing.a",
          75694,
          "57394b86bc65119d986ce45640132663",
          Jr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-noerrno.a",
          74712,
          "9159d987f47af6edac5e38959f077327",
          Qr,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-tracing.a",
          75900,
          "435c3df5ecbefeed6038296d92df4bdd",
          $r,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-ww-noerrno-tracing.a",
          75784,
          "839999601a2aadd297fc7de8a039a39b",
          et,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-ww-noerrno.a",
          74800,
          "0190b60668dbf40987f56c31446c56ca",
          rt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-ww-tracing.a",
          75992,
          "ffe2af0ed0f11e70c5f66cf267ad368d",
          tt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose-ww.a",
          74936,
          "8a2b9fe11dc72e3193582604cef88da9",
          nt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-verbose.a",
          74848,
          "30ffc3081a0463c363e6eb42a8de682d",
          ot,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-ww-noerrno-tracing.a",
          70158,
          "1be44146e22c0806bbb284698b69f36d",
          at,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-ww-noerrno.a",
          68910,
          "700be6099162dfe2ddc08e0a44314f82",
          it,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-ww-tracing.a",
          70366,
          "afc422ed57cc3b730d9ecb2b66b1706f",
          st,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate-ww.a",
          69046,
          "4d0836d7c5cf75dad1339529913b47fa",
          ct,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-memvalidate.a",
          68956,
          "f609e025acaa4317ab96973dddfc399b",
          ut,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt-debug-noerrno-tracing.a",
          69856,
          "83c489507a31359bf5be9d5499310c31",
          lt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt-debug-noerrno.a",
          68726,
          "b323a0f02c7509859c0130fd2c879dec",
          dt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt-debug-tracing.a",
          69912,
          "eb784e46572b0d7b72b6ff3cf4f81063",
          ft,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt-debug.a",
          68782,
          "c564c1f35d531db25dd18bc12bf15f8d",
          _t,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt-noerrno-tracing.a",
          51650,
          "01ea541f4add070efb41d09e61f86a12",
          mt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt-noerrno.a",
          51682,
          "9631e59c79ad661fd8955ff4d1f6dc43",
          pt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt-tracing.a",
          51706,
          "6f32b51ddde84c5071b52600a1e42edf",
          St,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-mt.a",
          51738,
          "76783a36920e1f4964395af7a51ccd41",
          Et,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-noerrno-tracing.a",
          51420,
          "1e183d1e2acc0c71d5d8539ca290e00b",
          ht,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-noerrno.a",
          51404,
          "940f9efbefd3028fc00b3e20c0f465d2",
          Ft,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-tracing.a",
          51626,
          "3ff65aff8260a874068d3430219c2579",
          wt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-mt-noerrno-tracing.a",
          78204,
          "08f851b12237ab485f337b8cc856a5f8",
          yt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-mt-noerrno.a",
          77226,
          "3d302da309468b62f8122a11e0a164d9",
          bt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-mt-tracing.a",
          78260,
          "2d28b9fe89966ccb688b7d2908429241",
          vt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-mt.a",
          77282,
          "455952a3ad3e3ada1051b44b5b61c31e",
          gt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-noerrno-tracing.a",
          75460,
          "c6defee1d5b78225f7b31e980a739c70",
          Mt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-noerrno.a",
          74494,
          "7b1c5686dc66388ce91e60159a84619a",
          At,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-tracing.a",
          75666,
          "82f0ee2037147e227f14b21543a7c7ae",
          kt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-ww-noerrno-tracing.a",
          75548,
          "5bb2e5e04b90f2c74df39098690f1475",
          Pt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-ww-noerrno.a",
          74582,
          "68f1b4d321c88887664c014c6f4f4937",
          Tt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-ww-tracing.a",
          75756,
          "45974be0c67858f48b496602943c546c",
          Dt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose-ww.a",
          74718,
          "367b07bac0b742f7a40d2d28dcbef8c0",
          Rt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-verbose.a",
          74630,
          "c297d79bd3e04e231d67eff5edde10b8",
          Ot,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww-debug-noerrno-tracing.a",
          69608,
          "bdc320b2039bf20f916329a172ea40d3",
          Nt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww-debug-noerrno.a",
          68278,
          "b81aad4d103937fe6c39b5ed513b234b",
          Ht,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww-debug-tracing.a",
          69816,
          "52bfa284b2ba97e421a73cc4d2ba8d35",
          Lt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww-debug.a",
          68414,
          "f6f3ce4b22122efa2385eb6a030ac2f1",
          It,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww-noerrno-tracing.a",
          51510,
          "8da1d1c70dde8388ffd80ff80adaeb89",
          Ct,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww-noerrno.a",
          51492,
          "d9e3c49e4cf4333dbfb86aa9bcccc59d",
          xt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww-tracing.a",
          51718,
          "a07b1218c0f4e8e1b38f7afbef74f3dc",
          Ut,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc-ww.a",
          51628,
          "43d83cb9fbc09826b0cd2b75a3851f15",
          Bt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libemmalloc.a",
          51540,
          "6fdb9710e9582e912f86efedb4ebbfba",
          jt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libfetch-mt.a",
          13526,
          "7cd7c30a08a5111025a370a4ed1dc4df",
          Yt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libfetch-ww.a",
          12296,
          "e859276f8b3552e62a1d94c1e698d994",
          qt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libfetch.a",
          12330,
          "7910e8d5c9e8e91ba6e4c6b4a2df5739",
          zt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libhtml5.a",
          39268,
          "b3ca4cfb757229cd138a4c749a0ebd16",
          Wt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libjsmath.a",
          13202,
          "120860d61964585b512f554dedad20af",
          Xt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/liblsan_common_rt-mt.a",
          221900,
          "60b6367cef668aa703f739fe3dfccc38",
          Vt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/liblsan_common_rt-ww.a",
          222514,
          "84fcf58f61752f74496567dfa2134af4",
          Gt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/liblsan_common_rt.a",
          224430,
          "3479d9a970504320f649a364cea55413",
          Kt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/liblsan_rt-mt.a",
          505914,
          "0d0daf749e2fc40cb36063339ea08e42",
          Zt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/liblsan_rt-ww.a",
          505610,
          "14c299d8536eebb9ae4086a112ac5fde",
          Jt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/liblsan_rt.a",
          505270,
          "ff0602c38b533d903d1a0c3fb5f380f5",
          Qt,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libnoexit.a",
          1608,
          "c41915f1beb948a61c19c8a58ec250e2",
          $t,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-asan-debug.a",
          49764,
          "d969bfe5cf44c3edfd761950caa36437",
          en,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-asan.a",
          49764,
          "d969bfe5cf44c3edfd761950caa36437",
          en,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-debug.a",
          32894,
          "e9fa21952c5529d2ad0f7b4006ccca13",
          rn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-mt-asan-debug.a",
          49836,
          "60f555021da364d7e7dca653e82291f1",
          tn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-mt-asan.a",
          49836,
          "60f555021da364d7e7dca653e82291f1",
          tn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-mt-debug.a",
          32958,
          "07d77e41e4f931d708b32a18e853cd56",
          nn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-mt.a",
          32958,
          "07d77e41e4f931d708b32a18e853cd56",
          nn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-ww-asan-debug.a",
          49810,
          "f93c52fb9877669a8e258a20ca454fb1",
          on,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-ww-asan.a",
          49810,
          "f93c52fb9877669a8e258a20ca454fb1",
          on,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-ww-debug.a",
          32930,
          "8cca425aaebaf40bef8ef816426faf1f",
          an,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double-ww.a",
          32930,
          "8cca425aaebaf40bef8ef816426faf1f",
          an,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libprintf_long_double.a",
          32894,
          "e9fa21952c5529d2ad0f7b4006ccca13",
          rn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsanitizer_common_rt-mt.a",
          10569876,
          "21c0514e97a96642aa6cc3089879d57e",
          sn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsanitizer_common_rt-ww.a",
          10567756,
          "247e02e3dbd5079b3642e16fe954f770",
          cn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsanitizer_common_rt.a",
          10566920,
          "ad204ac79ccce1b5946f83610572f9d9",
          un,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsockets-mt.a",
          40254,
          "3358e5158e8d821025755594b93f2d89",
          ln,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsockets-ww.a",
          39682,
          "328524d542e9c95ca91b2f9e80d39bd6",
          dn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsockets.a",
          38742,
          "f4c8b798eb5d4b3059b18ce56653c0c7",
          fn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsockets_proxy-mt.a",
          33814,
          "9174cfc72df616f1035d37ed3d99e2fd",
          _n,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsockets_proxy-ww.a",
          33788,
          "d9d763381cec20dd1b09894c0b411707",
          mn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libsockets_proxy.a",
          33960,
          "3cb14b3bcba85da1d510054bb76554e7",
          pn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libstandalonewasm-memgrow.a",
          83924,
          "7a4e5b76944bec6ea29de31f12c7c9aa",
          Sn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libstandalonewasm.a",
          83412,
          "1bd28a12e65214c54cd048f4ab3e1f33",
          En,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libstb_image.a",
          377906,
          "f67b6bf92448fb41678a673898d43827",
          hn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libstubs-debug.a",
          28932,
          "f0ee398a06d1c95ed6b28bad40d1f9c3",
          Fn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libstubs.a",
          24778,
          "80c0c8f4bcee3790fe402a4a377b3780",
          wn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libubsan_minimal_rt-mt.a",
          30756,
          "2af547af0b36122e923026df5990ac8c",
          yn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libubsan_minimal_rt-ww.a",
          30730,
          "c626964ae0ed858c60199c1ce466c380",
          bn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libubsan_minimal_rt.a",
          30748,
          "319f805692d27d52eaaf0e2c87e3927d",
          vn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libubsan_rt-mt.a",
          608350,
          "88641c340df99b52569fff8658c181b7",
          gn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libubsan_rt-ww.a",
          607916,
          "1eca04d59dcf430d439c0da9645fcf28",
          Mn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libubsan_rt.a",
          607436,
          "02f3b8b7b53ee7014a789d6af98430f6",
          An,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-except.a",
          5074,
          "b7b48b2660e45ec12f760bdb00522a80",
          kn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-mt-except.a",
          5136,
          "b5328bf2c5a1cdd2a0c4be97a9e8fa0a",
          Pn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-mt-noexcept.a",
          400,
          "f38cb19b37e0a8a4c0b3d2a39faf895d",
          Tn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-mt.a",
          400,
          "f38cb19b37e0a8a4c0b3d2a39faf895d",
          Tn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-noexcept.a",
          328,
          "c891e99baa172974f4f08e416747dbbc",
          Dn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-ww-except.a",
          5110,
          "bf991c5aa94208a860f10e6d2f42d76e",
          Rn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-ww-noexcept.a",
          374,
          "c74d21de3e07251fab6c4a0446dcbdba",
          On,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind-ww.a",
          374,
          "c74d21de3e07251fab6c4a0446dcbdba",
          On,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libunwind.a",
          328,
          "c891e99baa172974f4f08e416747dbbc",
          Dn,
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasm_workers-debug.a",
          16918,
          "84121b5082a9dbb7238b9d68f8bc393c",
          __webpack_require__(5933),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasm_workers.a",
          13122,
          "aacd1ceb8ea30459277ab274fdd39bf2",
          __webpack_require__(8252),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasm_workers_stub-debug.a",
          7074,
          "918e5d57d717571f124f008b44585275",
          __webpack_require__(4796),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasm_workers_stub.a",
          6108,
          "5b640cabf0e08942b7b85876609f20f4",
          __webpack_require__(1746),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-asan-debug-icase.a",
          7792522,
          "054c5bb139894517746ce23664912844",
          __webpack_require__(2895),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-asan-debug.a",
          7749204,
          "703271cd1dbba742b6a9683d1a88701d",
          __webpack_require__(5666),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-asan-icase.a",
          7687442,
          "557ade70ce9c88fdb660f80f70e91a05",
          __webpack_require__(1934),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-asan.a",
          7641484,
          "4ef554032090a44ffbfa1ac806904990",
          __webpack_require__(6644),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-debug-icase.a",
          6274122,
          "a662b95450ff037d79bdd3496971ab59",
          __webpack_require__(4756),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-debug.a",
          6233624,
          "7e0f6fb2c2c2915ef19910119efe82ac",
          __webpack_require__(9777),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-icase.a",
          6206758,
          "d3be86d2155b3ef823f11a5719d4a6a1",
          __webpack_require__(3903),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt-asan-debug-icase.a",
          7786548,
          "548ffa037b82ccb9b952854624654f41",
          __webpack_require__(9441),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt-asan-debug.a",
          7743202,
          "50e06234f00c71deb585c16b1e20983d",
          __webpack_require__(3155),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt-asan-icase.a",
          7681122,
          "26dc3f87a55cacf0b3569687199059ef",
          __webpack_require__(489),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt-asan.a",
          7635140,
          "c2056a717a8cd0c4744d7a1707fea262",
          __webpack_require__(7938),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt-debug-icase.a",
          6276664,
          "e0c6ba457e2448cb4254712ecf02394d",
          __webpack_require__(9899),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt-debug.a",
          6236128,
          "9f9d170a961556c47548fc81af614015",
          __webpack_require__(6814),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt-icase.a",
          6209170,
          "582673c92e3cdc9a7d42f59e8a280056",
          __webpack_require__(4024),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-mt.a",
          6169908,
          "5dd82287c27b3daee7365db0a6ad3e73",
          __webpack_require__(4392),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww-asan-debug-icase.a",
          7786228,
          "e862e2bec8399a5b795c97eec902b6a1",
          __webpack_require__(4061),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww-asan-debug.a",
          7742882,
          "76a86ada23c6e396c0adf124080fd657",
          __webpack_require__(4032),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww-asan-icase.a",
          7680796,
          "52ec874536d468b0418005aef7ac51cf",
          __webpack_require__(4491),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww-asan.a",
          7634814,
          "fb462200d343cc466b93f34fa885c2a0",
          __webpack_require__(3237),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww-debug-icase.a",
          6276486,
          "f44750e86c93e73c5b7e830763bfa7b1",
          __webpack_require__(9798),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww-debug.a",
          6235950,
          "6892beb0243390397ee1608c8134b637",
          __webpack_require__(3740),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww-icase.a",
          6208976,
          "62ce7ae8032d4715aa72823c2a406269",
          __webpack_require__(4389),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs-ww.a",
          6169714,
          "2562140dcbc950d25a765ea3255d4079",
          __webpack_require__(4106),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwasmfs.a",
          6167496,
          "dac7521057afefc7b1304ab49147f219",
          __webpack_require__(8068),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwebgpu_cpp-mt.a",
          194986,
          "a0a3128517ebe704e40125fd9b27744a",
          __webpack_require__(2989),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwebgpu_cpp-ww.a",
          194960,
          "3a98ae84d23657bded86fe1e07af0ebb",
          __webpack_require__(9226),
        ],
        [
          "./cache/sysroot/lib/wasm32-emscripten/libwebgpu_cpp.a",
          194914,
          "34452a5b064239d69ec3888972959c3b",
          __webpack_require__(2045),
        ],
      ],
      Hn = new (class {
        fileSystem = null;
        tools = {};
        async init() {
          const e = await new w();
          (this.fileSystem = e),
            await e.cachedLazyFile(...T),
            await e.unpack(T[0]);
          for (const [r, ...t] of Nn) {
            const n = `/emscripten/${r.slice(2)}`;
            await e.cachedLazyFile(n, ...t);
          }
          e.exists("/emscripten/cache/cache.lock") &&
            e.unlink("/emscripten/cache/cache.lock");
          const r = {
              FS: e.FS,
              onrunprocess: (...e) => this._run_process(...e),
            },
            t = {
              "llvm-box": new b(r),
              "binaryen-box": new g(r),
              node: new P(r),
              python: new A(r),
              "main-python": new A(r),
            };
          this.tools = t;
          for (let e in t) await t[e];
        }
        onprocessstart = () => {};
        onprocessend = () => {};
        onstdout = () => {};
        onstderr = () => {};
        run(...e) {
          return (
            1 == e.length && (e = e[0].split(/ +/)),
            (e = [
              "/usr/bin/python",
              "-E",
              `/emscripten/${e[0]}.py`,
              ...e.slice(1),
            ]),
            this.tools["main-python"].exec(e, {
              print: (...e) => this.onstdout(...e),
              printErr: (...e) => this.onstderr(...e),
              cwd: "/working",
              path: ["/emscripten"],
            })
          );
        }
        _run_process(e, r = {}) {
          this.onprocessstart(e);
          const t = this._run_process_impl(e, r);
          return this.onprocessend(t), t;
        }
        _run_process_impl(e, r = {}) {
          const t = e[0].match(/\/emscripten\/(.+)(\.py)?/);
          if (
            (t &&
              (e = [
                "/usr/bin/python",
                "-E",
                `/emscripten/${t[1]}.py`,
                ...args.slice(1),
              ]),
            !this.fileSystem.exists(e[0]))
          )
            return {
              returncode: 1,
              stdout: "",
              stderr: `Executable not found: ${JSON.stringify(e[0])}`,
            };
          const n =
              "/usr/bin/python" === e[0]
                ? "python"
                : this.fileSystem.readFile(e[0], { encoding: "utf8" }),
            [o, ...a] = n.split(";");
          if (!(o in this.tools))
            return {
              returncode: 1,
              stdout: "",
              stderr: `File is not executable: ${JSON.stringify(e[0])}`,
            };
          e = [...a, ...e];
          const i = this.tools[o].exec(e, {
            ...r,
            cwd: r.cwd || "/",
            path: ["/emscripten"],
          });
          return this.fileSystem.push(), i;
        }
      })();
    (globalThis.emception = Hn), i(Hn);
  })();
})();
